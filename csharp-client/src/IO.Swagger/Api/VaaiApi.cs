/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVaaiApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Return job status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Job</returns>
        Job OpVaaiVmCloneJobJobidGetStatus (string jobid, string acceptLanguage = null);

        /// <summary>
        /// Return job status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> OpVaaiVmCloneJobJobidGetStatusWithHttpInfo (string jobid, string acceptLanguage = null);
        /// <summary>
        /// Creates a specified number of clones for the given vm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Job</returns>
        Job OpVaaiVmCloneJobPost (VmCloneSpec body, string acceptLanguage = null);

        /// <summary>
        /// Creates a specified number of clones for the given vm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> OpVaaiVmCloneJobPostWithHttpInfo (VmCloneSpec body, string acceptLanguage = null);
        /// <summary>
        /// Get list of clones jobs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxJobs">maximum number of jobs will be returned (optional)</param>
        /// <param name="maxTimeDiffMinutes">jobs created in last \&quot;maxTimeDiffMinutes\&quot; minutes (optional)</param>
        /// <returns>List&lt;Job&gt;</returns>
        List<Job> OpVaaiVmCloneJobsGet (int? maxJobs = null, long? maxTimeDiffMinutes = null);

        /// <summary>
        /// Get list of clones jobs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxJobs">maximum number of jobs will be returned (optional)</param>
        /// <param name="maxTimeDiffMinutes">jobs created in last \&quot;maxTimeDiffMinutes\&quot; minutes (optional)</param>
        /// <returns>ApiResponse of List&lt;Job&gt;</returns>
        ApiResponse<List<Job>> OpVaaiVmCloneJobsGetWithHttpInfo (int? maxJobs = null, long? maxTimeDiffMinutes = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Return job status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> OpVaaiVmCloneJobJobidGetStatusAsync (string jobid, string acceptLanguage = null);

        /// <summary>
        /// Return job status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> OpVaaiVmCloneJobJobidGetStatusAsyncWithHttpInfo (string jobid, string acceptLanguage = null);
        /// <summary>
        /// Creates a specified number of clones for the given vm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> OpVaaiVmCloneJobPostAsync (VmCloneSpec body, string acceptLanguage = null);

        /// <summary>
        /// Creates a specified number of clones for the given vm.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> OpVaaiVmCloneJobPostAsyncWithHttpInfo (VmCloneSpec body, string acceptLanguage = null);
        /// <summary>
        /// Get list of clones jobs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxJobs">maximum number of jobs will be returned (optional)</param>
        /// <param name="maxTimeDiffMinutes">jobs created in last \&quot;maxTimeDiffMinutes\&quot; minutes (optional)</param>
        /// <returns>Task of List&lt;Job&gt;</returns>
        System.Threading.Tasks.Task<List<Job>> OpVaaiVmCloneJobsGetAsync (int? maxJobs = null, long? maxTimeDiffMinutes = null);

        /// <summary>
        /// Get list of clones jobs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxJobs">maximum number of jobs will be returned (optional)</param>
        /// <param name="maxTimeDiffMinutes">jobs created in last \&quot;maxTimeDiffMinutes\&quot; minutes (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Job&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Job>>> OpVaaiVmCloneJobsGetAsyncWithHttpInfo (int? maxJobs = null, long? maxTimeDiffMinutes = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VaaiApi : IVaaiApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VaaiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VaaiApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VaaiApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VaaiApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Return job status 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Job</returns>
        public Job OpVaaiVmCloneJobJobidGetStatus (string jobid, string acceptLanguage = null)
        {
             ApiResponse<Job> localVarResponse = OpVaaiVmCloneJobJobidGetStatusWithHttpInfo(jobid, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return job status 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of Job</returns>
        public ApiResponse< Job > OpVaaiVmCloneJobJobidGetStatusWithHttpInfo (string jobid, string acceptLanguage = null)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling VaaiApi->OpVaaiVmCloneJobJobidGetStatus");

            var localVarPath = "/vaai/vm/clone/job/{jobid}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpVaaiVmCloneJobJobidGetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
        }

        /// <summary>
        /// Return job status 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> OpVaaiVmCloneJobJobidGetStatusAsync (string jobid, string acceptLanguage = null)
        {
             ApiResponse<Job> localVarResponse = await OpVaaiVmCloneJobJobidGetStatusAsyncWithHttpInfo(jobid, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return job status 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobid"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Job>> OpVaaiVmCloneJobJobidGetStatusAsyncWithHttpInfo (string jobid, string acceptLanguage = null)
        {
            // verify the required parameter 'jobid' is set
            if (jobid == null)
                throw new ApiException(400, "Missing required parameter 'jobid' when calling VaaiApi->OpVaaiVmCloneJobJobidGetStatus");

            var localVarPath = "/vaai/vm/clone/job/{jobid}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobid != null) localVarPathParams.Add("jobid", Configuration.ApiClient.ParameterToString(jobid)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpVaaiVmCloneJobJobidGetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
        }

        /// <summary>
        /// Creates a specified number of clones for the given vm. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Job</returns>
        public Job OpVaaiVmCloneJobPost (VmCloneSpec body, string acceptLanguage = null)
        {
             ApiResponse<Job> localVarResponse = OpVaaiVmCloneJobPostWithHttpInfo(body, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a specified number of clones for the given vm. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of Job</returns>
        public ApiResponse< Job > OpVaaiVmCloneJobPostWithHttpInfo (VmCloneSpec body, string acceptLanguage = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VaaiApi->OpVaaiVmCloneJobPost");

            var localVarPath = "/vaai/vm/clone/job";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpVaaiVmCloneJobPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
        }

        /// <summary>
        /// Creates a specified number of clones for the given vm. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> OpVaaiVmCloneJobPostAsync (VmCloneSpec body, string acceptLanguage = null)
        {
             ApiResponse<Job> localVarResponse = await OpVaaiVmCloneJobPostAsyncWithHttpInfo(body, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a specified number of clones for the given vm. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Job>> OpVaaiVmCloneJobPostAsyncWithHttpInfo (VmCloneSpec body, string acceptLanguage = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VaaiApi->OpVaaiVmCloneJobPost");

            var localVarPath = "/vaai/vm/clone/job";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpVaaiVmCloneJobPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Job>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Job) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Job)));
        }

        /// <summary>
        /// Get list of clones jobs. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxJobs">maximum number of jobs will be returned (optional)</param>
        /// <param name="maxTimeDiffMinutes">jobs created in last \&quot;maxTimeDiffMinutes\&quot; minutes (optional)</param>
        /// <returns>List&lt;Job&gt;</returns>
        public List<Job> OpVaaiVmCloneJobsGet (int? maxJobs = null, long? maxTimeDiffMinutes = null)
        {
             ApiResponse<List<Job>> localVarResponse = OpVaaiVmCloneJobsGetWithHttpInfo(maxJobs, maxTimeDiffMinutes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of clones jobs. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxJobs">maximum number of jobs will be returned (optional)</param>
        /// <param name="maxTimeDiffMinutes">jobs created in last \&quot;maxTimeDiffMinutes\&quot; minutes (optional)</param>
        /// <returns>ApiResponse of List&lt;Job&gt;</returns>
        public ApiResponse< List<Job> > OpVaaiVmCloneJobsGetWithHttpInfo (int? maxJobs = null, long? maxTimeDiffMinutes = null)
        {

            var localVarPath = "/vaai/vm/clone/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxJobs != null) localVarQueryParams.Add("maxJobs", Configuration.ApiClient.ParameterToString(maxJobs)); // query parameter
            if (maxTimeDiffMinutes != null) localVarQueryParams.Add("maxTimeDiffMinutes", Configuration.ApiClient.ParameterToString(maxTimeDiffMinutes)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpVaaiVmCloneJobsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Job>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Job>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Job>)));
        }

        /// <summary>
        /// Get list of clones jobs. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxJobs">maximum number of jobs will be returned (optional)</param>
        /// <param name="maxTimeDiffMinutes">jobs created in last \&quot;maxTimeDiffMinutes\&quot; minutes (optional)</param>
        /// <returns>Task of List&lt;Job&gt;</returns>
        public async System.Threading.Tasks.Task<List<Job>> OpVaaiVmCloneJobsGetAsync (int? maxJobs = null, long? maxTimeDiffMinutes = null)
        {
             ApiResponse<List<Job>> localVarResponse = await OpVaaiVmCloneJobsGetAsyncWithHttpInfo(maxJobs, maxTimeDiffMinutes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of clones jobs. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxJobs">maximum number of jobs will be returned (optional)</param>
        /// <param name="maxTimeDiffMinutes">jobs created in last \&quot;maxTimeDiffMinutes\&quot; minutes (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Job&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Job>>> OpVaaiVmCloneJobsGetAsyncWithHttpInfo (int? maxJobs = null, long? maxTimeDiffMinutes = null)
        {

            var localVarPath = "/vaai/vm/clone/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (maxJobs != null) localVarQueryParams.Add("maxJobs", Configuration.ApiClient.ParameterToString(maxJobs)); // query parameter
            if (maxTimeDiffMinutes != null) localVarQueryParams.Add("maxTimeDiffMinutes", Configuration.ApiClient.ParameterToString(maxTimeDiffMinutes)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpVaaiVmCloneJobsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Job>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Job>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Job>)));
        }

    }
}
