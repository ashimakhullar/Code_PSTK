/* 
 * HX REST API for Data Protection
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecoverApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Failover the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="failoverVMOptions">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>string</returns>
        string OpDpVmFailoverPut (string vmId, string accessToken, RecoverVmOptions failoverVMOptions = null, string acceptLanguage = null);

        /// <summary>
        /// Failover the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="failoverVMOptions">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> OpDpVmFailoverPutWithHttpInfo (string vmId, string accessToken, RecoverVmOptions failoverVMOptions = null, string acceptLanguage = null);
        /// <summary>
        /// Prepare failover for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>string</returns>
        string OpDpVmPrepareFailoverPut (string vmId, string accessToken, string acceptLanguage = null);

        /// <summary>
        /// Prepare failover for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> OpDpVmPrepareFailoverPutWithHttpInfo (string vmId, string accessToken, string acceptLanguage = null);
        /// <summary>
        /// Prepare reverse protect for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>string</returns>
        string OpDpVmPrepareReverseProtectPut (string vmId, string accessToken,string acceptLanguage = null);

        /// <summary>
        /// Prepare reverse protect for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> OpDpVmPrepareReverseProtectPutWithHttpInfo (string vmId,string accessToken,string acceptLanguage = null);
        /// <summary>
        /// Reverse protect for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>string</returns>
        string OpDpVmReverseProtectPut (string vmId, string accessToken, string acceptLanguage = null);

        /// <summary>
        /// Reverse protect for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> OpDpVmReverseProtectPutWithHttpInfo (string vmId, string accessToken, string acceptLanguage = null);
        /// <summary>
        /// Recover task status for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="taskId">Task Id for the underlying recover task (optional)</param>
        /// <param name="taskName">Limits the search to tasks based on task names (optional)</param>
        /// <param name="taskState">State of the task, whether Running, Completed or Exception (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>List&lt;Job&gt;</returns>
        List<Job> OpDpVmTasksGet (string accesstoken,string vmId, string taskId = null, string taskName = null, string taskState = null, string acceptLanguage = null);

        /// <summary>
        /// Recover task status for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="taskId">Task Id for the underlying recover task (optional)</param>
        /// <param name="taskName">Limits the search to tasks based on task names (optional)</param>
        /// <param name="taskState">State of the task, whether Running, Completed or Exception (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Job&gt;</returns>
        ApiResponse<List<Job>> OpDpVmTasksGetWithHttpInfo (string accesstoken, string vmId, string taskId = null, string taskName = null, string taskState = null, string acceptLanguage = null);
        /// <summary>
        /// Test failover for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="failoverVMOptions">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>string</returns>
        string OpDpVmTestFailoverPut (string vmId, string accessToken,RecoverVmOptions failoverVMOptions = null, string acceptLanguage = null);

        /// <summary>
        /// Test failover for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="failoverVMOptions">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> OpDpVmTestFailoverPutWithHttpInfo (string vmId, string accessToken, RecoverVmOptions failoverVMOptions = null, string acceptLanguage = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Failover the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="failoverVMOptions">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> OpDpVmFailoverPutAsync (Guid? vmId, RecoverVmOptions failoverVMOptions = null, string acceptLanguage = null);

        /// <summary>
        /// Failover the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="failoverVMOptions">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> OpDpVmFailoverPutAsyncWithHttpInfo (Guid? vmId, RecoverVmOptions failoverVMOptions = null, string acceptLanguage = null);
        /// <summary>
        /// Prepare failover for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> OpDpVmPrepareFailoverPutAsync (Guid? vmId, string acceptLanguage = null);

        /// <summary>
        /// Prepare failover for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> OpDpVmPrepareFailoverPutAsyncWithHttpInfo (Guid? vmId, string acceptLanguage = null);
        /// <summary>
        /// Prepare reverse protect for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> OpDpVmPrepareReverseProtectPutAsync (Guid? vmId, string acceptLanguage = null);

        /// <summary>
        /// Prepare reverse protect for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> OpDpVmPrepareReverseProtectPutAsyncWithHttpInfo (Guid? vmId, string acceptLanguage = null);
        /// <summary>
        /// Reverse protect for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> OpDpVmReverseProtectPutAsync (Guid? vmId, string acceptLanguage = null);

        /// <summary>
        /// Reverse protect for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> OpDpVmReverseProtectPutAsyncWithHttpInfo (Guid? vmId, string acceptLanguage = null);
        /// <summary>
        /// Recover task status for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="taskId">Task Id for the underlying recover task (optional)</param>
        /// <param name="taskName">Limits the search to tasks based on task names (optional)</param>
        /// <param name="taskState">State of the task, whether Running, Completed or Exception (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of List&lt;Job&gt;</returns>
        System.Threading.Tasks.Task<List<Job>> OpDpVmTasksGetAsync (Guid? vmId, Guid? taskId = null, string taskName = null, string taskState = null, string acceptLanguage = null);

        /// <summary>
        /// Recover task status for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="taskId">Task Id for the underlying recover task (optional)</param>
        /// <param name="taskName">Limits the search to tasks based on task names (optional)</param>
        /// <param name="taskState">State of the task, whether Running, Completed or Exception (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Job&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Job>>> OpDpVmTasksGetAsyncWithHttpInfo (Guid? vmId, Guid? taskId = null, string taskName = null, string taskState = null, string acceptLanguage = null);
        /// <summary>
        /// Test failover for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="failoverVMOptions">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> OpDpVmTestFailoverPutAsync (Guid? vmId, RecoverVmOptions failoverVMOptions = null, string acceptLanguage = null);

        /// <summary>
        /// Test failover for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="failoverVMOptions">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> OpDpVmTestFailoverPutAsyncWithHttpInfo (Guid? vmId, RecoverVmOptions failoverVMOptions = null, string acceptLanguage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecoverApi : IRecoverApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecoverApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecoverApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecoverApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecoverApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Failover the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="failoverVMOptions">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>string</returns>
        public string OpDpVmFailoverPut (string vmId, string accessToken, RecoverVmOptions failoverVMOptions = null, string acceptLanguage = null)
        {
             ApiResponse<string> localVarResponse = OpDpVmFailoverPutWithHttpInfo(vmId, accessToken, failoverVMOptions, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Failover the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="failoverVMOptions">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > OpDpVmFailoverPutWithHttpInfo (string vmId, string accessToken, RecoverVmOptions failoverVMOptions = null, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling RecoverApi->OpDpVmFailoverPut");

            var localVarPath = "/vms/{vmId}/failover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (failoverVMOptions != null && failoverVMOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(failoverVMOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = failoverVMOptions; // byte array
            }

            //change to add the accesstoken
            localVarHeaderParams.Add("Authorization", accessToken);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmFailoverPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Failover the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="failoverVMOptions">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> OpDpVmFailoverPutAsync (Guid? vmId, RecoverVmOptions failoverVMOptions = null, string acceptLanguage = null)
        {
             ApiResponse<string> localVarResponse = await OpDpVmFailoverPutAsyncWithHttpInfo(vmId, failoverVMOptions, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Failover the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="failoverVMOptions">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> OpDpVmFailoverPutAsyncWithHttpInfo (Guid? vmId, RecoverVmOptions failoverVMOptions = null, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling RecoverApi->OpDpVmFailoverPut");

            var localVarPath = "/vms/{vmId}/failover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (failoverVMOptions != null && failoverVMOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(failoverVMOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = failoverVMOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmFailoverPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Prepare failover for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>string</returns>
        public string OpDpVmPrepareFailoverPut (string vmId, string accessToken, string acceptLanguage = null)
        {
             ApiResponse<string> localVarResponse = OpDpVmPrepareFailoverPutWithHttpInfo(vmId,accessToken, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Prepare failover for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > OpDpVmPrepareFailoverPutWithHttpInfo (string vmId, string accessToken, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling RecoverApi->OpDpVmPrepareFailoverPut");

            var localVarPath = "/vms/{vmId}/prepareFailover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            //change to add the accesstoken
            localVarHeaderParams.Add("Authorization", accessToken);
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmPrepareFailoverPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Prepare failover for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> OpDpVmPrepareFailoverPutAsync (Guid? vmId, string acceptLanguage = null)
        {
             ApiResponse<string> localVarResponse = await OpDpVmPrepareFailoverPutAsyncWithHttpInfo(vmId, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Prepare failover for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> OpDpVmPrepareFailoverPutAsyncWithHttpInfo (Guid? vmId, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling RecoverApi->OpDpVmPrepareFailoverPut");

            var localVarPath = "/vms/{vmId}/prepareFailover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmPrepareFailoverPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Prepare reverse protect for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>string</returns>
        public string OpDpVmPrepareReverseProtectPut (string vmId,string accessToken, string acceptLanguage = null)
        {
             ApiResponse<string> localVarResponse = OpDpVmPrepareReverseProtectPutWithHttpInfo(vmId, accessToken, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Prepare reverse protect for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > OpDpVmPrepareReverseProtectPutWithHttpInfo (string vmId,string accessToken, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling RecoverApi->OpDpVmPrepareReverseProtectPut");

            var localVarPath = "/vms/{vmId}/prepareReverseProtect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            //change to add the accesstoken
            localVarHeaderParams.Add("Authorization", accessToken);
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmPrepareReverseProtectPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Prepare reverse protect for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> OpDpVmPrepareReverseProtectPutAsync (Guid? vmId, string acceptLanguage = null)
        {
             ApiResponse<string> localVarResponse = await OpDpVmPrepareReverseProtectPutAsyncWithHttpInfo(vmId, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Prepare reverse protect for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> OpDpVmPrepareReverseProtectPutAsyncWithHttpInfo (Guid? vmId, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling RecoverApi->OpDpVmPrepareReverseProtectPut");

            var localVarPath = "/vms/{vmId}/prepareReverseProtect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmPrepareReverseProtectPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Reverse protect for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>string</returns>
        public string OpDpVmReverseProtectPut (string vmId, string accessToken, string acceptLanguage = null)
        {
             ApiResponse<string> localVarResponse = OpDpVmReverseProtectPutWithHttpInfo(vmId, accessToken, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reverse protect for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > OpDpVmReverseProtectPutWithHttpInfo (string vmId, string accessToken, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling RecoverApi->OpDpVmReverseProtectPut");

            var localVarPath = "/vms/{vmId}/reverseProtect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            //change to add the accesstoken
            localVarHeaderParams.Add("Authorization", accessToken);
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmReverseProtectPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Reverse protect for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> OpDpVmReverseProtectPutAsync (Guid? vmId, string acceptLanguage = null)
        {
             ApiResponse<string> localVarResponse = await OpDpVmReverseProtectPutAsyncWithHttpInfo(vmId, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reverse protect for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> OpDpVmReverseProtectPutAsyncWithHttpInfo (Guid? vmId, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling RecoverApi->OpDpVmReverseProtectPut");

            var localVarPath = "/vms/{vmId}/reverseProtect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmReverseProtectPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Recover task status for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="taskId">Task Id for the underlying recover task (optional)</param>
        /// <param name="taskName">Limits the search to tasks based on task names (optional)</param>
        /// <param name="taskState">State of the task, whether Running, Completed or Exception (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>List&lt;Job&gt;</returns>
        public List<Job> OpDpVmTasksGet (string accessToken,string vmId, string taskId = null, string taskName = null, string taskState = null, string acceptLanguage = null)
        {
             ApiResponse<List<Job>> localVarResponse = OpDpVmTasksGetWithHttpInfo(accessToken, vmId, taskId, taskName, taskState, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recover task status for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="taskId">Task Id for the underlying recover task (optional)</param>
        /// <param name="taskName">Limits the search to tasks based on task names (optional)</param>
        /// <param name="taskState">State of the task, whether Running, Completed or Exception (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>,
        /// <returns>ApiResponse of List&lt;Job&gt;</returns>
        public ApiResponse< List<Job> > OpDpVmTasksGetWithHttpInfo (string accessToken,string vmId, string taskId = null, string taskName = null, string taskState = null, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling RecoverApi->OpDpVmTasksGet");

            var localVarPath = "/vms/{vmId}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (taskId != null) localVarQueryParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // query parameter
            if (taskName != null) localVarQueryParams.Add("taskName", Configuration.ApiClient.ParameterToString(taskName)); // query parameter
            if (taskState != null) localVarQueryParams.Add("taskState", Configuration.ApiClient.ParameterToString(taskState)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter

            //change to add the accesstoken
            localVarHeaderParams.Add("Authorization", accessToken);
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmTasksGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Job>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Job>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Job>)));
        }

        /// <summary>
        /// Recover task status for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="taskId">Task Id for the underlying recover task (optional)</param>
        /// <param name="taskName">Limits the search to tasks based on task names (optional)</param>
        /// <param name="taskState">State of the task, whether Running, Completed or Exception (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of List&lt;Job&gt;</returns>
        public async System.Threading.Tasks.Task<List<Job>> OpDpVmTasksGetAsync (Guid? vmId, Guid? taskId = null, string taskName = null, string taskState = null, string acceptLanguage = null)
        {
             ApiResponse<List<Job>> localVarResponse = await OpDpVmTasksGetAsyncWithHttpInfo(vmId, taskId, taskName, taskState, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recover task status for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="taskId">Task Id for the underlying recover task (optional)</param>
        /// <param name="taskName">Limits the search to tasks based on task names (optional)</param>
        /// <param name="taskState">State of the task, whether Running, Completed or Exception (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Job&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Job>>> OpDpVmTasksGetAsyncWithHttpInfo (Guid? vmId, Guid? taskId = null, string taskName = null, string taskState = null, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling RecoverApi->OpDpVmTasksGet");

            var localVarPath = "/vms/{vmId}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (taskId != null) localVarQueryParams.Add("taskId", Configuration.ApiClient.ParameterToString(taskId)); // query parameter
            if (taskName != null) localVarQueryParams.Add("taskName", Configuration.ApiClient.ParameterToString(taskName)); // query parameter
            if (taskState != null) localVarQueryParams.Add("taskState", Configuration.ApiClient.ParameterToString(taskState)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmTasksGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Job>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Job>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Job>)));
        }

        /// <summary>
        /// Test failover for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="failoverVMOptions">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>string</returns>
        public string OpDpVmTestFailoverPut (string vmId, string accessToken, RecoverVmOptions failoverVMOptions = null, string acceptLanguage = null)
        {
             ApiResponse<string> localVarResponse = OpDpVmTestFailoverPutWithHttpInfo(vmId, accessToken, failoverVMOptions, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Test failover for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="failoverVMOptions">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > OpDpVmTestFailoverPutWithHttpInfo (string vmId, string accessToken, RecoverVmOptions failoverVMOptions = null, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling RecoverApi->OpDpVmTestFailoverPut");

            var localVarPath = "/vms/{vmId}/testFailover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (failoverVMOptions != null && failoverVMOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(failoverVMOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = failoverVMOptions; // byte array
            }
            //change to add the accesstoken
            localVarHeaderParams.Add("Authorization", accessToken);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmTestFailoverPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Test failover for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="failoverVMOptions">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> OpDpVmTestFailoverPutAsync (Guid? vmId, RecoverVmOptions failoverVMOptions = null, string acceptLanguage = null)
        {
             ApiResponse<string> localVarResponse = await OpDpVmTestFailoverPutAsyncWithHttpInfo(vmId, failoverVMOptions, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Test failover for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="failoverVMOptions">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> OpDpVmTestFailoverPutAsyncWithHttpInfo (Guid? vmId, RecoverVmOptions failoverVMOptions = null, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling RecoverApi->OpDpVmTestFailoverPut");

            var localVarPath = "/vms/{vmId}/testFailover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (failoverVMOptions != null && failoverVMOptions.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(failoverVMOptions); // http body (model) parameter
            }
            else
            {
                localVarPostBody = failoverVMOptions; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmTestFailoverPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
