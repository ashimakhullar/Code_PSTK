/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecoveryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Halt replication for the group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns></returns>
        void OpDpGroupHaltPut (string groupId, string acceptLanguage = null);

        /// <summary>
        /// Halt replication for the group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OpDpGroupHaltPutWithHttpInfo (string groupId, string acceptLanguage = null);
        /// <summary>
        /// Halt replication for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns></returns>
        void OpDpVmHaltPut (string vmId, string acceptLanguage = null);

        /// <summary>
        /// Halt replication for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OpDpVmHaltPutWithHttpInfo (string vmId, string acceptLanguage = null);
        /// <summary>
        /// Failover recovery for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="body">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>string</returns>
        string OpDpVmRecoveryFailoverPut (string vmId, RecoverVmOptions body = null, string acceptLanguage = null);

        /// <summary>
        /// Failover recovery for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="body">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> OpDpVmRecoveryFailoverPutWithHttpInfo (string vmId, RecoverVmOptions body = null, string acceptLanguage = null);
        /// <summary>
        /// Recover job status for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>List&lt;Job&gt;</returns>
        List<Job> OpDpVmRecoveryJobsGet (string acceptLanguage = null);

        /// <summary>
        /// Recover job status for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Job&gt;</returns>
        ApiResponse<List<Job>> OpDpVmRecoveryJobsGetWithHttpInfo (string acceptLanguage = null);
        /// <summary>
        /// Recover job status for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>List&lt;Job&gt;</returns>
        List<Job> OpDpVmRecoveryJobsJobIdGet (string jobId, string acceptLanguage = null);

        /// <summary>
        /// Recover job status for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Job&gt;</returns>
        ApiResponse<List<Job>> OpDpVmRecoveryJobsJobIdGetWithHttpInfo (string jobId, string acceptLanguage = null);
        /// <summary>
        /// Test recovery for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="body">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>string</returns>
        string OpDpVmRecoveryTestPut (string vmId, RecoverVmOptions body = null, string acceptLanguage = null);

        /// <summary>
        /// Test recovery for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="body">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> OpDpVmRecoveryTestPutWithHttpInfo (string vmId, RecoverVmOptions body = null, string acceptLanguage = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Halt replication for the group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OpDpGroupHaltPutAsync (string groupId, string acceptLanguage = null);

        /// <summary>
        /// Halt replication for the group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OpDpGroupHaltPutAsyncWithHttpInfo (string groupId, string acceptLanguage = null);
        /// <summary>
        /// Halt replication for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OpDpVmHaltPutAsync (string vmId, string acceptLanguage = null);

        /// <summary>
        /// Halt replication for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OpDpVmHaltPutAsyncWithHttpInfo (string vmId, string acceptLanguage = null);
        /// <summary>
        /// Failover recovery for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="body">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> OpDpVmRecoveryFailoverPutAsync (string vmId, RecoverVmOptions body = null, string acceptLanguage = null);

        /// <summary>
        /// Failover recovery for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="body">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> OpDpVmRecoveryFailoverPutAsyncWithHttpInfo (string vmId, RecoverVmOptions body = null, string acceptLanguage = null);
        /// <summary>
        /// Recover job status for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of List&lt;Job&gt;</returns>
        System.Threading.Tasks.Task<List<Job>> OpDpVmRecoveryJobsGetAsync (string acceptLanguage = null);

        /// <summary>
        /// Recover job status for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Job&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Job>>> OpDpVmRecoveryJobsGetAsyncWithHttpInfo (string acceptLanguage = null);
        /// <summary>
        /// Recover job status for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of List&lt;Job&gt;</returns>
        System.Threading.Tasks.Task<List<Job>> OpDpVmRecoveryJobsJobIdGetAsync (string jobId, string acceptLanguage = null);

        /// <summary>
        /// Recover job status for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Job&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Job>>> OpDpVmRecoveryJobsJobIdGetAsyncWithHttpInfo (string jobId, string acceptLanguage = null);
        /// <summary>
        /// Test recovery for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="body">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> OpDpVmRecoveryTestPutAsync (string vmId, RecoverVmOptions body = null, string acceptLanguage = null);

        /// <summary>
        /// Test recovery for the given VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="body">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> OpDpVmRecoveryTestPutAsyncWithHttpInfo (string vmId, RecoverVmOptions body = null, string acceptLanguage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecoveryApi : IRecoveryApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecoveryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecoveryApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecoveryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecoveryApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Halt replication for the group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns></returns>
        public void OpDpGroupHaltPut (string groupId, string acceptLanguage = null)
        {
             OpDpGroupHaltPutWithHttpInfo(groupId, acceptLanguage);
        }

        /// <summary>
        /// Halt replication for the group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OpDpGroupHaltPutWithHttpInfo (string groupId, string acceptLanguage = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling RecoveryApi->OpDpGroupHaltPut");

            var localVarPath = "/groups/{groupId}/halt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpGroupHaltPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Halt replication for the group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OpDpGroupHaltPutAsync (string groupId, string acceptLanguage = null)
        {
             await OpDpGroupHaltPutAsyncWithHttpInfo(groupId, acceptLanguage);

        }

        /// <summary>
        /// Halt replication for the group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OpDpGroupHaltPutAsyncWithHttpInfo (string groupId, string acceptLanguage = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling RecoveryApi->OpDpGroupHaltPut");

            var localVarPath = "/groups/{groupId}/halt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpGroupHaltPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Halt replication for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns></returns>
        public void OpDpVmHaltPut (string vmId, string acceptLanguage = null)
        {
             OpDpVmHaltPutWithHttpInfo(vmId, acceptLanguage);
        }

        /// <summary>
        /// Halt replication for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OpDpVmHaltPutWithHttpInfo (string vmId, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling RecoveryApi->OpDpVmHaltPut");

            var localVarPath = "/vms/{vmId}/halt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmHaltPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Halt replication for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OpDpVmHaltPutAsync (string vmId, string acceptLanguage = null)
        {
             await OpDpVmHaltPutAsyncWithHttpInfo(vmId, acceptLanguage);

        }

        /// <summary>
        /// Halt replication for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OpDpVmHaltPutAsyncWithHttpInfo (string vmId, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling RecoveryApi->OpDpVmHaltPut");

            var localVarPath = "/vms/{vmId}/halt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmHaltPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Failover recovery for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="body">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>string</returns>
        public string OpDpVmRecoveryFailoverPut (string vmId, RecoverVmOptions body = null, string acceptLanguage = null)
        {
             ApiResponse<string> localVarResponse = OpDpVmRecoveryFailoverPutWithHttpInfo(vmId, body, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Failover recovery for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="body">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > OpDpVmRecoveryFailoverPutWithHttpInfo (string vmId, RecoverVmOptions body = null, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling RecoveryApi->OpDpVmRecoveryFailoverPut");

            var localVarPath = "/vms/{vmId}/recovery/failover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmRecoveryFailoverPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Failover recovery for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="body">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> OpDpVmRecoveryFailoverPutAsync (string vmId, RecoverVmOptions body = null, string acceptLanguage = null)
        {
             ApiResponse<string> localVarResponse = await OpDpVmRecoveryFailoverPutAsyncWithHttpInfo(vmId, body, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Failover recovery for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="body">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> OpDpVmRecoveryFailoverPutAsyncWithHttpInfo (string vmId, RecoverVmOptions body = null, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling RecoveryApi->OpDpVmRecoveryFailoverPut");

            var localVarPath = "/vms/{vmId}/recovery/failover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmRecoveryFailoverPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Recover job status for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>List&lt;Job&gt;</returns>
        public List<Job> OpDpVmRecoveryJobsGet (string acceptLanguage = null)
        {
             ApiResponse<List<Job>> localVarResponse = OpDpVmRecoveryJobsGetWithHttpInfo(acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recover job status for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Job&gt;</returns>
        public ApiResponse< List<Job> > OpDpVmRecoveryJobsGetWithHttpInfo (string acceptLanguage = null)
        {

            var localVarPath = "/recovery/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmRecoveryJobsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Job>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Job>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Job>)));
        }

        /// <summary>
        /// Recover job status for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of List&lt;Job&gt;</returns>
        public async System.Threading.Tasks.Task<List<Job>> OpDpVmRecoveryJobsGetAsync (string acceptLanguage = null)
        {
             ApiResponse<List<Job>> localVarResponse = await OpDpVmRecoveryJobsGetAsyncWithHttpInfo(acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recover job status for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Job&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Job>>> OpDpVmRecoveryJobsGetAsyncWithHttpInfo (string acceptLanguage = null)
        {

            var localVarPath = "/recovery/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmRecoveryJobsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Job>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Job>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Job>)));
        }

        /// <summary>
        /// Recover job status for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>List&lt;Job&gt;</returns>
        public List<Job> OpDpVmRecoveryJobsJobIdGet (string jobId, string acceptLanguage = null)
        {
             ApiResponse<List<Job>> localVarResponse = OpDpVmRecoveryJobsJobIdGetWithHttpInfo(jobId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recover job status for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Job&gt;</returns>
        public ApiResponse< List<Job> > OpDpVmRecoveryJobsJobIdGetWithHttpInfo (string jobId, string acceptLanguage = null)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling RecoveryApi->OpDpVmRecoveryJobsJobIdGet");

            var localVarPath = "/recovery/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmRecoveryJobsJobIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Job>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Job>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Job>)));
        }

        /// <summary>
        /// Recover job status for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of List&lt;Job&gt;</returns>
        public async System.Threading.Tasks.Task<List<Job>> OpDpVmRecoveryJobsJobIdGetAsync (string jobId, string acceptLanguage = null)
        {
             ApiResponse<List<Job>> localVarResponse = await OpDpVmRecoveryJobsJobIdGetAsyncWithHttpInfo(jobId, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recover job status for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Job&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Job>>> OpDpVmRecoveryJobsJobIdGetAsyncWithHttpInfo (string jobId, string acceptLanguage = null)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling RecoveryApi->OpDpVmRecoveryJobsJobIdGet");

            var localVarPath = "/recovery/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmRecoveryJobsJobIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Job>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Job>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Job>)));
        }

        /// <summary>
        /// Test recovery for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="body">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>string</returns>
        public string OpDpVmRecoveryTestPut (string vmId, RecoverVmOptions body = null, string acceptLanguage = null)
        {
             ApiResponse<string> localVarResponse = OpDpVmRecoveryTestPutWithHttpInfo(vmId, body, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Test recovery for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="body">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > OpDpVmRecoveryTestPutWithHttpInfo (string vmId, RecoverVmOptions body = null, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling RecoveryApi->OpDpVmRecoveryTestPut");

            var localVarPath = "/vms/{vmId}/recovery/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmRecoveryTestPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Test recovery for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="body">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> OpDpVmRecoveryTestPutAsync (string vmId, RecoverVmOptions body = null, string acceptLanguage = null)
        {
             ApiResponse<string> localVarResponse = await OpDpVmRecoveryTestPutAsyncWithHttpInfo(vmId, body, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Test recovery for the given VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="body">Folder, Resource and Network options for recovery (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> OpDpVmRecoveryTestPutAsyncWithHttpInfo (string vmId, RecoverVmOptions body = null, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling RecoveryApi->OpDpVmRecoveryTestPut");

            var localVarPath = "/vms/{vmId}/recovery/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmRecoveryTestPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        public void DeletePet(int petId, object apiKey)
        {
            throw new NotImplementedException();
        }
    }
}
