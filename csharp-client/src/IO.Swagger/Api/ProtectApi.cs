/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;
using System.Diagnostics;
using Newtonsoft.Json;


namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProtectApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets list of protection groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Group to look for, perhaps we can support wild card here (optional)</param>
        /// <param name="accessToken"></param>
        /// <param name="type">Limits the search to incoming or outgoing groups (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>List&lt;ProtectionGroupInfo&gt;</returns>
        List<ProtectionGroupInfo> OpDpGroupGet(string accessToken, string name = null, string type = null, string acceptLanguage = null);

        /// <summary>
        /// Gets list of protection groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Group to look for, perhaps we can support wild card here (optional)</param>
        /// <param name="accessToken"></param>
        /// <param name="type">Limits the search to incoming or outgoing groups (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProtectionGroupInfo&gt;</returns>
        ApiResponse<List<ProtectionGroupInfo>> OpDpGroupGetWithHttpInfo(string accessToken, string name = null, string type = null, string acceptLanguage = null);
        /// <summary>
        /// Deletes the protection group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns></returns>
        void OpDpGroupGroupidDelete(string groupId, string acceptLanguage = null);

        /// <summary>
        /// Deletes the protection group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OpDpGroupGroupidDeleteWithHttpInfo(string groupId, string acceptLanguage = null);
        /// <summary>
        /// Gets the protection group detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="fields">List of fields to return - currently all will be returned (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ProtectionGroupInfo</returns>
        ProtectionGroupInfo OpDpGroupGroupidGet(string groupId, string fields = null, string acceptLanguage = null);

        /// <summary>
        /// Gets the protection group detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="fields">List of fields to return - currently all will be returned (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ProtectionGroupInfo</returns>
        ApiResponse<ProtectionGroupInfo> OpDpGroupGroupidGetWithHttpInfo(string groupId, string fields = null, string acceptLanguage = null);
        /// <summary>
        /// Modifies the protection group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="body">VMs to add / remove or the new name (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ProtectionGroupInfo</returns>
        ProtectionGroupInfo OpDpGroupGroupidPut(string groupId, GroupEditParams body = null, string acceptLanguage = null);

        /// <summary>
        /// Modifies the protection group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="body">VMs to add / remove or the new name (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ProtectionGroupInfo</returns>
        ApiResponse<ProtectionGroupInfo> OpDpGroupGroupidPutWithHttpInfo(string groupId, GroupEditParams body = null, string acceptLanguage = null);
        /// <summary>
        /// Add a new protection group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create group spec</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ProtectionGroupInfo</returns>
        ProtectionGroupInfo OpDpGroupPost(ProtectionGroupSpec body, string acceptLanguage = null);

        /// <summary>
        /// Add a new protection group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create group spec</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ProtectionGroupInfo</returns>
        ApiResponse<ProtectionGroupInfo> OpDpGroupPostWithHttpInfo(ProtectionGroupSpec body, string acceptLanguage = null);
        /// <summary>
        /// Modifies replication schedule for a group
        /// </summary>
        /// <remarks>
        /// Since the group owner is unique, no confusion about which side this can be done
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="body">Does this work? Else define a new struct (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ReplicationSchedule</returns>
        ReplicationSchedule OpDpGroupScheduleReplicationPutTargetClusterId(string groupId, string targetClusterId, ReplicationSchedule body = null, string acceptLanguage = null);

        /// <summary>
        /// Modifies replication schedule for a group
        /// </summary>
        /// <remarks>
        /// Since the group owner is unique, no confusion about which side this can be done
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="body">Does this work? Else define a new struct (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ReplicationSchedule</returns>
        ApiResponse<ReplicationSchedule> OpDpGroupScheduleReplicationPutTargetClusterIdWithHttpInfo(string groupId, string targetClusterId, ReplicationSchedule body = null, string acceptLanguage = null);
        /// <summary>
        /// Removes replication schedules for the group for the cluster id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ReplicationSchedule</returns>
        ReplicationSchedule OpDpGroupScheduleReplicationTargetClusterIdDelete(string groupId, string targetClusterId, string acceptLanguage = null);

        /// <summary>
        /// Removes replication schedules for the group for the cluster id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ReplicationSchedule</returns>
        ApiResponse<ReplicationSchedule> OpDpGroupScheduleReplicationTargetClusterIdDeleteWithHttpInfo(string groupId, string targetClusterId, string acceptLanguage = null);
        /// <summary>
        /// Gets list of protected VMs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the VM to look for, perhaps we can support wild card here (optional)</param>
        /// <param name="type">Limits the search to incoming or outgoing virtual machines (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>List&lt;ProtectedVMInfo&gt;</returns>
        List<ProtectedVMInfo> OpDpVmGet(string name = null, string type = null, string acceptLanguage = null);

        /// <summary>
        /// Gets list of protected VMs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the VM to look for, perhaps we can support wild card here (optional)</param>
        /// <param name="type">Limits the search to incoming or outgoing virtual machines (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProtectedVMInfo&gt;</returns>
        ApiResponse<List<ProtectedVMInfo>> OpDpVmGetWithHttpInfo(string name = null, string type = null, string acceptLanguage = null);
        /// <summary>
        /// Protect a VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Protect VM Spec</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ProtectedVMInfo</returns>
        ProtectedVMInfo OpDpVmPost(ProtectedVMSpec body, string acceptLanguage = null);

        /// <summary>
        /// Protect a VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Protect VM Spec</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ProtectedVMInfo</returns>
        ApiResponse<ProtectedVMInfo> OpDpVmPostWithHttpInfo(ProtectedVMSpec body, string acceptLanguage = null);
        /// <summary>
        /// Modifies replication schedule for a vm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="body">Does this work? Else define a new struct</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ReplicationSchedule</returns>
        ReplicationSchedule OpDpVmScheduleReplicationPutTargetClusterId(string vmId, string targetClusterId, ReplicationSchedule body, string acceptLanguage = null);

        /// <summary>
        /// Modifies replication schedule for a vm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="body">Does this work? Else define a new struct</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ReplicationSchedule</returns>
        ApiResponse<ReplicationSchedule> OpDpVmScheduleReplicationPutTargetClusterIdWithHttpInfo(string vmId, string targetClusterId, ReplicationSchedule body, string acceptLanguage = null);
        /// <summary>
        /// Removes replication schedules for the vm for the cluster id
        /// </summary>
        /// <remarks>
        /// Unprotects a VM
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ReplicationSchedule</returns>
        ReplicationSchedule OpDpVmScheduleReplicationTargetClusterIdDelete(string vmId, string targetClusterId, string acceptLanguage = null);

        /// <summary>
        /// Removes replication schedules for the vm for the cluster id
        /// </summary>
        /// <remarks>
        /// Unprotects a VM
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ReplicationSchedule</returns>
        ApiResponse<ReplicationSchedule> OpDpVmScheduleReplicationTargetClusterIdDeleteWithHttpInfo(string vmId, string targetClusterId, string acceptLanguage = null);
        /// <summary>
        /// Gets the details of a protected VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ProtectedVMInfo</returns>
        ProtectedVMInfo OpDpVmVmidGet(string vmId, string acceptLanguage = null);

        /// <summary>
        /// Gets the details of a protected VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ProtectedVMInfo</returns>
        ApiResponse<ProtectedVMInfo> OpDpVmVmidGetWithHttpInfo(string vmId, string acceptLanguage = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets list of protection groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Group to look for, perhaps we can support wild card here (optional)</param>
        /// <param name="type">Limits the search to incoming or outgoing groups (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of List&lt;ProtectionGroupInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ProtectionGroupInfo>> OpDpGroupGetAsync(string name = null, string type = null, string acceptLanguage = null);

        /// <summary>
        /// Gets list of protection groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Group to look for, perhaps we can support wild card here (optional)</param>
        /// <param name="type">Limits the search to incoming or outgoing groups (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectionGroupInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProtectionGroupInfo>>> OpDpGroupGetAsyncWithHttpInfo(string name = null, string type = null, string acceptLanguage = null);
        /// <summary>
        /// Deletes the protection group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OpDpGroupGroupidDeleteAsync(string groupId, string acceptLanguage = null);

        /// <summary>
        /// Deletes the protection group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OpDpGroupGroupidDeleteAsyncWithHttpInfo(string groupId, string acceptLanguage = null);
        /// <summary>
        /// Gets the protection group detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="fields">List of fields to return - currently all will be returned (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ProtectionGroupInfo</returns>
        System.Threading.Tasks.Task<ProtectionGroupInfo> OpDpGroupGroupidGetAsync(string groupId, string fields = null, string acceptLanguage = null);

        /// <summary>
        /// Gets the protection group detail
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="fields">List of fields to return - currently all will be returned (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ProtectionGroupInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProtectionGroupInfo>> OpDpGroupGroupidGetAsyncWithHttpInfo(string groupId, string fields = null, string acceptLanguage = null);
        /// <summary>
        /// Modifies the protection group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="body">VMs to add / remove or the new name (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ProtectionGroupInfo</returns>
        System.Threading.Tasks.Task<ProtectionGroupInfo> OpDpGroupGroupidPutAsync(string groupId, GroupEditParams body = null, string acceptLanguage = null);

        /// <summary>
        /// Modifies the protection group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="body">VMs to add / remove or the new name (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ProtectionGroupInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProtectionGroupInfo>> OpDpGroupGroupidPutAsyncWithHttpInfo(string groupId, GroupEditParams body = null, string acceptLanguage = null);
        /// <summary>
        /// Add a new protection group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create group spec</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ProtectionGroupInfo</returns>
        System.Threading.Tasks.Task<ProtectionGroupInfo> OpDpGroupPostAsync(ProtectionGroupSpec body, string acceptLanguage = null);

        /// <summary>
        /// Add a new protection group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create group spec</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ProtectionGroupInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProtectionGroupInfo>> OpDpGroupPostAsyncWithHttpInfo(ProtectionGroupSpec body, string acceptLanguage = null);
        /// <summary>
        /// Modifies replication schedule for a group
        /// </summary>
        /// <remarks>
        /// Since the group owner is unique, no confusion about which side this can be done
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="body">Does this work? Else define a new struct (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ReplicationSchedule</returns>
        System.Threading.Tasks.Task<ReplicationSchedule> OpDpGroupScheduleReplicationPutTargetClusterIdAsync(string groupId, string targetClusterId, ReplicationSchedule body = null, string acceptLanguage = null);

        /// <summary>
        /// Modifies replication schedule for a group
        /// </summary>
        /// <remarks>
        /// Since the group owner is unique, no confusion about which side this can be done
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="body">Does this work? Else define a new struct (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ReplicationSchedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplicationSchedule>> OpDpGroupScheduleReplicationPutTargetClusterIdAsyncWithHttpInfo(string groupId, string targetClusterId, ReplicationSchedule body = null, string acceptLanguage = null);
        /// <summary>
        /// Removes replication schedules for the group for the cluster id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ReplicationSchedule</returns>
        System.Threading.Tasks.Task<ReplicationSchedule> OpDpGroupScheduleReplicationTargetClusterIdDeleteAsync(string groupId, string targetClusterId, string acceptLanguage = null);

        /// <summary>
        /// Removes replication schedules for the group for the cluster id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ReplicationSchedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplicationSchedule>> OpDpGroupScheduleReplicationTargetClusterIdDeleteAsyncWithHttpInfo(string groupId, string targetClusterId, string acceptLanguage = null);
        /// <summary>
        /// Gets list of protected VMs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the VM to look for, perhaps we can support wild card here (optional)</param>
        /// <param name="type">Limits the search to incoming or outgoing virtual machines (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of List&lt;ProtectedVMInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ProtectedVMInfo>> OpDpVmGetAsync(string name = null, string type = null, string acceptLanguage = null);

        /// <summary>
        /// Gets list of protected VMs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the VM to look for, perhaps we can support wild card here (optional)</param>
        /// <param name="type">Limits the search to incoming or outgoing virtual machines (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectedVMInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProtectedVMInfo>>> OpDpVmGetAsyncWithHttpInfo(string name = null, string type = null, string acceptLanguage = null);
        /// <summary>
        /// Protect a VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Protect VM Spec</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ProtectedVMInfo</returns>
        System.Threading.Tasks.Task<ProtectedVMInfo> OpDpVmPostAsync(ProtectedVMSpec body, string acceptLanguage = null);

        /// <summary>
        /// Protect a VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Protect VM Spec</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ProtectedVMInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProtectedVMInfo>> OpDpVmPostAsyncWithHttpInfo(ProtectedVMSpec body, string acceptLanguage = null);
        /// <summary>
        /// Modifies replication schedule for a vm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="body">Does this work? Else define a new struct</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ReplicationSchedule</returns>
        System.Threading.Tasks.Task<ReplicationSchedule> OpDpVmScheduleReplicationPutTargetClusterIdAsync(string vmId, string targetClusterId, ReplicationSchedule body, string acceptLanguage = null);

        /// <summary>
        /// Modifies replication schedule for a vm
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="body">Does this work? Else define a new struct</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ReplicationSchedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplicationSchedule>> OpDpVmScheduleReplicationPutTargetClusterIdAsyncWithHttpInfo(string vmId, string targetClusterId, ReplicationSchedule body, string acceptLanguage = null);
        /// <summary>
        /// Removes replication schedules for the vm for the cluster id
        /// </summary>
        /// <remarks>
        /// Unprotects a VM
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ReplicationSchedule</returns>
        System.Threading.Tasks.Task<ReplicationSchedule> OpDpVmScheduleReplicationTargetClusterIdDeleteAsync(string vmId, string targetClusterId, string acceptLanguage = null);

        /// <summary>
        /// Removes replication schedules for the vm for the cluster id
        /// </summary>
        /// <remarks>
        /// Unprotects a VM
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ReplicationSchedule)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplicationSchedule>> OpDpVmScheduleReplicationTargetClusterIdDeleteAsyncWithHttpInfo(string vmId, string targetClusterId, string acceptLanguage = null);
        /// <summary>
        /// Gets the details of a protected VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ProtectedVMInfo</returns>
        System.Threading.Tasks.Task<ProtectedVMInfo> OpDpVmVmidGetAsync(string vmId, string acceptLanguage = null);

        /// <summary>
        /// Gets the details of a protected VM
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ProtectedVMInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProtectedVMInfo>> OpDpVmVmidGetAsyncWithHttpInfo(string vmId, string acceptLanguage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProtectApi : IProtectApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProtectApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProtectApi(String basePath)
        {
            ApiClient client = new ApiClient(basePath);
            this.Configuration = new Configuration(client);

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProtectApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProtectApi(Configuration configuration = null)
        {

            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets list of protection groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Group to look for, perhaps we can support wild card here (optional)</param>
        /// <param name="accessToken">Limits the search to incoming or outgoing groups (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>List&lt;ProtectionGroupInfo&gt;</returns>
        public List<ProtectionGroupInfo> OpDpGroupGet(string accessToken, string name = null, string type = null, string acceptLanguage = null)
        {
            ApiResponse<List<ProtectionGroupInfo>> localVarResponse = OpDpGroupGetWithHttpInfo(name, accessToken,type, acceptLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets list of protection groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Group to look for, perhaps we can support wild card here (optional)</param>
        /// <param name="accessToken">Limits the search to incoming or outgoing groups (optional)</param>
        /// <param name="type">Limits the search to incoming or outgoing groups (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProtectionGroupInfo&gt;</returns>
        public ApiResponse<List<ProtectionGroupInfo>> OpDpGroupGetWithHttpInfo(string accessToken, string name = null, string type = null, string acceptLanguage = null)
        {

            var localVarPath = "/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            //set the configuration to default
            Configuration = Configuration.Default;
            //encoding the username and password 
            string base64Encoded = GetBase64Encoded(Configuration);
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            //adding the Authorization to the Header Parameter

             localVarHeaderParams.Add("Authorization", accessToken);
            
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpGroupGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectionGroupInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectionGroupInfo>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectionGroupInfo>)));
        }

        /// <summary>
        /// Gets list of protection groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Group to look for, perhaps we can support wild card here (optional)</param>
        /// <param name="type">Limits the search to incoming or outgoing groups (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of List&lt;ProtectionGroupInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProtectionGroupInfo>> OpDpGroupGetAsync(string name = null, string type = null, string acceptLanguage = null)
        {
            ApiResponse<List<ProtectionGroupInfo>> localVarResponse = await OpDpGroupGetAsyncWithHttpInfo(name, type, acceptLanguage);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets list of protection groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Group to look for, perhaps we can support wild card here (optional)</param>
        /// <param name="type">Limits the search to incoming or outgoing groups (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectionGroupInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProtectionGroupInfo>>> OpDpGroupGetAsyncWithHttpInfo(string name = null, string type = null, string acceptLanguage = null)
        {

            var localVarPath = "/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            localVarHeaderParams.Add("Authorization", "Basic cm9vdDpDaXNjbzEyMw==");

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpGroupGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectionGroupInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectionGroupInfo>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectionGroupInfo>)));
        }

        /// <summary>
        /// Deletes the protection group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns></returns>
        public void OpDpGroupGroupidDelete(string groupId, string acceptLanguage = null)
        {
            OpDpGroupGroupidDeleteWithHttpInfo(groupId, acceptLanguage);
        }

        /// <summary>
        /// Deletes the protection group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OpDpGroupGroupidDeleteWithHttpInfo(string groupId, string acceptLanguage = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ProtectApi->OpDpGroupGroupidDelete");

            var localVarPath = "/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpGroupGroupidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the protection group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OpDpGroupGroupidDeleteAsync(string groupId, string acceptLanguage = null)
        {
            await OpDpGroupGroupidDeleteAsyncWithHttpInfo(groupId, acceptLanguage);

        }

        /// <summary>
        /// Deletes the protection group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OpDpGroupGroupidDeleteAsyncWithHttpInfo(string groupId, string acceptLanguage = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ProtectApi->OpDpGroupGroupidDelete");

            var localVarPath = "/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpGroupGroupidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the protection group detail 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="fields">List of fields to return - currently all will be returned (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ProtectionGroupInfo</returns>
        public ProtectionGroupInfo OpDpGroupGroupidGet(string groupId, string fields = null, string acceptLanguage = null)
        {
            ApiResponse<ProtectionGroupInfo> localVarResponse = OpDpGroupGroupidGetWithHttpInfo(groupId, fields, acceptLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the protection group detail 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="fields">List of fields to return - currently all will be returned (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ProtectionGroupInfo</returns>
        public ApiResponse<ProtectionGroupInfo> OpDpGroupGroupidGetWithHttpInfo(string groupId, string fields = null, string acceptLanguage = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ProtectApi->OpDpGroupGroupidGet");

            var localVarPath = "/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            //set the configuration to default
            Configuration = Configuration.Default;
            //encoding the username and password 
            string base64Encoded = GetBase64Encoded(Configuration);
            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            //adding the Authorization to the Header Parameter
            //localVarHeaderParams.Add("Authorization", "Basic " + base64Encoded);
            localVarHeaderParams.Add("Authorization", fields);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpGroupGroupidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionGroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionGroupInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionGroupInfo)));
        }

        /// <summary>
        /// Gets the protection group detail 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="fields">List of fields to return - currently all will be returned (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ProtectionGroupInfo</returns>
        public async System.Threading.Tasks.Task<ProtectionGroupInfo> OpDpGroupGroupidGetAsync(string groupId, string fields = null, string acceptLanguage = null)
        {
            ApiResponse<ProtectionGroupInfo> localVarResponse = await OpDpGroupGroupidGetAsyncWithHttpInfo(groupId, fields, acceptLanguage);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the protection group detail 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="fields">List of fields to return - currently all will be returned (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ProtectionGroupInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProtectionGroupInfo>> OpDpGroupGroupidGetAsyncWithHttpInfo(string groupId, string fields = null, string acceptLanguage = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ProtectApi->OpDpGroupGroupidGet");

            var localVarPath = "/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpGroupGroupidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionGroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionGroupInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionGroupInfo)));
        }

        /// <summary>
        /// Modifies the protection group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="body">VMs to add / remove or the new name (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ProtectionGroupInfo</returns>
        public ProtectionGroupInfo OpDpGroupGroupidPut(string groupId, GroupEditParams body = null, string acceptLanguage = null)
        {
            ApiResponse<ProtectionGroupInfo> localVarResponse = OpDpGroupGroupidPutWithHttpInfo(groupId, body, acceptLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies the protection group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="body">VMs to add / remove or the new name (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ProtectionGroupInfo</returns>
        public ApiResponse<ProtectionGroupInfo> OpDpGroupGroupidPutWithHttpInfo(string groupId, GroupEditParams body = null, string acceptLanguage = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ProtectApi->OpDpGroupGroupidPut");

            var localVarPath = "/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpGroupGroupidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionGroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionGroupInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionGroupInfo)));
        }

        /// <summary>
        /// Modifies the protection group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="body">VMs to add / remove or the new name (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ProtectionGroupInfo</returns>
        public async System.Threading.Tasks.Task<ProtectionGroupInfo> OpDpGroupGroupidPutAsync(string groupId, GroupEditParams body = null, string acceptLanguage = null)
        {
            ApiResponse<ProtectionGroupInfo> localVarResponse = await OpDpGroupGroupidPutAsyncWithHttpInfo(groupId, body, acceptLanguage);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Modifies the protection group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group</param>
        /// <param name="body">VMs to add / remove or the new name (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ProtectionGroupInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProtectionGroupInfo>> OpDpGroupGroupidPutAsyncWithHttpInfo(string groupId, GroupEditParams body = null, string acceptLanguage = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ProtectApi->OpDpGroupGroupidPut");

            var localVarPath = "/groups/{groupId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpGroupGroupidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionGroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionGroupInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionGroupInfo)));
        }

        /// <summary>
        /// Add a new protection group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create group spec</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ProtectionGroupInfo</returns>
        public ProtectionGroupInfo OpDpGroupPost(ProtectionGroupSpec body, string acceptLanguage = null)
        {
            ApiResponse<ProtectionGroupInfo> localVarResponse = OpDpGroupPostWithHttpInfo(body, acceptLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new protection group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create group spec</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ProtectionGroupInfo</returns>
        public ApiResponse<ProtectionGroupInfo> OpDpGroupPostWithHttpInfo(ProtectionGroupSpec body, string acceptLanguage = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectApi->OpDpGroupPost");

            var localVarPath = "/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpGroupPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionGroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionGroupInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionGroupInfo)));
        }

        /// <summary>
        /// Add a new protection group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create group spec</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ProtectionGroupInfo</returns>
        public async System.Threading.Tasks.Task<ProtectionGroupInfo> OpDpGroupPostAsync(ProtectionGroupSpec body, string acceptLanguage = null)
        {
            ApiResponse<ProtectionGroupInfo> localVarResponse = await OpDpGroupPostAsyncWithHttpInfo(body, acceptLanguage);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Add a new protection group 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create group spec</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ProtectionGroupInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProtectionGroupInfo>> OpDpGroupPostAsyncWithHttpInfo(ProtectionGroupSpec body, string acceptLanguage = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectApi->OpDpGroupPost");

            var localVarPath = "/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpGroupPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionGroupInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionGroupInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionGroupInfo)));
        }

        /// <summary>
        /// Modifies replication schedule for a group Since the group owner is unique, no confusion about which side this can be done
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="body">Does this work? Else define a new struct (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ReplicationSchedule</returns>
        public ReplicationSchedule OpDpGroupScheduleReplicationPutTargetClusterId(string groupId, string targetClusterId, ReplicationSchedule body = null, string acceptLanguage = null)
        {
            ApiResponse<ReplicationSchedule> localVarResponse = OpDpGroupScheduleReplicationPutTargetClusterIdWithHttpInfo(groupId, targetClusterId, body, acceptLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies replication schedule for a group Since the group owner is unique, no confusion about which side this can be done
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="body">Does this work? Else define a new struct (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ReplicationSchedule</returns>
        public ApiResponse<ReplicationSchedule> OpDpGroupScheduleReplicationPutTargetClusterIdWithHttpInfo(string groupId, string targetClusterId, ReplicationSchedule body = null, string acceptLanguage = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ProtectApi->OpDpGroupScheduleReplicationPutTargetClusterId");
            // verify the required parameter 'targetClusterId' is set
            if (targetClusterId == null)
                throw new ApiException(400, "Missing required parameter 'targetClusterId' when calling ProtectApi->OpDpGroupScheduleReplicationPutTargetClusterId");

            var localVarPath = "/groups/{groupId}/schedule/replication/{targetClusterId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (targetClusterId != null) localVarPathParams.Add("targetClusterId", Configuration.ApiClient.ParameterToString(targetClusterId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpGroupScheduleReplicationPutTargetClusterId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplicationSchedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplicationSchedule)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplicationSchedule)));
        }

        /// <summary>
        /// Modifies replication schedule for a group Since the group owner is unique, no confusion about which side this can be done
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="body">Does this work? Else define a new struct (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ReplicationSchedule</returns>
        public async System.Threading.Tasks.Task<ReplicationSchedule> OpDpGroupScheduleReplicationPutTargetClusterIdAsync(string groupId, string targetClusterId, ReplicationSchedule body = null, string acceptLanguage = null)
        {
            ApiResponse<ReplicationSchedule> localVarResponse = await OpDpGroupScheduleReplicationPutTargetClusterIdAsyncWithHttpInfo(groupId, targetClusterId, body, acceptLanguage);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Modifies replication schedule for a group Since the group owner is unique, no confusion about which side this can be done
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="body">Does this work? Else define a new struct (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ReplicationSchedule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplicationSchedule>> OpDpGroupScheduleReplicationPutTargetClusterIdAsyncWithHttpInfo(string groupId, string targetClusterId, ReplicationSchedule body = null, string acceptLanguage = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ProtectApi->OpDpGroupScheduleReplicationPutTargetClusterId");
            // verify the required parameter 'targetClusterId' is set
            if (targetClusterId == null)
                throw new ApiException(400, "Missing required parameter 'targetClusterId' when calling ProtectApi->OpDpGroupScheduleReplicationPutTargetClusterId");

            var localVarPath = "/groups/{groupId}/schedule/replication/{targetClusterId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (targetClusterId != null) localVarPathParams.Add("targetClusterId", Configuration.ApiClient.ParameterToString(targetClusterId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpGroupScheduleReplicationPutTargetClusterId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplicationSchedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplicationSchedule)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplicationSchedule)));
        }

        /// <summary>
        /// Removes replication schedules for the group for the cluster id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ReplicationSchedule</returns>
        public ReplicationSchedule OpDpGroupScheduleReplicationTargetClusterIdDelete(string groupId, string targetClusterId, string acceptLanguage = null)
        {
            ApiResponse<ReplicationSchedule> localVarResponse = OpDpGroupScheduleReplicationTargetClusterIdDeleteWithHttpInfo(groupId, targetClusterId, acceptLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes replication schedules for the group for the cluster id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ReplicationSchedule</returns>
        public ApiResponse<ReplicationSchedule> OpDpGroupScheduleReplicationTargetClusterIdDeleteWithHttpInfo(string groupId, string targetClusterId, string acceptLanguage = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ProtectApi->OpDpGroupScheduleReplicationTargetClusterIdDelete");
            // verify the required parameter 'targetClusterId' is set
            if (targetClusterId == null)
                throw new ApiException(400, "Missing required parameter 'targetClusterId' when calling ProtectApi->OpDpGroupScheduleReplicationTargetClusterIdDelete");

            var localVarPath = "/groups/{groupId}/schedule/replication/{targetClusterId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (targetClusterId != null) localVarPathParams.Add("targetClusterId", Configuration.ApiClient.ParameterToString(targetClusterId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpGroupScheduleReplicationTargetClusterIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplicationSchedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplicationSchedule)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplicationSchedule)));
        }

        /// <summary>
        /// Removes replication schedules for the group for the cluster id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ReplicationSchedule</returns>
        public async System.Threading.Tasks.Task<ReplicationSchedule> OpDpGroupScheduleReplicationTargetClusterIdDeleteAsync(string groupId, string targetClusterId, string acceptLanguage = null)
        {
            ApiResponse<ReplicationSchedule> localVarResponse = await OpDpGroupScheduleReplicationTargetClusterIdDeleteAsyncWithHttpInfo(groupId, targetClusterId, acceptLanguage);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Removes replication schedules for the group for the cluster id 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ReplicationSchedule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplicationSchedule>> OpDpGroupScheduleReplicationTargetClusterIdDeleteAsyncWithHttpInfo(string groupId, string targetClusterId, string acceptLanguage = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ProtectApi->OpDpGroupScheduleReplicationTargetClusterIdDelete");
            // verify the required parameter 'targetClusterId' is set
            if (targetClusterId == null)
                throw new ApiException(400, "Missing required parameter 'targetClusterId' when calling ProtectApi->OpDpGroupScheduleReplicationTargetClusterIdDelete");

            var localVarPath = "/groups/{groupId}/schedule/replication/{targetClusterId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (targetClusterId != null) localVarPathParams.Add("targetClusterId", Configuration.ApiClient.ParameterToString(targetClusterId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpGroupScheduleReplicationTargetClusterIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplicationSchedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplicationSchedule)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplicationSchedule)));
        }

        /// <summary>
        /// Gets list of protected VMs 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the VM to look for, perhaps we can support wild card here (optional)</param>
        /// <param name="type">Limits the search to incoming or outgoing virtual machines (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>List&lt;ProtectedVMInfo&gt;</returns>
        public List<ProtectedVMInfo> OpDpVmGet(string name = null, string type = null, string acceptLanguage = null)
        {
            ApiResponse<List<ProtectedVMInfo>> localVarResponse = OpDpVmGetWithHttpInfo(name, type, acceptLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets list of protected VMs 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the VM to look for, perhaps we can support wild card here (optional)</param>
        /// <param name="type">Limits the search to incoming or outgoing virtual machines (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ProtectedVMInfo&gt;</returns>
        public ApiResponse<List<ProtectedVMInfo>> OpDpVmGetWithHttpInfo(string name = null, string type = null, string acceptLanguage = null)
        {
            
            var localVarPath = "/vms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
           
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            //Configuration = Configuration.Default;
            //encoding the username and password 
            string base64Encoded = GetBase64Encoded(Configuration);
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
                                                                                                                                                //localVarHeaderParams.Add("Authorization", "Basic cm9vdDpDaXNjbzEyMw==");
            var objEF = JsonConvert.SerializeObject(type);
            
            //adding the Authorization to the Header Parameter
            localVarHeaderParams.Add("Authorization", type);
            
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;
            //UnauthorizedAccessException unauthorized = new UnauthorizedAccessException();
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmGet", localVarResponse);
                //added check for incorrect credentials
                if (localVarStatusCode == 401 && exception != null) throw new ApiException(localVarStatusCode,"Credentials entered are incorrect."); 
                else
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectedVMInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectedVMInfo>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectedVMInfo>)));
        }

        //////interpreting the status code and defining the error response
        ////private string GetStatusMsg(int varStatusCode)
        ////{
        ////    if(varStatusCode==401)
        ////    {
        ////        return "The Credentials are not Valid";
        ////    }
        ////    else
        ////    {
        ////        return "OpDpVmGet";
        ////    }
        ////}
        /// <summary>
        /// Gets uername and password encoded into base64 and returned as string
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">none</exception>
        /// <param name="configuration">Configuration</param>
        /// <returns>base64Encoded as string</returns>
        //encoding the username and password 
        private string GetBase64Encoded(Configuration configuration)
        {
            //Configuration.Username = "root";
            //Configuration.Password = "Cisco123";
            String userpass = configuration.Username+ ":" + configuration.Password;
            //String basicAuth = Base64Encode(userpass.ToString());
            byte[] encodedByte = System.Text.ASCIIEncoding.UTF8.GetBytes(userpass);
            string base64Encoded = Convert.ToBase64String(encodedByte);
            return base64Encoded;
        }

        private string GetBase64Encoded(Configuration configuration,string token)
        {
            //Configuration.Username = "root";
            //Configuration.Password = "Cisco123";
            //var json = JsonConvert.SerializeObject(token);
            token = token.Substring(9, token.Length - 10);
            var objEF = JsonConvert.DeserializeObject<AccessTokenEnvelope>(token);
            String userpass = configuration.Username + ":" + configuration.Password;
            
            //String basicAuth = Base64Encode(userpass.ToString());
            byte[] encodedByte = System.Text.ASCIIEncoding.UTF8.GetBytes(userpass);
            string base64Encoded = Convert.ToBase64String(encodedByte);
            return base64Encoded;
        }


        /// <summary>
        /// Gets list of protected VMs 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the VM to look for, perhaps we can support wild card here (optional)</param>
        /// <param name="type">Limits the search to incoming or outgoing virtual machines (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of List&lt;ProtectedVMInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProtectedVMInfo>> OpDpVmGetAsync(string name = null, string type = null, string acceptLanguage = null)
        {
            ApiResponse<List<ProtectedVMInfo>> localVarResponse = await OpDpVmGetAsyncWithHttpInfo(name, type, acceptLanguage);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets list of protected VMs 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the VM to look for, perhaps we can support wild card here (optional)</param>
        /// <param name="type">Limits the search to incoming or outgoing virtual machines (optional)</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectedVMInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProtectedVMInfo>>> OpDpVmGetAsyncWithHttpInfo(string name = null, string type = null, string acceptLanguage = null)
        {

            var localVarPath = "/vms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter
            if (type != null) localVarQueryParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // query parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            localVarHeaderParams.Add("Authorization", "Basic cm9vdDpDaXNjbzEyMw==");

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectedVMInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectedVMInfo>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectedVMInfo>)));
        }

        /// <summary>
        /// Protect a VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Protect VM Spec</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ProtectedVMInfo</returns>
        public ProtectedVMInfo OpDpVmPost(ProtectedVMSpec body, string acceptLanguage = null)
        {
            ApiResponse<ProtectedVMInfo> localVarResponse = OpDpVmPostWithHttpInfo(body, acceptLanguage);
            //Console.WriteLine(localVarResponse.StatusCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Protect a VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Protect VM Spec</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ProtectedVMInfo</returns>
        public ApiResponse<ProtectedVMInfo> OpDpVmPostWithHttpInfo(ProtectedVMSpec body, string acceptLanguage = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectApi->OpDpVmPost");

            var localVarPath = "/vms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            Configuration = Configuration.Default;
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            string base64Encoded = GetBase64Encoded(Configuration);
            localVarHeaderParams.Add("Authorization", "Basic " + base64Encoded);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectedVMInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectedVMInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectedVMInfo)));
        }

        /// <summary>
        /// Protect a VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Protect VM Spec</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ProtectedVMInfo</returns>
        public async System.Threading.Tasks.Task<ProtectedVMInfo> OpDpVmPostAsync(ProtectedVMSpec body, string acceptLanguage = null)
        {
            ApiResponse<ProtectedVMInfo> localVarResponse = await OpDpVmPostAsyncWithHttpInfo(body, acceptLanguage);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Protect a VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Protect VM Spec</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ProtectedVMInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProtectedVMInfo>> OpDpVmPostAsyncWithHttpInfo(ProtectedVMSpec body, string acceptLanguage = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectApi->OpDpVmPost");

            var localVarPath = "/vms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectedVMInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectedVMInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectedVMInfo)));
        }

        /// <summary>
        /// Modifies replication schedule for a vm 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="body">Does this work? Else define a new struct</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ReplicationSchedule</returns>
        public ReplicationSchedule OpDpVmScheduleReplicationPutTargetClusterId(string vmId, string targetClusterId, ReplicationSchedule body, string acceptLanguage = null)
        {
            ApiResponse<ReplicationSchedule> localVarResponse = OpDpVmScheduleReplicationPutTargetClusterIdWithHttpInfo(vmId, targetClusterId, body, acceptLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies replication schedule for a vm 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="body">Does this work? Else define a new struct</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ReplicationSchedule</returns>
        public ApiResponse<ReplicationSchedule> OpDpVmScheduleReplicationPutTargetClusterIdWithHttpInfo(string vmId, string targetClusterId, ReplicationSchedule body, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling ProtectApi->OpDpVmScheduleReplicationPutTargetClusterId");
            // verify the required parameter 'targetClusterId' is set
            if (targetClusterId == null)
                throw new ApiException(400, "Missing required parameter 'targetClusterId' when calling ProtectApi->OpDpVmScheduleReplicationPutTargetClusterId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectApi->OpDpVmScheduleReplicationPutTargetClusterId");

            var localVarPath = "/vms/{vmId}/schedule/replication/{targetClusterId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (targetClusterId != null) localVarPathParams.Add("targetClusterId", Configuration.ApiClient.ParameterToString(targetClusterId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmScheduleReplicationPutTargetClusterId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplicationSchedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplicationSchedule)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplicationSchedule)));
        }

        /// <summary>
        /// Modifies replication schedule for a vm 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="body">Does this work? Else define a new struct</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ReplicationSchedule</returns>
        public async System.Threading.Tasks.Task<ReplicationSchedule> OpDpVmScheduleReplicationPutTargetClusterIdAsync(string vmId, string targetClusterId, ReplicationSchedule body, string acceptLanguage = null)
        {
            ApiResponse<ReplicationSchedule> localVarResponse = await OpDpVmScheduleReplicationPutTargetClusterIdAsyncWithHttpInfo(vmId, targetClusterId, body, acceptLanguage);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Modifies replication schedule for a vm 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="body">Does this work? Else define a new struct</param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ReplicationSchedule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplicationSchedule>> OpDpVmScheduleReplicationPutTargetClusterIdAsyncWithHttpInfo(string vmId, string targetClusterId, ReplicationSchedule body, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling ProtectApi->OpDpVmScheduleReplicationPutTargetClusterId");
            // verify the required parameter 'targetClusterId' is set
            if (targetClusterId == null)
                throw new ApiException(400, "Missing required parameter 'targetClusterId' when calling ProtectApi->OpDpVmScheduleReplicationPutTargetClusterId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectApi->OpDpVmScheduleReplicationPutTargetClusterId");

            var localVarPath = "/vms/{vmId}/schedule/replication/{targetClusterId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (targetClusterId != null) localVarPathParams.Add("targetClusterId", Configuration.ApiClient.ParameterToString(targetClusterId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmScheduleReplicationPutTargetClusterId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplicationSchedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplicationSchedule)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplicationSchedule)));
        }

        /// <summary>
        /// Removes replication schedules for the vm for the cluster id Unprotects a VM
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ReplicationSchedule</returns>
        public ReplicationSchedule OpDpVmScheduleReplicationTargetClusterIdDelete(string vmId, string targetClusterId, string acceptLanguage = null)
        {
            ApiResponse<ReplicationSchedule> localVarResponse = OpDpVmScheduleReplicationTargetClusterIdDeleteWithHttpInfo(vmId, targetClusterId, acceptLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes replication schedules for the vm for the cluster id Unprotects a VM
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ReplicationSchedule</returns>
        public ApiResponse<ReplicationSchedule> OpDpVmScheduleReplicationTargetClusterIdDeleteWithHttpInfo(string vmId, string targetClusterId, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling ProtectApi->OpDpVmScheduleReplicationTargetClusterIdDelete");
            // verify the required parameter 'targetClusterId' is set
            if (targetClusterId == null)
                throw new ApiException(400, "Missing required parameter 'targetClusterId' when calling ProtectApi->OpDpVmScheduleReplicationTargetClusterIdDelete");

            var localVarPath = "/vms/{vmId}/schedule/replication/{targetClusterId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (targetClusterId != null) localVarPathParams.Add("targetClusterId", Configuration.ApiClient.ParameterToString(targetClusterId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmScheduleReplicationTargetClusterIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplicationSchedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplicationSchedule)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplicationSchedule)));
        }

        /// <summary>
        /// Removes replication schedules for the vm for the cluster id Unprotects a VM
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ReplicationSchedule</returns>
        public async System.Threading.Tasks.Task<ReplicationSchedule> OpDpVmScheduleReplicationTargetClusterIdDeleteAsync(string vmId, string targetClusterId, string acceptLanguage = null)
        {
            ApiResponse<ReplicationSchedule> localVarResponse = await OpDpVmScheduleReplicationTargetClusterIdDeleteAsyncWithHttpInfo(vmId, targetClusterId, acceptLanguage);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Removes replication schedules for the vm for the cluster id Unprotects a VM
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="targetClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ReplicationSchedule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplicationSchedule>> OpDpVmScheduleReplicationTargetClusterIdDeleteAsyncWithHttpInfo(string vmId, string targetClusterId, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling ProtectApi->OpDpVmScheduleReplicationTargetClusterIdDelete");
            // verify the required parameter 'targetClusterId' is set
            if (targetClusterId == null)
                throw new ApiException(400, "Missing required parameter 'targetClusterId' when calling ProtectApi->OpDpVmScheduleReplicationTargetClusterIdDelete");

            var localVarPath = "/vms/{vmId}/schedule/replication/{targetClusterId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (targetClusterId != null) localVarPathParams.Add("targetClusterId", Configuration.ApiClient.ParameterToString(targetClusterId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmScheduleReplicationTargetClusterIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplicationSchedule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplicationSchedule)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplicationSchedule)));
        }

        /// <summary>
        /// Gets the details of a protected VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ProtectedVMInfo</returns>
        public ProtectedVMInfo OpDpVmVmidGet(string vmId, string acceptLanguage = null)
        {
            ApiResponse<ProtectedVMInfo> localVarResponse = OpDpVmVmidGetWithHttpInfo(vmId, acceptLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the details of a protected VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ProtectedVMInfo</returns>
        public ApiResponse<ProtectedVMInfo> OpDpVmVmidGetWithHttpInfo(string vmId, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling ProtectApi->OpDpVmVmidGet");

            var localVarPath = "/vms/{vmId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            Configuration = Configuration.Default;
            string base64Encoded = GetBase64Encoded(Configuration);
            localVarHeaderParams.Add("Authorization", "Basic " + base64Encoded);
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmVmidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectedVMInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectedVMInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectedVMInfo)));
        }
        /*code change*/
        /// <summary>
        /// Gets the details of a protected VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="accessToken"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ProtectedVMInfo</returns>
        public ProtectedVMInfo OpDpVmVmidGet1(string vmId,string accessToken, string acceptLanguage = null)
        {
            ApiResponse<ProtectedVMInfo> localVarResponse = OpDpVmVmidGetHttpInfo(vmId, accessToken, acceptLanguage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the details of a protected VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ProtectedVMInfo</returns>
        public ApiResponse<ProtectedVMInfo> OpDpVmVmidGetHttpInfo(string vmId,string accessToken, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling ProtectApi->OpDpVmVmidGet");

            var localVarPath = "/vms/{vmId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            Configuration = Configuration.Default;
            string base64Encoded = GetBase64Encoded(Configuration);
            
            localVarHeaderParams.Add("Authorization", accessToken);
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmVmidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectedVMInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectedVMInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectedVMInfo)));
        }
/*code change ends*/
        /// <summary>
        /// Gets the details of a protected VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ProtectedVMInfo</returns>
        public async System.Threading.Tasks.Task<ProtectedVMInfo> OpDpVmVmidGetAsync(string vmId, string acceptLanguage = null)
        {
            ApiResponse<ProtectedVMInfo> localVarResponse = await OpDpVmVmidGetAsyncWithHttpInfo(vmId, acceptLanguage);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the details of a protected VM 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vmId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ProtectedVMInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProtectedVMInfo>> OpDpVmVmidGetAsyncWithHttpInfo(string vmId, string acceptLanguage = null)
        {
            // verify the required parameter 'vmId' is set
            if (vmId == null)
                throw new ApiException(400, "Missing required parameter 'vmId' when calling ProtectApi->OpDpVmVmidGet");

            var localVarPath = "/vms/{vmId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vmId != null) localVarPathParams.Add("vmId", Configuration.ApiClient.ParameterToString(vmId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpVmVmidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectedVMInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectedVMInfo)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectedVMInfo)));
        }

        public void OpDpVmPost(int petId, object p)
        {

            string json = @"{
      ""name"": ""Test"",
      ""type"": ""DISK"",
      ""id"": ""123"",
      ""idtype"": ""VCMOID"",
      ""confignum"": 0
    }";

            EntityRef objEF = JsonConvert.DeserializeObject<EntityRef>(json);
          

            ProtectedVMSpec body = new ProtectedVMSpec(objEF);
           

            string acceptLanguage = null;
            var response = OpDpVmPost(body, acceptLanguage);
            //Debug.Assert.IsInstanceOf<ProtectedVMInfo>(response, "response is ProtectedVMInfo"
            //Assert.IsInstanceOf<ProtectedVMInfo> (response, "response is ProtectedVMInfo");
            Console.WriteLine(response);
            
        }

        private class SP_powershell
        {
        }
    }
}
