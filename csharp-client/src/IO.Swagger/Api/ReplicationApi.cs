/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReplicationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets history of replications for appliance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>List&lt;DisplayReplicationDetails&gt;</returns>
        List<DisplayReplicationDetails> OpDpReplicationHistoryGet (string acceptLanguage = null);

        /// <summary>
        /// Gets history of replications for appliance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DisplayReplicationDetails&gt;</returns>
        ApiResponse<List<DisplayReplicationDetails>> OpDpReplicationHistoryGetWithHttpInfo (string acceptLanguage = null);
        /// <summary>
        /// Replication IP Pool details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>List&lt;IpPoolInfo&gt;</returns>
        List<IpPoolInfo> OpIpoolReplicationGet (string acceptLanguage = null);

        /// <summary>
        /// Replication IP Pool details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of List&lt;IpPoolInfo&gt;</returns>
        ApiResponse<List<IpPoolInfo>> OpIpoolReplicationGetWithHttpInfo (string acceptLanguage = null);
        /// <summary>
        /// Delete an IP Pool
        /// </summary>
        /// <remarks>
        /// Delete the IP Pool
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns></returns>
        void OpIpoolReplicationPoolidDelete (string poolId, string acceptLanguage = null);

        /// <summary>
        /// Delete an IP Pool
        /// </summary>
        /// <remarks>
        /// Delete the IP Pool
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OpIpoolReplicationPoolidDeleteWithHttpInfo (string poolId, string acceptLanguage = null);
        /// <summary>
        /// Replication IP Pool details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>IpPoolInfo</returns>
        IpPoolInfo OpIpoolReplicationPoolidGet (string poolId, string acceptLanguage = null);

        /// <summary>
        /// Replication IP Pool details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of IpPoolInfo</returns>
        ApiResponse<IpPoolInfo> OpIpoolReplicationPoolidGetWithHttpInfo (string poolId, string acceptLanguage = null);
        /// <summary>
        /// Modify an existing IP Pool
        /// </summary>
        /// <remarks>
        /// Modify the IP Pool
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>IpPoolInfo</returns>
        IpPoolInfo OpIpoolReplicationPoolidPut (string poolId, List<IpRange> body, string acceptLanguage = null);

        /// <summary>
        /// Modify an existing IP Pool
        /// </summary>
        /// <remarks>
        /// Modify the IP Pool
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of IpPoolInfo</returns>
        ApiResponse<IpPoolInfo> OpIpoolReplicationPoolidPutWithHttpInfo (string poolId, List<IpRange> body, string acceptLanguage = null);
        /// <summary>
        /// Create a new replication pool
        /// </summary>
        /// <remarks>
        /// Create Replication IP Pool, and assign the IPs to the nodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>List&lt;IpPoolInfo&gt;</returns>
        List<IpPoolInfo> OpIpoolReplicationPost (IpPoolSpec body, string acceptLanguage = null);

        /// <summary>
        /// Create a new replication pool
        /// </summary>
        /// <remarks>
        /// Create Replication IP Pool, and assign the IPs to the nodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of List&lt;IpPoolInfo&gt;</returns>
        ApiResponse<List<IpPoolInfo>> OpIpoolReplicationPostWithHttpInfo (IpPoolSpec body, string acceptLanguage = null);
        /// <summary>
        /// Replication network details of the current cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ReplicationNetwork</returns>
        ReplicationNetwork OpReplicationNetworkGet (string acceptLanguage = null);

        /// <summary>
        /// Replication network details of the current cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ReplicationNetwork</returns>
        ApiResponse<ReplicationNetwork> OpReplicationNetworkGetWithHttpInfo (string acceptLanguage = null);
        /// <summary>
        /// create replication network setup for the current cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ReplicationNetwork</returns>
        ReplicationNetwork OpReplicationNetworkPost (ReplicationNetwork body, string acceptLanguage = null);

        /// <summary>
        /// create replication network setup for the current cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ReplicationNetwork</returns>
        ApiResponse<ReplicationNetwork> OpReplicationNetworkPostWithHttpInfo (ReplicationNetwork body, string acceptLanguage = null);
        /// <summary>
        /// Modify replication network details of the current cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ReplicationNetwork</returns>
        ReplicationNetwork OpReplicationNetworkPut (ReplicationNetwork body, string acceptLanguage = null);

        /// <summary>
        /// Modify replication network details of the current cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ReplicationNetwork</returns>
        ApiResponse<ReplicationNetwork> OpReplicationNetworkPutWithHttpInfo (ReplicationNetwork body, string acceptLanguage = null);
        /// <summary>
        /// Replication peers of the current cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>List&lt;MapPairErToReplicationPeerInfo&gt;</returns>
        List<MapPairErToReplicationPeerInfo> OpReplicationPeerGet (string acceptLanguage = null);

        /// <summary>
        /// Replication peers of the current cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MapPairErToReplicationPeerInfo&gt;</returns>
        ApiResponse<List<MapPairErToReplicationPeerInfo>> OpReplicationPeerGetWithHttpInfo (string acceptLanguage = null);
        /// <summary>
        /// Get peer datastore information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>List&lt;ReplicationDatastore&gt;</returns>
        List<ReplicationDatastore> OpReplicationPeerPeerClusterIdDatastoresGet (string peerClusterId, string acceptLanguage = null);

        /// <summary>
        /// Get peer datastore information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ReplicationDatastore&gt;</returns>
        ApiResponse<List<ReplicationDatastore>> OpReplicationPeerPeerClusterIdDatastoresGetWithHttpInfo (string peerClusterId, string acceptLanguage = null);
        /// <summary>
        /// Update datastore mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>MapPairErToReplicationPeerInfo</returns>
        MapPairErToReplicationPeerInfo OpReplicationPeerPeerClusterIdDatastoresMapPut (string peerClusterId, List<MapReplPlatDatastoreToReplPlatDatastore> body, string acceptLanguage = null);

        /// <summary>
        /// Update datastore mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of MapPairErToReplicationPeerInfo</returns>
        ApiResponse<MapPairErToReplicationPeerInfo> OpReplicationPeerPeerClusterIdDatastoresMapPutWithHttpInfo (string peerClusterId, List<MapReplPlatDatastoreToReplPlatDatastore> body, string acceptLanguage = null);
        /// <summary>
        /// Delete a replication peer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns></returns>
        void OpReplicationPeerPeerClusterIdPut (string peerClusterId, Credential body, string acceptLanguage = null);

        /// <summary>
        /// Delete a replication peer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OpReplicationPeerPeerClusterIdPutWithHttpInfo (string peerClusterId, Credential body, string acceptLanguage = null);
        /// <summary>
        /// Add a new replication peer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>MapPairErToReplicationPeerInfo</returns>
        MapPairErToReplicationPeerInfo OpReplicationPeerPost (ReplicationPeerSpec body, string acceptLanguage = null);

        /// <summary>
        /// Add a new replication peer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of MapPairErToReplicationPeerInfo</returns>
        ApiResponse<MapPairErToReplicationPeerInfo> OpReplicationPeerPostWithHttpInfo (ReplicationPeerSpec body, string acceptLanguage = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets history of replications for appliance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of List&lt;DisplayReplicationDetails&gt;</returns>
        System.Threading.Tasks.Task<List<DisplayReplicationDetails>> OpDpReplicationHistoryGetAsync (string acceptLanguage = null);

        /// <summary>
        /// Gets history of replications for appliance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DisplayReplicationDetails&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DisplayReplicationDetails>>> OpDpReplicationHistoryGetAsyncWithHttpInfo (string acceptLanguage = null);
        /// <summary>
        /// Replication IP Pool details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of List&lt;IpPoolInfo&gt;</returns>
        System.Threading.Tasks.Task<List<IpPoolInfo>> OpIpoolReplicationGetAsync (string acceptLanguage = null);

        /// <summary>
        /// Replication IP Pool details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IpPoolInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IpPoolInfo>>> OpIpoolReplicationGetAsyncWithHttpInfo (string acceptLanguage = null);
        /// <summary>
        /// Delete an IP Pool
        /// </summary>
        /// <remarks>
        /// Delete the IP Pool
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OpIpoolReplicationPoolidDeleteAsync (string poolId, string acceptLanguage = null);

        /// <summary>
        /// Delete an IP Pool
        /// </summary>
        /// <remarks>
        /// Delete the IP Pool
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OpIpoolReplicationPoolidDeleteAsyncWithHttpInfo (string poolId, string acceptLanguage = null);
        /// <summary>
        /// Replication IP Pool details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of IpPoolInfo</returns>
        System.Threading.Tasks.Task<IpPoolInfo> OpIpoolReplicationPoolidGetAsync (string poolId, string acceptLanguage = null);

        /// <summary>
        /// Replication IP Pool details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (IpPoolInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<IpPoolInfo>> OpIpoolReplicationPoolidGetAsyncWithHttpInfo (string poolId, string acceptLanguage = null);
        /// <summary>
        /// Modify an existing IP Pool
        /// </summary>
        /// <remarks>
        /// Modify the IP Pool
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of IpPoolInfo</returns>
        System.Threading.Tasks.Task<IpPoolInfo> OpIpoolReplicationPoolidPutAsync (string poolId, List<IpRange> body, string acceptLanguage = null);

        /// <summary>
        /// Modify an existing IP Pool
        /// </summary>
        /// <remarks>
        /// Modify the IP Pool
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (IpPoolInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<IpPoolInfo>> OpIpoolReplicationPoolidPutAsyncWithHttpInfo (string poolId, List<IpRange> body, string acceptLanguage = null);
        /// <summary>
        /// Create a new replication pool
        /// </summary>
        /// <remarks>
        /// Create Replication IP Pool, and assign the IPs to the nodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of List&lt;IpPoolInfo&gt;</returns>
        System.Threading.Tasks.Task<List<IpPoolInfo>> OpIpoolReplicationPostAsync (IpPoolSpec body, string acceptLanguage = null);

        /// <summary>
        /// Create a new replication pool
        /// </summary>
        /// <remarks>
        /// Create Replication IP Pool, and assign the IPs to the nodes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IpPoolInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IpPoolInfo>>> OpIpoolReplicationPostAsyncWithHttpInfo (IpPoolSpec body, string acceptLanguage = null);
        /// <summary>
        /// Replication network details of the current cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ReplicationNetwork</returns>
        System.Threading.Tasks.Task<ReplicationNetwork> OpReplicationNetworkGetAsync (string acceptLanguage = null);

        /// <summary>
        /// Replication network details of the current cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ReplicationNetwork)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplicationNetwork>> OpReplicationNetworkGetAsyncWithHttpInfo (string acceptLanguage = null);
        /// <summary>
        /// create replication network setup for the current cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ReplicationNetwork</returns>
        System.Threading.Tasks.Task<ReplicationNetwork> OpReplicationNetworkPostAsync (ReplicationNetwork body, string acceptLanguage = null);

        /// <summary>
        /// create replication network setup for the current cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ReplicationNetwork)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplicationNetwork>> OpReplicationNetworkPostAsyncWithHttpInfo (ReplicationNetwork body, string acceptLanguage = null);
        /// <summary>
        /// Modify replication network details of the current cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ReplicationNetwork</returns>
        System.Threading.Tasks.Task<ReplicationNetwork> OpReplicationNetworkPutAsync (ReplicationNetwork body, string acceptLanguage = null);

        /// <summary>
        /// Modify replication network details of the current cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ReplicationNetwork)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplicationNetwork>> OpReplicationNetworkPutAsyncWithHttpInfo (ReplicationNetwork body, string acceptLanguage = null);
        /// <summary>
        /// Replication peers of the current cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of List&lt;MapPairErToReplicationPeerInfo&gt;</returns>
        System.Threading.Tasks.Task<List<MapPairErToReplicationPeerInfo>> OpReplicationPeerGetAsync (string acceptLanguage = null);

        /// <summary>
        /// Replication peers of the current cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MapPairErToReplicationPeerInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MapPairErToReplicationPeerInfo>>> OpReplicationPeerGetAsyncWithHttpInfo (string acceptLanguage = null);
        /// <summary>
        /// Get peer datastore information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of List&lt;ReplicationDatastore&gt;</returns>
        System.Threading.Tasks.Task<List<ReplicationDatastore>> OpReplicationPeerPeerClusterIdDatastoresGetAsync (string peerClusterId, string acceptLanguage = null);

        /// <summary>
        /// Get peer datastore information
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReplicationDatastore&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ReplicationDatastore>>> OpReplicationPeerPeerClusterIdDatastoresGetAsyncWithHttpInfo (string peerClusterId, string acceptLanguage = null);
        /// <summary>
        /// Update datastore mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of MapPairErToReplicationPeerInfo</returns>
        System.Threading.Tasks.Task<MapPairErToReplicationPeerInfo> OpReplicationPeerPeerClusterIdDatastoresMapPutAsync (string peerClusterId, List<MapReplPlatDatastoreToReplPlatDatastore> body, string acceptLanguage = null);

        /// <summary>
        /// Update datastore mapping
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (MapPairErToReplicationPeerInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<MapPairErToReplicationPeerInfo>> OpReplicationPeerPeerClusterIdDatastoresMapPutAsyncWithHttpInfo (string peerClusterId, List<MapReplPlatDatastoreToReplPlatDatastore> body, string acceptLanguage = null);
        /// <summary>
        /// Delete a replication peer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OpReplicationPeerPeerClusterIdPutAsync (string peerClusterId, Credential body, string acceptLanguage = null);

        /// <summary>
        /// Delete a replication peer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OpReplicationPeerPeerClusterIdPutAsyncWithHttpInfo (string peerClusterId, Credential body, string acceptLanguage = null);
        /// <summary>
        /// Add a new replication peer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of MapPairErToReplicationPeerInfo</returns>
        System.Threading.Tasks.Task<MapPairErToReplicationPeerInfo> OpReplicationPeerPostAsync (ReplicationPeerSpec body, string acceptLanguage = null);

        /// <summary>
        /// Add a new replication peer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (MapPairErToReplicationPeerInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<MapPairErToReplicationPeerInfo>> OpReplicationPeerPostAsyncWithHttpInfo (ReplicationPeerSpec body, string acceptLanguage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReplicationApi : IReplicationApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReplicationApi(String basePath)
        {
            var apiString = "https://" + basePath.Trim() + "/dataprotection/v1";
            this.Configuration = new Configuration(new ApiClient(apiString));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReplicationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets history of replications for appliance 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>List&lt;DisplayReplicationDetails&gt;</returns>
        public List<DisplayReplicationDetails> OpDpReplicationHistoryGet (string acceptLanguage = null)
        {
             ApiResponse<List<DisplayReplicationDetails>> localVarResponse = OpDpReplicationHistoryGetWithHttpInfo(acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets history of replications for appliance 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DisplayReplicationDetails&gt;</returns>
        public ApiResponse< List<DisplayReplicationDetails> > OpDpReplicationHistoryGetWithHttpInfo (string acceptLanguage = null)
        {

            var localVarPath = "/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpReplicationHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DisplayReplicationDetails>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DisplayReplicationDetails>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DisplayReplicationDetails>)));
        }

        /// <summary>
        /// Gets history of replications for appliance 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of List&lt;DisplayReplicationDetails&gt;</returns>
        public async System.Threading.Tasks.Task<List<DisplayReplicationDetails>> OpDpReplicationHistoryGetAsync (string acceptLanguage = null)
        {
             ApiResponse<List<DisplayReplicationDetails>> localVarResponse = await OpDpReplicationHistoryGetAsyncWithHttpInfo(acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets history of replications for appliance 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DisplayReplicationDetails&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DisplayReplicationDetails>>> OpDpReplicationHistoryGetAsyncWithHttpInfo (string acceptLanguage = null)
        {

            var localVarPath = "/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpDpReplicationHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DisplayReplicationDetails>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DisplayReplicationDetails>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DisplayReplicationDetails>)));
        }

        /// <summary>
        /// Replication IP Pool details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>List&lt;IpPoolInfo&gt;</returns>
        public List<IpPoolInfo> OpIpoolReplicationGet (string acceptLanguage = null)
        {
             ApiResponse<List<IpPoolInfo>> localVarResponse = OpIpoolReplicationGetWithHttpInfo(acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replication IP Pool details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of List&lt;IpPoolInfo&gt;</returns>
        public ApiResponse< List<IpPoolInfo> > OpIpoolReplicationGetWithHttpInfo (string acceptLanguage = null)
        {

            var localVarPath = "/ippools/replication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpIpoolReplicationGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IpPoolInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IpPoolInfo>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IpPoolInfo>)));
        }

        /// <summary>
        /// Replication IP Pool details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of List&lt;IpPoolInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<IpPoolInfo>> OpIpoolReplicationGetAsync (string acceptLanguage = null)
        {
             ApiResponse<List<IpPoolInfo>> localVarResponse = await OpIpoolReplicationGetAsyncWithHttpInfo(acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replication IP Pool details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IpPoolInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IpPoolInfo>>> OpIpoolReplicationGetAsyncWithHttpInfo (string acceptLanguage = null)
        {

            var localVarPath = "/ippools/replication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpIpoolReplicationGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IpPoolInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IpPoolInfo>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IpPoolInfo>)));
        }

        /// <summary>
        /// Delete an IP Pool Delete the IP Pool
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns></returns>
        public void OpIpoolReplicationPoolidDelete (string poolId, string acceptLanguage = null)
        {
             OpIpoolReplicationPoolidDeleteWithHttpInfo(poolId, acceptLanguage);
        }

        /// <summary>
        /// Delete an IP Pool Delete the IP Pool
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OpIpoolReplicationPoolidDeleteWithHttpInfo (string poolId, string acceptLanguage = null)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new ApiException(400, "Missing required parameter 'poolId' when calling ReplicationApi->OpIpoolReplicationPoolidDelete");

            var localVarPath = "/ippools/replication/{poolId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (poolId != null) localVarPathParams.Add("poolId", Configuration.ApiClient.ParameterToString(poolId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpIpoolReplicationPoolidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an IP Pool Delete the IP Pool
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OpIpoolReplicationPoolidDeleteAsync (string poolId, string acceptLanguage = null)
        {
             await OpIpoolReplicationPoolidDeleteAsyncWithHttpInfo(poolId, acceptLanguage);

        }

        /// <summary>
        /// Delete an IP Pool Delete the IP Pool
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OpIpoolReplicationPoolidDeleteAsyncWithHttpInfo (string poolId, string acceptLanguage = null)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new ApiException(400, "Missing required parameter 'poolId' when calling ReplicationApi->OpIpoolReplicationPoolidDelete");

            var localVarPath = "/ippools/replication/{poolId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (poolId != null) localVarPathParams.Add("poolId", Configuration.ApiClient.ParameterToString(poolId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpIpoolReplicationPoolidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Replication IP Pool details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>IpPoolInfo</returns>
        public IpPoolInfo OpIpoolReplicationPoolidGet (string poolId, string acceptLanguage = null)
        {
             ApiResponse<IpPoolInfo> localVarResponse = OpIpoolReplicationPoolidGetWithHttpInfo(poolId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replication IP Pool details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of IpPoolInfo</returns>
        public ApiResponse< IpPoolInfo > OpIpoolReplicationPoolidGetWithHttpInfo (string poolId, string acceptLanguage = null)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new ApiException(400, "Missing required parameter 'poolId' when calling ReplicationApi->OpIpoolReplicationPoolidGet");

            var localVarPath = "/ippools/replication/{poolId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (poolId != null) localVarPathParams.Add("poolId", Configuration.ApiClient.ParameterToString(poolId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpIpoolReplicationPoolidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IpPoolInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IpPoolInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IpPoolInfo)));
        }

        /// <summary>
        /// Replication IP Pool details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of IpPoolInfo</returns>
        public async System.Threading.Tasks.Task<IpPoolInfo> OpIpoolReplicationPoolidGetAsync (string poolId, string acceptLanguage = null)
        {
             ApiResponse<IpPoolInfo> localVarResponse = await OpIpoolReplicationPoolidGetAsyncWithHttpInfo(poolId, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replication IP Pool details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (IpPoolInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IpPoolInfo>> OpIpoolReplicationPoolidGetAsyncWithHttpInfo (string poolId, string acceptLanguage = null)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new ApiException(400, "Missing required parameter 'poolId' when calling ReplicationApi->OpIpoolReplicationPoolidGet");

            var localVarPath = "/ippools/replication/{poolId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (poolId != null) localVarPathParams.Add("poolId", Configuration.ApiClient.ParameterToString(poolId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpIpoolReplicationPoolidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IpPoolInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IpPoolInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IpPoolInfo)));
        }

        /// <summary>
        /// Modify an existing IP Pool Modify the IP Pool
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>IpPoolInfo</returns>
        public IpPoolInfo OpIpoolReplicationPoolidPut (string poolId, List<IpRange> body, string acceptLanguage = null)
        {
             ApiResponse<IpPoolInfo> localVarResponse = OpIpoolReplicationPoolidPutWithHttpInfo(poolId, body, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify an existing IP Pool Modify the IP Pool
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of IpPoolInfo</returns>
        public ApiResponse< IpPoolInfo > OpIpoolReplicationPoolidPutWithHttpInfo (string poolId, List<IpRange> body, string acceptLanguage = null)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new ApiException(400, "Missing required parameter 'poolId' when calling ReplicationApi->OpIpoolReplicationPoolidPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplicationApi->OpIpoolReplicationPoolidPut");

            var localVarPath = "/ippools/replication/{poolId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (poolId != null) localVarPathParams.Add("poolId", Configuration.ApiClient.ParameterToString(poolId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpIpoolReplicationPoolidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IpPoolInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IpPoolInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IpPoolInfo)));
        }

        /// <summary>
        /// Modify an existing IP Pool Modify the IP Pool
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of IpPoolInfo</returns>
        public async System.Threading.Tasks.Task<IpPoolInfo> OpIpoolReplicationPoolidPutAsync (string poolId, List<IpRange> body, string acceptLanguage = null)
        {
             ApiResponse<IpPoolInfo> localVarResponse = await OpIpoolReplicationPoolidPutAsyncWithHttpInfo(poolId, body, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify an existing IP Pool Modify the IP Pool
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (IpPoolInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IpPoolInfo>> OpIpoolReplicationPoolidPutAsyncWithHttpInfo (string poolId, List<IpRange> body, string acceptLanguage = null)
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new ApiException(400, "Missing required parameter 'poolId' when calling ReplicationApi->OpIpoolReplicationPoolidPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplicationApi->OpIpoolReplicationPoolidPut");

            var localVarPath = "/ippools/replication/{poolId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (poolId != null) localVarPathParams.Add("poolId", Configuration.ApiClient.ParameterToString(poolId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpIpoolReplicationPoolidPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IpPoolInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IpPoolInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IpPoolInfo)));
        }

        /// <summary>
        /// Create a new replication pool Create Replication IP Pool, and assign the IPs to the nodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>List&lt;IpPoolInfo&gt;</returns>
        public List<IpPoolInfo> OpIpoolReplicationPost (IpPoolSpec body, string acceptLanguage = null)
        {
             ApiResponse<List<IpPoolInfo>> localVarResponse = OpIpoolReplicationPostWithHttpInfo(body, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new replication pool Create Replication IP Pool, and assign the IPs to the nodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of List&lt;IpPoolInfo&gt;</returns>
        public ApiResponse< List<IpPoolInfo> > OpIpoolReplicationPostWithHttpInfo (IpPoolSpec body, string acceptLanguage = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplicationApi->OpIpoolReplicationPost");

            var localVarPath = "/ippools/replication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpIpoolReplicationPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IpPoolInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IpPoolInfo>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IpPoolInfo>)));
        }

        /// <summary>
        /// Create a new replication pool Create Replication IP Pool, and assign the IPs to the nodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of List&lt;IpPoolInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<IpPoolInfo>> OpIpoolReplicationPostAsync (IpPoolSpec body, string acceptLanguage = null)
        {
             ApiResponse<List<IpPoolInfo>> localVarResponse = await OpIpoolReplicationPostAsyncWithHttpInfo(body, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new replication pool Create Replication IP Pool, and assign the IPs to the nodes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IpPoolInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IpPoolInfo>>> OpIpoolReplicationPostAsyncWithHttpInfo (IpPoolSpec body, string acceptLanguage = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplicationApi->OpIpoolReplicationPost");

            var localVarPath = "/ippools/replication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpIpoolReplicationPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<IpPoolInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<IpPoolInfo>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<IpPoolInfo>)));
        }

        /// <summary>
        /// Replication network details of the current cluster 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ReplicationNetwork</returns>
        public ReplicationNetwork OpReplicationNetworkGet (string acceptLanguage = null)
        {
             ApiResponse<ReplicationNetwork> localVarResponse = OpReplicationNetworkGetWithHttpInfo(acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replication network details of the current cluster 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ReplicationNetwork</returns>
        public ApiResponse< ReplicationNetwork > OpReplicationNetworkGetWithHttpInfo (string acceptLanguage = null)
        {

            var localVarPath = "/network";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpReplicationNetworkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplicationNetwork>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplicationNetwork) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplicationNetwork)));
        }

        /// <summary>
        /// Replication network details of the current cluster 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ReplicationNetwork</returns>
        public async System.Threading.Tasks.Task<ReplicationNetwork> OpReplicationNetworkGetAsync (string acceptLanguage = null)
        {
             ApiResponse<ReplicationNetwork> localVarResponse = await OpReplicationNetworkGetAsyncWithHttpInfo(acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replication network details of the current cluster 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ReplicationNetwork)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplicationNetwork>> OpReplicationNetworkGetAsyncWithHttpInfo (string acceptLanguage = null)
        {

            var localVarPath = "/network";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpReplicationNetworkGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplicationNetwork>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplicationNetwork) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplicationNetwork)));
        }

        /// <summary>
        /// create replication network setup for the current cluster 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ReplicationNetwork</returns>
        public ReplicationNetwork OpReplicationNetworkPost (ReplicationNetwork body, string acceptLanguage = null)
        {
             ApiResponse<ReplicationNetwork> localVarResponse = OpReplicationNetworkPostWithHttpInfo(body, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// create replication network setup for the current cluster 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ReplicationNetwork</returns>
        public ApiResponse< ReplicationNetwork > OpReplicationNetworkPostWithHttpInfo (ReplicationNetwork body, string acceptLanguage = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplicationApi->OpReplicationNetworkPost");

            var localVarPath = "/network";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpReplicationNetworkPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplicationNetwork>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplicationNetwork) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplicationNetwork)));
        }

        /// <summary>
        /// create replication network setup for the current cluster 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ReplicationNetwork</returns>
        public async System.Threading.Tasks.Task<ReplicationNetwork> OpReplicationNetworkPostAsync (ReplicationNetwork body, string acceptLanguage = null)
        {
             ApiResponse<ReplicationNetwork> localVarResponse = await OpReplicationNetworkPostAsyncWithHttpInfo(body, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create replication network setup for the current cluster 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ReplicationNetwork)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplicationNetwork>> OpReplicationNetworkPostAsyncWithHttpInfo (ReplicationNetwork body, string acceptLanguage = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplicationApi->OpReplicationNetworkPost");

            var localVarPath = "/network";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpReplicationNetworkPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplicationNetwork>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplicationNetwork) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplicationNetwork)));
        }

        /// <summary>
        /// Modify replication network details of the current cluster 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ReplicationNetwork</returns>
        public ReplicationNetwork OpReplicationNetworkPut (ReplicationNetwork body, string acceptLanguage = null)
        {
             ApiResponse<ReplicationNetwork> localVarResponse = OpReplicationNetworkPutWithHttpInfo(body, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify replication network details of the current cluster 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of ReplicationNetwork</returns>
        public ApiResponse< ReplicationNetwork > OpReplicationNetworkPutWithHttpInfo (ReplicationNetwork body, string acceptLanguage = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplicationApi->OpReplicationNetworkPut");

            var localVarPath = "/network";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpReplicationNetworkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplicationNetwork>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplicationNetwork) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplicationNetwork)));
        }

        /// <summary>
        /// Modify replication network details of the current cluster 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ReplicationNetwork</returns>
        public async System.Threading.Tasks.Task<ReplicationNetwork> OpReplicationNetworkPutAsync (ReplicationNetwork body, string acceptLanguage = null)
        {
             ApiResponse<ReplicationNetwork> localVarResponse = await OpReplicationNetworkPutAsyncWithHttpInfo(body, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify replication network details of the current cluster 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (ReplicationNetwork)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplicationNetwork>> OpReplicationNetworkPutAsyncWithHttpInfo (ReplicationNetwork body, string acceptLanguage = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplicationApi->OpReplicationNetworkPut");

            var localVarPath = "/network";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpReplicationNetworkPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplicationNetwork>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplicationNetwork) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplicationNetwork)));
        }

        /// <summary>
        /// Replication peers of the current cluster 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>List&lt;MapPairErToReplicationPeerInfo&gt;</returns>
        public List<MapPairErToReplicationPeerInfo> OpReplicationPeerGet (string acceptLanguage = null)
        {
             ApiResponse<List<MapPairErToReplicationPeerInfo>> localVarResponse = OpReplicationPeerGetWithHttpInfo(acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replication peers of the current cluster 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of List&lt;MapPairErToReplicationPeerInfo&gt;</returns>
        public ApiResponse< List<MapPairErToReplicationPeerInfo> > OpReplicationPeerGetWithHttpInfo (string acceptLanguage = null)
        {

            var localVarPath = "/peers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };

            //set the configuration to default
            Configuration = Configuration.Default;
            //encoding the username and password 
            string base64Encoded = GetBase64Encoded(Configuration);
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            //localVarHeaderParams.Add("Authorization", "Basic cm9vdDpDaXNjbzEyMw==");
            //adding the Authorization to the Header Parameter
            localVarHeaderParams.Add("Authorization", "Basic " + base64Encoded);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpReplicationPeerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MapPairErToReplicationPeerInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MapPairErToReplicationPeerInfo>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MapPairErToReplicationPeerInfo>)));
        }

        /// <summary>
        /// Replication peers of the current cluster 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of List&lt;MapPairErToReplicationPeerInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<MapPairErToReplicationPeerInfo>> OpReplicationPeerGetAsync (string acceptLanguage = null)
        {
             ApiResponse<List<MapPairErToReplicationPeerInfo>> localVarResponse = await OpReplicationPeerGetAsyncWithHttpInfo(acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replication peers of the current cluster 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MapPairErToReplicationPeerInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MapPairErToReplicationPeerInfo>>> OpReplicationPeerGetAsyncWithHttpInfo (string acceptLanguage = null)
        {

            var localVarPath = "/peers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpReplicationPeerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MapPairErToReplicationPeerInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MapPairErToReplicationPeerInfo>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MapPairErToReplicationPeerInfo>)));
        }

        /// <summary>
        /// Get peer datastore information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>List&lt;ReplicationDatastore&gt;</returns>
        public List<ReplicationDatastore> OpReplicationPeerPeerClusterIdDatastoresGet (string peerClusterId, string acceptLanguage = null)
        {
             ApiResponse<List<ReplicationDatastore>> localVarResponse = OpReplicationPeerPeerClusterIdDatastoresGetWithHttpInfo(peerClusterId, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get peer datastore information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ReplicationDatastore&gt;</returns>
        public ApiResponse< List<ReplicationDatastore> > OpReplicationPeerPeerClusterIdDatastoresGetWithHttpInfo (string peerClusterId, string acceptLanguage = null)
        {
            // verify the required parameter 'peerClusterId' is set
            if (peerClusterId == null)
                throw new ApiException(400, "Missing required parameter 'peerClusterId' when calling ReplicationApi->OpReplicationPeerPeerClusterIdDatastoresGet");

            var localVarPath = "/peers/{peerClusterId}/datastores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            //set the configuration to default
            Configuration = Configuration.Default;
            //encoding the username and password 
            string base64Encoded = GetBase64Encoded(Configuration);
            if (peerClusterId != null) localVarPathParams.Add("peerClusterId", Configuration.ApiClient.ParameterToString(peerClusterId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            //adding the Authorization to the Header Parameter
            localVarHeaderParams.Add("Authorization", "Basic " + base64Encoded);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpReplicationPeerPeerClusterIdDatastoresGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReplicationDatastore>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ReplicationDatastore>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReplicationDatastore>)));
        }

        /// <summary>
        /// Get peer datastore information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of List&lt;ReplicationDatastore&gt;</returns>
        public async System.Threading.Tasks.Task<List<ReplicationDatastore>> OpReplicationPeerPeerClusterIdDatastoresGetAsync (string peerClusterId, string acceptLanguage = null)
        {
             ApiResponse<List<ReplicationDatastore>> localVarResponse = await OpReplicationPeerPeerClusterIdDatastoresGetAsyncWithHttpInfo(peerClusterId, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get peer datastore information 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ReplicationDatastore&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ReplicationDatastore>>> OpReplicationPeerPeerClusterIdDatastoresGetAsyncWithHttpInfo (string peerClusterId, string acceptLanguage = null)
        {
            // verify the required parameter 'peerClusterId' is set
            if (peerClusterId == null)
                throw new ApiException(400, "Missing required parameter 'peerClusterId' when calling ReplicationApi->OpReplicationPeerPeerClusterIdDatastoresGet");

            var localVarPath = "/peers/{peerClusterId}/datastores";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (peerClusterId != null) localVarPathParams.Add("peerClusterId", Configuration.ApiClient.ParameterToString(peerClusterId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpReplicationPeerPeerClusterIdDatastoresGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ReplicationDatastore>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ReplicationDatastore>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ReplicationDatastore>)));
        }

        /// <summary>
        /// Update datastore mapping 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>MapPairErToReplicationPeerInfo</returns>
        public MapPairErToReplicationPeerInfo OpReplicationPeerPeerClusterIdDatastoresMapPut (string peerClusterId, List<MapReplPlatDatastoreToReplPlatDatastore> body, string acceptLanguage = null)
        {
             ApiResponse<MapPairErToReplicationPeerInfo> localVarResponse = OpReplicationPeerPeerClusterIdDatastoresMapPutWithHttpInfo(peerClusterId, body, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update datastore mapping 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of MapPairErToReplicationPeerInfo</returns>
        public ApiResponse< MapPairErToReplicationPeerInfo > OpReplicationPeerPeerClusterIdDatastoresMapPutWithHttpInfo (string peerClusterId, List<MapReplPlatDatastoreToReplPlatDatastore> body, string acceptLanguage = null)
        {
            // verify the required parameter 'peerClusterId' is set
            if (peerClusterId == null)
                throw new ApiException(400, "Missing required parameter 'peerClusterId' when calling ReplicationApi->OpReplicationPeerPeerClusterIdDatastoresMapPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplicationApi->OpReplicationPeerPeerClusterIdDatastoresMapPut");

            var localVarPath = "/peers/{peerClusterId}/datastores/map";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (peerClusterId != null) localVarPathParams.Add("peerClusterId", Configuration.ApiClient.ParameterToString(peerClusterId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpReplicationPeerPeerClusterIdDatastoresMapPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MapPairErToReplicationPeerInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MapPairErToReplicationPeerInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MapPairErToReplicationPeerInfo)));
        }

        /// <summary>
        /// Update datastore mapping 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of MapPairErToReplicationPeerInfo</returns>
        public async System.Threading.Tasks.Task<MapPairErToReplicationPeerInfo> OpReplicationPeerPeerClusterIdDatastoresMapPutAsync (string peerClusterId, List<MapReplPlatDatastoreToReplPlatDatastore> body, string acceptLanguage = null)
        {
             ApiResponse<MapPairErToReplicationPeerInfo> localVarResponse = await OpReplicationPeerPeerClusterIdDatastoresMapPutAsyncWithHttpInfo(peerClusterId, body, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update datastore mapping 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (MapPairErToReplicationPeerInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MapPairErToReplicationPeerInfo>> OpReplicationPeerPeerClusterIdDatastoresMapPutAsyncWithHttpInfo (string peerClusterId, List<MapReplPlatDatastoreToReplPlatDatastore> body, string acceptLanguage = null)
        {
            // verify the required parameter 'peerClusterId' is set
            if (peerClusterId == null)
                throw new ApiException(400, "Missing required parameter 'peerClusterId' when calling ReplicationApi->OpReplicationPeerPeerClusterIdDatastoresMapPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplicationApi->OpReplicationPeerPeerClusterIdDatastoresMapPut");

            var localVarPath = "/peers/{peerClusterId}/datastores/map";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (peerClusterId != null) localVarPathParams.Add("peerClusterId", Configuration.ApiClient.ParameterToString(peerClusterId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpReplicationPeerPeerClusterIdDatastoresMapPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MapPairErToReplicationPeerInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MapPairErToReplicationPeerInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MapPairErToReplicationPeerInfo)));
        }

        /// <summary>
        /// Delete a replication peer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns></returns>
        public void OpReplicationPeerPeerClusterIdPut (string peerClusterId, Credential body, string acceptLanguage = null)
        {
             OpReplicationPeerPeerClusterIdPutWithHttpInfo(peerClusterId, body, acceptLanguage);
        }

        /// <summary>
        /// Delete a replication peer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OpReplicationPeerPeerClusterIdPutWithHttpInfo (string peerClusterId, Credential body, string acceptLanguage = null)
        {
            // verify the required parameter 'peerClusterId' is set
            if (peerClusterId == null)
                throw new ApiException(400, "Missing required parameter 'peerClusterId' when calling ReplicationApi->OpReplicationPeerPeerClusterIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplicationApi->OpReplicationPeerPeerClusterIdPut");

            var localVarPath = "/peers/{peerClusterId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (peerClusterId != null) localVarPathParams.Add("peerClusterId", Configuration.ApiClient.ParameterToString(peerClusterId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpReplicationPeerPeerClusterIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a replication peer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OpReplicationPeerPeerClusterIdPutAsync (string peerClusterId, Credential body, string acceptLanguage = null)
        {
             await OpReplicationPeerPeerClusterIdPutAsyncWithHttpInfo(peerClusterId, body, acceptLanguage);

        }

        /// <summary>
        /// Delete a replication peer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="peerClusterId"></param>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OpReplicationPeerPeerClusterIdPutAsyncWithHttpInfo (string peerClusterId, Credential body, string acceptLanguage = null)
        {
            // verify the required parameter 'peerClusterId' is set
            if (peerClusterId == null)
                throw new ApiException(400, "Missing required parameter 'peerClusterId' when calling ReplicationApi->OpReplicationPeerPeerClusterIdPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplicationApi->OpReplicationPeerPeerClusterIdPut");

            var localVarPath = "/peers/{peerClusterId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (peerClusterId != null) localVarPathParams.Add("peerClusterId", Configuration.ApiClient.ParameterToString(peerClusterId)); // path parameter
            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpReplicationPeerPeerClusterIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a new replication peer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>MapPairErToReplicationPeerInfo</returns>
        public MapPairErToReplicationPeerInfo OpReplicationPeerPost (ReplicationPeerSpec body, string acceptLanguage = null)
        {
             ApiResponse<MapPairErToReplicationPeerInfo> localVarResponse = OpReplicationPeerPostWithHttpInfo(body, acceptLanguage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new replication peer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>ApiResponse of MapPairErToReplicationPeerInfo</returns>
        public ApiResponse< MapPairErToReplicationPeerInfo > OpReplicationPeerPostWithHttpInfo (ReplicationPeerSpec body, string acceptLanguage = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplicationApi->OpReplicationPeerPost");

            var localVarPath = "/peers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpReplicationPeerPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MapPairErToReplicationPeerInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MapPairErToReplicationPeerInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MapPairErToReplicationPeerInfo)));
        }

        /// <summary>
        /// Add a new replication peer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of MapPairErToReplicationPeerInfo</returns>
        public async System.Threading.Tasks.Task<MapPairErToReplicationPeerInfo> OpReplicationPeerPostAsync (ReplicationPeerSpec body, string acceptLanguage = null)
        {
             ApiResponse<MapPairErToReplicationPeerInfo> localVarResponse = await OpReplicationPeerPostAsyncWithHttpInfo(body, acceptLanguage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a new replication peer 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="acceptLanguage"> (optional)</param>
        /// <returns>Task of ApiResponse (MapPairErToReplicationPeerInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MapPairErToReplicationPeerInfo>> OpReplicationPeerPostAsyncWithHttpInfo (ReplicationPeerSpec body, string acceptLanguage = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ReplicationApi->OpReplicationPeerPost");

            var localVarPath = "/peers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpReplicationPeerPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MapPairErToReplicationPeerInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MapPairErToReplicationPeerInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MapPairErToReplicationPeerInfo)));
        }

        /// <summary>
        /// Gets uername and password encoded into base64 and returned as string
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">none</exception>
        /// <param name="configuration">Configuration</param>
        /// <returns>base64Encoded as string</returns>
        //encoding the username and password 
        private string GetBase64Encoded(Configuration configuration)
        {
            //Configuration.Username = "root";
            //Configuration.Password = "Cisco123";
            String userpass = configuration.Username + ":" + configuration.Password;
            //String basicAuth = Base64Encode(userpass.ToString());
            byte[] encodedByte = System.Text.ASCIIEncoding.UTF8.GetBytes(userpass);
            string base64Encoded = Convert.ToBase64String(encodedByte);
            return base64Encoded;
        }
    }
}
