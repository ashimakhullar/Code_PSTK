/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MapReplPlatDatastoreToReplPlatDatastore
    /// </summary>
    [DataContract]
    public partial class MapReplPlatDatastoreToReplPlatDatastore :  IEquatable<MapReplPlatDatastoreToReplPlatDatastore>, IValidatableObject
    {
        /// <summary>
        /// Datastore mapping operation
        /// </summary>
        /// <value>Datastore mapping operation</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperEnum
        {
            
            /// <summary>
            /// Enum ADD for "ADD"
            /// </summary>
            [EnumMember(Value = "ADD")]
            ADD,
            
            /// <summary>
            /// Enum DELETE for "DELETE"
            /// </summary>
            [EnumMember(Value = "DELETE")]
            DELETE
        }

        /// <summary>
        /// Datastore mapping operation
        /// </summary>
        /// <value>Datastore mapping operation</value>
        [DataMember(Name="oper", EmitDefaultValue=false)]
        public OperEnum? Oper { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MapReplPlatDatastoreToReplPlatDatastore" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MapReplPlatDatastoreToReplPlatDatastore() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MapReplPlatDatastoreToReplPlatDatastore" /> class.
        /// </summary>
        /// <param name="Key">Key (required).</param>
        /// <param name="Value">Value (required).</param>
        /// <param name="Oper">Datastore mapping operation (required).</param>
        public MapReplPlatDatastoreToReplPlatDatastore(ReplicationPlatDatastore Key = default(ReplicationPlatDatastore), ReplicationPlatDatastore Value = default(ReplicationPlatDatastore), OperEnum? Oper = default(OperEnum?))
        {
            // to ensure "Key" is required (not null)
            if (Key == null)
            {
                throw new InvalidDataException("Key is a required property for MapReplPlatDatastoreToReplPlatDatastore and cannot be null");
            }
            else
            {
                this.Key = Key;
            }
            // to ensure "Value" is required (not null)
            if (Value == null)
            {
                throw new InvalidDataException("Value is a required property for MapReplPlatDatastoreToReplPlatDatastore and cannot be null");
            }
            else
            {
                this.Value = Value;
            }
            // to ensure "Oper" is required (not null)
            if (Oper == null)
            {
                throw new InvalidDataException("Oper is a required property for MapReplPlatDatastoreToReplPlatDatastore and cannot be null");
            }
            else
            {
                this.Oper = Oper;
            }
        }
        
        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public ReplicationPlatDatastore Key { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public ReplicationPlatDatastore Value { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MapReplPlatDatastoreToReplPlatDatastore {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Oper: ").Append(Oper).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as MapReplPlatDatastoreToReplPlatDatastore);
        }

        /// <summary>
        /// Returns true if MapReplPlatDatastoreToReplPlatDatastore instances are equal
        /// </summary>
        /// <param name="other">Instance of MapReplPlatDatastoreToReplPlatDatastore to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MapReplPlatDatastoreToReplPlatDatastore other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.Oper == other.Oper ||
                    this.Oper != null &&
                    this.Oper.Equals(other.Oper)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.Oper != null)
                    hash = hash * 59 + this.Oper.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
