/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// IpPoolSpec
    /// </summary>
    [DataContract]
    public partial class IpPoolSpec :  IEquatable<IpPoolSpec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IpPoolSpec" /> class.
        /// </summary>
        /// <param name="Name">Name - not necessarily unique., optional.</param>
        /// <param name="Description">Optional description..</param>
        /// <param name="IpRanges">IP Ranges for the pool..</param>
        /// <param name="Subnet">Subnet as p.q.r.s/&lt;number of bits&gt;.</param>
        /// <param name="Gateway">Gateway for the pool..</param>
        /// <param name="Vlanid">VLAN id of the subnet.</param>
        public IpPoolSpec(string Name = default(string), string Description = default(string), List<IpRange> IpRanges = default(List<IpRange>), string Subnet = default(string), string Gateway = default(string), int? Vlanid = default(int?))
        {
            this.Name = Name;
            this.Description = Description;
            this.IpRanges = IpRanges;
            this.Subnet = Subnet;
            this.Gateway = Gateway;
            this.Vlanid = Vlanid;
        }
        
        /// <summary>
        /// Name - not necessarily unique., optional
        /// </summary>
        /// <value>Name - not necessarily unique., optional</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Optional description.
        /// </summary>
        /// <value>Optional description.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// IP Ranges for the pool.
        /// </summary>
        /// <value>IP Ranges for the pool.</value>
        [DataMember(Name="ipRanges", EmitDefaultValue=false)]
        public List<IpRange> IpRanges { get; set; }

        /// <summary>
        /// Subnet as p.q.r.s/&lt;number of bits&gt;
        /// </summary>
        /// <value>Subnet as p.q.r.s/&lt;number of bits&gt;</value>
        [DataMember(Name="subnet", EmitDefaultValue=false)]
        public string Subnet { get; set; }

        /// <summary>
        /// Gateway for the pool.
        /// </summary>
        /// <value>Gateway for the pool.</value>
        [DataMember(Name="gateway", EmitDefaultValue=false)]
        public string Gateway { get; set; }

        /// <summary>
        /// VLAN id of the subnet
        /// </summary>
        /// <value>VLAN id of the subnet</value>
        [DataMember(Name="vlanid", EmitDefaultValue=false)]
        public int? Vlanid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IpPoolSpec {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IpRanges: ").Append(IpRanges).Append("\n");
            sb.Append("  Subnet: ").Append(Subnet).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("  Vlanid: ").Append(Vlanid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as IpPoolSpec);
        }

        /// <summary>
        /// Returns true if IpPoolSpec instances are equal
        /// </summary>
        /// <param name="other">Instance of IpPoolSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IpPoolSpec other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.IpRanges == other.IpRanges ||
                    this.IpRanges != null &&
                    this.IpRanges.SequenceEqual(other.IpRanges)
                ) && 
                (
                    this.Subnet == other.Subnet ||
                    this.Subnet != null &&
                    this.Subnet.Equals(other.Subnet)
                ) && 
                (
                    this.Gateway == other.Gateway ||
                    this.Gateway != null &&
                    this.Gateway.Equals(other.Gateway)
                ) && 
                (
                    this.Vlanid == other.Vlanid ||
                    this.Vlanid != null &&
                    this.Vlanid.Equals(other.Vlanid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.IpRanges != null)
                    hash = hash * 59 + this.IpRanges.GetHashCode();
                if (this.Subnet != null)
                    hash = hash * 59 + this.Subnet.GetHashCode();
                if (this.Gateway != null)
                    hash = hash * 59 + this.Gateway.GetHashCode();
                if (this.Vlanid != null)
                    hash = hash * 59 + this.Vlanid.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
