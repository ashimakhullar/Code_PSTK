/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReplicationPlatDatastore
    /// </summary>
    [DataContract]
    public partial class ReplicationPlatDatastore :  IEquatable<ReplicationPlatDatastore>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationPlatDatastore" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReplicationPlatDatastore() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationPlatDatastore" /> class.
        /// </summary>
        /// <param name="ClusterEr">ClusterEr (required).</param>
        /// <param name="DatastoreEr">DatastoreEr (required).</param>
        public ReplicationPlatDatastore(EntityRef ClusterEr = default(EntityRef), EntityRef DatastoreEr = default(EntityRef))
        {
            // to ensure "ClusterEr" is required (not null)
            if (ClusterEr == null)
            {
                throw new InvalidDataException("ClusterEr is a required property for ReplicationPlatDatastore and cannot be null");
            }
            else
            {
                this.ClusterEr = ClusterEr;
            }
            // to ensure "DatastoreEr" is required (not null)
            if (DatastoreEr == null)
            {
                throw new InvalidDataException("DatastoreEr is a required property for ReplicationPlatDatastore and cannot be null");
            }
            else
            {
                this.DatastoreEr = DatastoreEr;
            }
        }
        
        /// <summary>
        /// Gets or Sets ClusterEr
        /// </summary>
        [DataMember(Name="clusterEr", EmitDefaultValue=false)]
        public EntityRef ClusterEr { get; set; }

        /// <summary>
        /// Gets or Sets DatastoreEr
        /// </summary>
        [DataMember(Name="datastoreEr", EmitDefaultValue=false)]
        public EntityRef DatastoreEr { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReplicationPlatDatastore {\n");
            sb.Append("  ClusterEr: ").Append(ClusterEr).Append("\n");
            sb.Append("  DatastoreEr: ").Append(DatastoreEr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReplicationPlatDatastore);
        }

        /// <summary>
        /// Returns true if ReplicationPlatDatastore instances are equal
        /// </summary>
        /// <param name="other">Instance of ReplicationPlatDatastore to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplicationPlatDatastore other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ClusterEr == other.ClusterEr ||
                    this.ClusterEr != null &&
                    this.ClusterEr.Equals(other.ClusterEr)
                ) && 
                (
                    this.DatastoreEr == other.DatastoreEr ||
                    this.DatastoreEr != null &&
                    this.DatastoreEr.Equals(other.DatastoreEr)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ClusterEr != null)
                    hash = hash * 59 + this.ClusterEr.GetHashCode();
                if (this.DatastoreEr != null)
                    hash = hash * 59 + this.DatastoreEr.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
