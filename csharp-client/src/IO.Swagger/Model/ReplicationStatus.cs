/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReplicationStatus
    /// </summary>
    [DataContract]
    public partial class ReplicationStatus :  IEquatable<ReplicationStatus>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum SUCCESS for "SUCCESS"
            /// </summary>
            [EnumMember(Value = "SUCCESS")]
            SUCCESS,
            
            /// <summary>
            /// Enum FAILED for "FAILED"
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED,
            
            /// <summary>
            /// Enum PAUSED for "PAUSED"
            /// </summary>
            [EnumMember(Value = "PAUSED")]
            PAUSED,
            
            /// <summary>
            /// Enum INUSE for "IN_USE"
            /// </summary>
            [EnumMember(Value = "IN_USE")]
            INUSE,
            
            /// <summary>
            /// Enum STARTING for "STARTING"
            /// </summary>
            [EnumMember(Value = "STARTING")]
            STARTING,
            
            /// <summary>
            /// Enum REPLICATING for "REPLICATING"
            /// </summary>
            [EnumMember(Value = "REPLICATING")]
            REPLICATING,
            
            /// <summary>
            /// Enum NONE for "NONE"
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReplicationStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationStatus" /> class.
        /// </summary>
        /// <param name="Status">Status (required).</param>
        /// <param name="StartTime">StartTime (required).</param>
        /// <param name="EndTime">EndTime.</param>
        /// <param name="BytesReplicated">BytesReplicated (required).</param>
        /// <param name="PackEr">PackEr.</param>
        /// <param name="PctComplete">PctComplete.</param>
        /// <param name="Ex">Ex.</param>
        /// <param name="RpoStatus">RpoStatus.</param>
        public ReplicationStatus(StatusEnum? Status = default(StatusEnum?), long? StartTime = default(long?), long? EndTime = default(long?), long? BytesReplicated = default(long?), EntityRef PackEr = default(EntityRef), int? PctComplete = default(int?), ErrorStack Ex = default(ErrorStack), RpoStatus RpoStatus = default(RpoStatus))
        {
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for ReplicationStatus and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            // to ensure "StartTime" is required (not null)
            if (StartTime == null)
            {
                throw new InvalidDataException("StartTime is a required property for ReplicationStatus and cannot be null");
            }
            else
            {
                this.StartTime = StartTime;
            }
            // to ensure "BytesReplicated" is required (not null)
            if (BytesReplicated == null)
            {
                throw new InvalidDataException("BytesReplicated is a required property for ReplicationStatus and cannot be null");
            }
            else
            {
                this.BytesReplicated = BytesReplicated;
            }
            this.EndTime = EndTime;
            this.PackEr = PackEr;
            this.PctComplete = PctComplete;
            this.Ex = Ex;
            this.RpoStatus = RpoStatus;
        }
        

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public long? StartTime { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public long? EndTime { get; set; }

        /// <summary>
        /// Gets or Sets BytesReplicated
        /// </summary>
        [DataMember(Name="bytesReplicated", EmitDefaultValue=false)]
        public long? BytesReplicated { get; set; }

        /// <summary>
        /// Gets or Sets PackEr
        /// </summary>
        [DataMember(Name="packEr", EmitDefaultValue=false)]
        public EntityRef PackEr { get; set; }

        /// <summary>
        /// Gets or Sets PctComplete
        /// </summary>
        [DataMember(Name="pctComplete", EmitDefaultValue=false)]
        public int? PctComplete { get; set; }

        /// <summary>
        /// Gets or Sets Ex
        /// </summary>
        [DataMember(Name="ex", EmitDefaultValue=false)]
        public ErrorStack Ex { get; set; }

        /// <summary>
        /// Gets or Sets RpoStatus
        /// </summary>
        [DataMember(Name="rpoStatus", EmitDefaultValue=false)]
        public RpoStatus RpoStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReplicationStatus {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  BytesReplicated: ").Append(BytesReplicated).Append("\n");
            sb.Append("  PackEr: ").Append(PackEr).Append("\n");
            sb.Append("  PctComplete: ").Append(PctComplete).Append("\n");
            sb.Append("  Ex: ").Append(Ex).Append("\n");
            sb.Append("  RpoStatus: ").Append(RpoStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReplicationStatus);
        }

        /// <summary>
        /// Returns true if ReplicationStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of ReplicationStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplicationStatus other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.StartTime == other.StartTime ||
                    this.StartTime != null &&
                    this.StartTime.Equals(other.StartTime)
                ) && 
                (
                    this.EndTime == other.EndTime ||
                    this.EndTime != null &&
                    this.EndTime.Equals(other.EndTime)
                ) && 
                (
                    this.BytesReplicated == other.BytesReplicated ||
                    this.BytesReplicated != null &&
                    this.BytesReplicated.Equals(other.BytesReplicated)
                ) && 
                (
                    this.PackEr == other.PackEr ||
                    this.PackEr != null &&
                    this.PackEr.Equals(other.PackEr)
                ) && 
                (
                    this.PctComplete == other.PctComplete ||
                    this.PctComplete != null &&
                    this.PctComplete.Equals(other.PctComplete)
                ) && 
                (
                    this.Ex == other.Ex ||
                    this.Ex != null &&
                    this.Ex.Equals(other.Ex)
                ) && 
                (
                    this.RpoStatus == other.RpoStatus ||
                    this.RpoStatus != null &&
                    this.RpoStatus.Equals(other.RpoStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.StartTime != null)
                    hash = hash * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hash = hash * 59 + this.EndTime.GetHashCode();
                if (this.BytesReplicated != null)
                    hash = hash * 59 + this.BytesReplicated.GetHashCode();
                if (this.PackEr != null)
                    hash = hash * 59 + this.PackEr.GetHashCode();
                if (this.PctComplete != null)
                    hash = hash * 59 + this.PctComplete.GetHashCode();
                if (this.Ex != null)
                    hash = hash * 59 + this.Ex.GetHashCode();
                if (this.RpoStatus != null)
                    hash = hash * 59 + this.RpoStatus.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
