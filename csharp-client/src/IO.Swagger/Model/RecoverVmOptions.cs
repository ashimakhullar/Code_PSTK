/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RecoverVmOptions
    /// </summary>
    [DataContract]
    public partial class RecoverVmOptions :  IEquatable<RecoverVmOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecoverVmOptions" /> class.
        /// </summary>
        /// <param name="ResourcePoolEr">ResourcePoolEr.</param>
        /// <param name="FolderEr">FolderEr.</param>
        /// <param name="TestNetwork">Test (Bubble) network to use for test recovery. Either networkMap or testNetwork can be specified, but not both. This cannot be used for failover recovery..</param>
        /// <param name="PowerOn">Power ON the VM after recovery or not (default to false).</param>
        /// <param name="NetworkMap">Array of network mappings. Either networkMap or testNetwork can be specified, but not both..</param>
        /// <param name="NewName">New name for the test recovery VM..</param>
        public RecoverVmOptions(EntityRef ResourcePoolEr = default(EntityRef), EntityRef FolderEr = default(EntityRef), string TestNetwork = default(string), bool? PowerOn = false, List<NetworkMapping> NetworkMap = default(List<NetworkMapping>), string NewName = default(string))
        {
            this.ResourcePoolEr = ResourcePoolEr;
            this.FolderEr = FolderEr;
            this.TestNetwork = TestNetwork;
            // use default value if no "PowerOn" provided
            if (PowerOn == null)
            {
                this.PowerOn = false;
            }
            else
            {
                this.PowerOn = PowerOn;
            }
            this.NetworkMap = NetworkMap;
            this.NewName = NewName;
        }
        
        /// <summary>
        /// Gets or Sets ResourcePoolEr
        /// </summary>
        [DataMember(Name="resourcePoolEr", EmitDefaultValue=false)]
        public EntityRef ResourcePoolEr { get; set; }

        /// <summary>
        /// Gets or Sets FolderEr
        /// </summary>
        [DataMember(Name="folderEr", EmitDefaultValue=false)]
        public EntityRef FolderEr { get; set; }

        /// <summary>
        /// Test (Bubble) network to use for test recovery. Either networkMap or testNetwork can be specified, but not both. This cannot be used for failover recovery.
        /// </summary>
        /// <value>Test (Bubble) network to use for test recovery. Either networkMap or testNetwork can be specified, but not both. This cannot be used for failover recovery.</value>
        [DataMember(Name="testNetwork", EmitDefaultValue=false)]
        public string TestNetwork { get; set; }

        /// <summary>
        /// Power ON the VM after recovery or not
        /// </summary>
        /// <value>Power ON the VM after recovery or not</value>
        [DataMember(Name="powerOn", EmitDefaultValue=false)]
        public bool? PowerOn { get; set; }

        /// <summary>
        /// Array of network mappings. Either networkMap or testNetwork can be specified, but not both.
        /// </summary>
        /// <value>Array of network mappings. Either networkMap or testNetwork can be specified, but not both.</value>
        [DataMember(Name="networkMap", EmitDefaultValue=false)]
        public List<NetworkMapping> NetworkMap { get; set; }

        /// <summary>
        /// New name for the test recovery VM.
        /// </summary>
        /// <value>New name for the test recovery VM.</value>
        [DataMember(Name="newName", EmitDefaultValue=false)]
        public string NewName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecoverVmOptions {\n");
            sb.Append("  ResourcePoolEr: ").Append(ResourcePoolEr).Append("\n");
            sb.Append("  FolderEr: ").Append(FolderEr).Append("\n");
            sb.Append("  TestNetwork: ").Append(TestNetwork).Append("\n");
            sb.Append("  PowerOn: ").Append(PowerOn).Append("\n");
            sb.Append("  NetworkMap: ").Append(NetworkMap).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RecoverVmOptions);
        }

        /// <summary>
        /// Returns true if RecoverVmOptions instances are equal
        /// </summary>
        /// <param name="other">Instance of RecoverVmOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecoverVmOptions other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ResourcePoolEr == other.ResourcePoolEr ||
                    this.ResourcePoolEr != null &&
                    this.ResourcePoolEr.Equals(other.ResourcePoolEr)
                ) && 
                (
                    this.FolderEr == other.FolderEr ||
                    this.FolderEr != null &&
                    this.FolderEr.Equals(other.FolderEr)
                ) && 
                (
                    this.TestNetwork == other.TestNetwork ||
                    this.TestNetwork != null &&
                    this.TestNetwork.Equals(other.TestNetwork)
                ) && 
                (
                    this.PowerOn == other.PowerOn ||
                    this.PowerOn != null &&
                    this.PowerOn.Equals(other.PowerOn)
                ) && 
                (
                    this.NetworkMap == other.NetworkMap ||
                    this.NetworkMap != null &&
                    this.NetworkMap.SequenceEqual(other.NetworkMap)
                ) && 
                (
                    this.NewName == other.NewName ||
                    this.NewName != null &&
                    this.NewName.Equals(other.NewName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ResourcePoolEr != null)
                    hash = hash * 59 + this.ResourcePoolEr.GetHashCode();
                if (this.FolderEr != null)
                    hash = hash * 59 + this.FolderEr.GetHashCode();
                if (this.TestNetwork != null)
                    hash = hash * 59 + this.TestNetwork.GetHashCode();
                if (this.PowerOn != null)
                    hash = hash * 59 + this.PowerOn.GetHashCode();
                if (this.NetworkMap != null)
                    hash = hash * 59 + this.NetworkMap.GetHashCode();
                if (this.NewName != null)
                    hash = hash * 59 + this.NewName.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
