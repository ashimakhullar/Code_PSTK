/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Schedule for replication
    /// </summary>
    [DataContract]
    public partial class ReplicationSchedule :  IEquatable<ReplicationSchedule>, IValidatableObject
    {
        /// <summary>
        /// Snapshot quiesce type
        /// </summary>
        /// <value>Snapshot quiesce type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QuiesceTypeEnum
        {
            
            /// <summary>
            /// Enum NONE for "NONE"
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE,
            
            /// <summary>
            /// Enum CRASH for "CRASH"
            /// </summary>
            [EnumMember(Value = "CRASH")]
            CRASH,
            
            /// <summary>
            /// Enum VMTOOLS for "VMTOOLS"
            /// </summary>
            [EnumMember(Value = "VMTOOLS")]
            VMTOOLS,
            
            /// <summary>
            /// Enum APPCONSISTENT for "APP_CONSISTENT"
            /// </summary>
            [EnumMember(Value = "APP_CONSISTENT")]
            APPCONSISTENT
        }

        /// <summary>
        /// Snapshot quiesce type
        /// </summary>
        /// <value>Snapshot quiesce type</value>
        [DataMember(Name="quiesceType", EmitDefaultValue=false)]
        public QuiesceTypeEnum? QuiesceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationSchedule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReplicationSchedule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationSchedule" /> class.
        /// </summary>
        /// <param name="Enabled">Enabled (required) (default to false).</param>
        /// <param name="IntervalInMinutes">IntervalInMinutes (required).</param>
        /// <param name="StartTime">Replication start time in milliseconds.</param>
        /// <param name="QuiesceType">Snapshot quiesce type (required).</param>
        public ReplicationSchedule(bool? Enabled = false, int? IntervalInMinutes = default(int?), long? StartTime = default(long?), QuiesceTypeEnum? QuiesceType = default(QuiesceTypeEnum?))
        {
            // to ensure "Enabled" is required (not null)
            if (Enabled == null)
            {
                throw new InvalidDataException("Enabled is a required property for ReplicationSchedule and cannot be null");
            }
            else
            {
                this.Enabled = Enabled;
            }
            // to ensure "IntervalInMinutes" is required (not null)
            if (IntervalInMinutes == null)
            {
                throw new InvalidDataException("IntervalInMinutes is a required property for ReplicationSchedule and cannot be null");
            }
            else
            {
                this.IntervalInMinutes = IntervalInMinutes;
            }
            // to ensure "QuiesceType" is required (not null)
            if (QuiesceType == null)
            {
                throw new InvalidDataException("QuiesceType is a required property for ReplicationSchedule and cannot be null");
            }
            else
            {
                this.QuiesceType = QuiesceType;
            }
            this.StartTime = StartTime;
        }
        
        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or Sets IntervalInMinutes
        /// </summary>
        [DataMember(Name="intervalInMinutes", EmitDefaultValue=false)]
        public int? IntervalInMinutes { get; set; }

        /// <summary>
        /// Replication start time in milliseconds
        /// </summary>
        /// <value>Replication start time in milliseconds</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public long? StartTime { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReplicationSchedule {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  IntervalInMinutes: ").Append(IntervalInMinutes).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  QuiesceType: ").Append(QuiesceType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReplicationSchedule);
        }

        /// <summary>
        /// Returns true if ReplicationSchedule instances are equal
        /// </summary>
        /// <param name="other">Instance of ReplicationSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplicationSchedule other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Enabled == other.Enabled ||
                    this.Enabled != null &&
                    this.Enabled.Equals(other.Enabled)
                ) && 
                (
                    this.IntervalInMinutes == other.IntervalInMinutes ||
                    this.IntervalInMinutes != null &&
                    this.IntervalInMinutes.Equals(other.IntervalInMinutes)
                ) && 
                (
                    this.StartTime == other.StartTime ||
                    this.StartTime != null &&
                    this.StartTime.Equals(other.StartTime)
                ) && 
                (
                    this.QuiesceType == other.QuiesceType ||
                    this.QuiesceType != null &&
                    this.QuiesceType.Equals(other.QuiesceType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Enabled != null)
                    hash = hash * 59 + this.Enabled.GetHashCode();
                if (this.IntervalInMinutes != null)
                    hash = hash * 59 + this.IntervalInMinutes.GetHashCode();
                if (this.StartTime != null)
                    hash = hash * 59 + this.StartTime.GetHashCode();
                if (this.QuiesceType != null)
                    hash = hash * 59 + this.QuiesceType.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
