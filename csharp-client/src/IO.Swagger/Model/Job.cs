/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Job
    /// </summary>
    [DataContract]
    public partial class Job :  IEquatable<Job>, IValidatableObject
    {
        /// <summary>
        /// State of the job
        /// </summary>
        /// <value>State of the job</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum NEW for "NEW"
            /// </summary>
            [EnumMember(Value = "NEW")]
            NEW,
            
            /// <summary>
            /// Enum STARTING for "STARTING"
            /// </summary>
            [EnumMember(Value = "STARTING")]
            STARTING,
            
            /// <summary>
            /// Enum RUNNING for "RUNNING"
            /// </summary>
            [EnumMember(Value = "RUNNING")]
            RUNNING,
            
            /// <summary>
            /// Enum SUSPENDED for "SUSPENDED"
            /// </summary>
            [EnumMember(Value = "SUSPENDED")]
            SUSPENDED,
            
            /// <summary>
            /// Enum SHUTTINGDOWN for "SHUTTING_DOWN"
            /// </summary>
            [EnumMember(Value = "SHUTTING_DOWN")]
            SHUTTINGDOWN,
            
            /// <summary>
            /// Enum COMPLETED for "COMPLETED"
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED,
            
            /// <summary>
            /// Enum TERMINATED for "TERMINATED"
            /// </summary>
            [EnumMember(Value = "TERMINATED")]
            TERMINATED,
            
            /// <summary>
            /// Enum CANCELLED for "CANCELLED"
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED,
            
            /// <summary>
            /// Enum EXCEPTION for "EXCEPTION"
            /// </summary>
            [EnumMember(Value = "EXCEPTION")]
            EXCEPTION,
            
            /// <summary>
            /// Enum STALLED for "STALLED"
            /// </summary>
            [EnumMember(Value = "STALLED")]
            STALLED
        }

        /// <summary>
        /// Step state
        /// </summary>
        /// <value>Step state</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SummaryStepStateEnum
        {
            
            /// <summary>
            /// Enum NOTSTARTED for "NOTSTARTED"
            /// </summary>
            [EnumMember(Value = "NOTSTARTED")]
            NOTSTARTED,
            
            /// <summary>
            /// Enum INPROGRESS for "INPROGRESS"
            /// </summary>
            [EnumMember(Value = "INPROGRESS")]
            INPROGRESS,
            
            /// <summary>
            /// Enum SUCCEEDED for "SUCCEEDED"
            /// </summary>
            [EnumMember(Value = "SUCCEEDED")]
            SUCCEEDED,
            
            /// <summary>
            /// Enum FAILED for "FAILED"
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED
        }

        /// <summary>
        /// State of the job
        /// </summary>
        /// <value>State of the job</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Step state
        /// </summary>
        /// <value>Step state</value>
        [DataMember(Name="summaryStepState", EmitDefaultValue=false)]
        public SummaryStepStateEnum? SummaryStepState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Job" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Job() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Job" /> class.
        /// </summary>
        /// <param name="Jobid">job id (required).</param>
        /// <param name="State">State of the job (required).</param>
        /// <param name="TimeSubmittedMillis">Job submitted time (required).</param>
        /// <param name="TimeStartedMillis">Time elapsed.</param>
        /// <param name="TimeElapsedMillis">Time elapsed.</param>
        /// <param name="OutParameters">OutParameters (required).</param>
        /// <param name="JobSteps">JobSteps (required).</param>
        /// <param name="SuspendOnExit"> suspend on exit (required) (default to false).</param>
        /// <param name="MethodName">Method name (required).</param>
        /// <param name="Description">Job description.</param>
        /// <param name="Tag">Job tag.</param>
        /// <param name="Owner">Job owner.</param>
        /// <param name="Message">Job message.</param>
        /// <param name="IsCancelRequested">Cancel requested (required) (default to false).</param>
        /// <param name="IsCanceled">Job Canceled (required) (default to false).</param>
        /// <param name="PercentComplete">Percent completed.</param>
        /// <param name="LifetimeAfterExitMillis">Lifetime after exit in milliseconds (required).</param>
        /// <param name="SummaryStepState">Step state (required).</param>
        /// <param name="LcDescription">LcDescription.</param>
        /// <param name="LcMessage">LcMessage.</param>
        public Job(string Jobid = default(string), StateEnum? State = default(StateEnum?), long? TimeSubmittedMillis = default(long?), long? TimeStartedMillis = default(long?), long? TimeElapsedMillis = default(long?), List<StringToListStringMap> OutParameters = default(List<StringToListStringMap>), List<EntityRefToStepMap> JobSteps = default(List<EntityRefToStepMap>), bool? SuspendOnExit = false, string MethodName = default(string), string Description = default(string), string Tag = default(string), string Owner = default(string), string Message = default(string), bool? IsCancelRequested = false, bool? IsCanceled = false, int? PercentComplete = default(int?), long? LifetimeAfterExitMillis = default(long?), SummaryStepStateEnum? SummaryStepState = default(SummaryStepStateEnum?), LocalizableMessage LcDescription = default(LocalizableMessage), LocalizableMessage LcMessage = default(LocalizableMessage))
        {
            // to ensure "Jobid" is required (not null)
            if (Jobid == null)
            {
                throw new InvalidDataException("Jobid is a required property for Job and cannot be null");
            }
            else
            {
                this.Jobid = Jobid;
            }
            // to ensure "State" is required (not null)
            if (State == null)
            {
                throw new InvalidDataException("State is a required property for Job and cannot be null");
            }
            else
            {
                this.State = State;
            }
            // to ensure "TimeSubmittedMillis" is required (not null)
            if (TimeSubmittedMillis == null)
            {
                throw new InvalidDataException("TimeSubmittedMillis is a required property for Job and cannot be null");
            }
            else
            {
                this.TimeSubmittedMillis = TimeSubmittedMillis;
            }
            // to ensure "OutParameters" is required (not null)
            if (OutParameters == null)
            {
                throw new InvalidDataException("OutParameters is a required property for Job and cannot be null");
            }
            else
            {
                this.OutParameters = OutParameters;
            }
            // to ensure "JobSteps" is required (not null)
            if (JobSteps == null)
            {
                throw new InvalidDataException("JobSteps is a required property for Job and cannot be null");
            }
            else
            {
                this.JobSteps = JobSteps;
            }
            // to ensure "SuspendOnExit" is required (not null)
            if (SuspendOnExit == null)
            {
                throw new InvalidDataException("SuspendOnExit is a required property for Job and cannot be null");
            }
            else
            {
                this.SuspendOnExit = SuspendOnExit;
            }
            // to ensure "MethodName" is required (not null)
            if (MethodName == null)
            {
                throw new InvalidDataException("MethodName is a required property for Job and cannot be null");
            }
            else
            {
                this.MethodName = MethodName;
            }
            // to ensure "IsCancelRequested" is required (not null)
            if (IsCancelRequested == null)
            {
                throw new InvalidDataException("IsCancelRequested is a required property for Job and cannot be null");
            }
            else
            {
                this.IsCancelRequested = IsCancelRequested;
            }
            // to ensure "IsCanceled" is required (not null)
            if (IsCanceled == null)
            {
                throw new InvalidDataException("IsCanceled is a required property for Job and cannot be null");
            }
            else
            {
                this.IsCanceled = IsCanceled;
            }
            // to ensure "LifetimeAfterExitMillis" is required (not null)
            if (LifetimeAfterExitMillis == null)
            {
                throw new InvalidDataException("LifetimeAfterExitMillis is a required property for Job and cannot be null");
            }
            else
            {
                this.LifetimeAfterExitMillis = LifetimeAfterExitMillis;
            }
            // to ensure "SummaryStepState" is required (not null)
            if (SummaryStepState == null)
            {
                throw new InvalidDataException("SummaryStepState is a required property for Job and cannot be null");
            }
            else
            {
                this.SummaryStepState = SummaryStepState;
            }
            this.TimeStartedMillis = TimeStartedMillis;
            this.TimeElapsedMillis = TimeElapsedMillis;
            this.Description = Description;
            this.Tag = Tag;
            this.Owner = Owner;
            this.Message = Message;
            this.PercentComplete = PercentComplete;
            this.LcDescription = LcDescription;
            this.LcMessage = LcMessage;
        }
        
        /// <summary>
        /// job id
        /// </summary>
        /// <value>job id</value>
        [DataMember(Name="jobid", EmitDefaultValue=false)]
        public string Jobid { get; set; }


        /// <summary>
        /// Job submitted time
        /// </summary>
        /// <value>Job submitted time</value>
        [DataMember(Name="timeSubmittedMillis", EmitDefaultValue=false)]
        public long? TimeSubmittedMillis { get; set; }

        /// <summary>
        /// Time elapsed
        /// </summary>
        /// <value>Time elapsed</value>
        [DataMember(Name="timeStartedMillis", EmitDefaultValue=false)]
        public long? TimeStartedMillis { get; set; }

        /// <summary>
        /// Time elapsed
        /// </summary>
        /// <value>Time elapsed</value>
        [DataMember(Name="timeElapsedMillis", EmitDefaultValue=false)]
        public long? TimeElapsedMillis { get; set; }

        /// <summary>
        /// Gets or Sets OutParameters
        /// </summary>
        [DataMember(Name="outParameters", EmitDefaultValue=false)]
        public List<StringToListStringMap> OutParameters { get; set; }

        /// <summary>
        /// Gets or Sets JobSteps
        /// </summary>
        [DataMember(Name="jobSteps", EmitDefaultValue=false)]
        public List<EntityRefToStepMap> JobSteps { get; set; }

        /// <summary>
        ///  suspend on exit
        /// </summary>
        /// <value> suspend on exit</value>
        [DataMember(Name="suspendOnExit", EmitDefaultValue=false)]
        public bool? SuspendOnExit { get; set; }

        /// <summary>
        /// Method name
        /// </summary>
        /// <value>Method name</value>
        [DataMember(Name="methodName", EmitDefaultValue=false)]
        public string MethodName { get; set; }

        /// <summary>
        /// Job description
        /// </summary>
        /// <value>Job description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Job tag
        /// </summary>
        /// <value>Job tag</value>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// Job owner
        /// </summary>
        /// <value>Job owner</value>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public string Owner { get; set; }

        /// <summary>
        /// Job message
        /// </summary>
        /// <value>Job message</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Cancel requested
        /// </summary>
        /// <value>Cancel requested</value>
        [DataMember(Name="isCancelRequested", EmitDefaultValue=false)]
        public bool? IsCancelRequested { get; set; }

        /// <summary>
        /// Job Canceled
        /// </summary>
        /// <value>Job Canceled</value>
        [DataMember(Name="isCanceled", EmitDefaultValue=false)]
        public bool? IsCanceled { get; set; }

        /// <summary>
        /// Percent completed
        /// </summary>
        /// <value>Percent completed</value>
        [DataMember(Name="percentComplete", EmitDefaultValue=false)]
        public int? PercentComplete { get; set; }

        /// <summary>
        /// Lifetime after exit in milliseconds
        /// </summary>
        /// <value>Lifetime after exit in milliseconds</value>
        [DataMember(Name="lifetimeAfterExitMillis", EmitDefaultValue=false)]
        public long? LifetimeAfterExitMillis { get; set; }


        /// <summary>
        /// Gets or Sets LcDescription
        /// </summary>
        [DataMember(Name="lcDescription", EmitDefaultValue=false)]
        public LocalizableMessage LcDescription { get; set; }

        /// <summary>
        /// Gets or Sets LcMessage
        /// </summary>
        [DataMember(Name="lcMessage", EmitDefaultValue=false)]
        public LocalizableMessage LcMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Job {\n");
            sb.Append("  Jobid: ").Append(Jobid).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TimeSubmittedMillis: ").Append(TimeSubmittedMillis).Append("\n");
            sb.Append("  TimeStartedMillis: ").Append(TimeStartedMillis).Append("\n");
            sb.Append("  TimeElapsedMillis: ").Append(TimeElapsedMillis).Append("\n");
            sb.Append("  OutParameters: ").Append(OutParameters).Append("\n");
            sb.Append("  JobSteps: ").Append(JobSteps).Append("\n");
            sb.Append("  SuspendOnExit: ").Append(SuspendOnExit).Append("\n");
            sb.Append("  MethodName: ").Append(MethodName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  IsCancelRequested: ").Append(IsCancelRequested).Append("\n");
            sb.Append("  IsCanceled: ").Append(IsCanceled).Append("\n");
            sb.Append("  PercentComplete: ").Append(PercentComplete).Append("\n");
            sb.Append("  LifetimeAfterExitMillis: ").Append(LifetimeAfterExitMillis).Append("\n");
            sb.Append("  SummaryStepState: ").Append(SummaryStepState).Append("\n");
            sb.Append("  LcDescription: ").Append(LcDescription).Append("\n");
            sb.Append("  LcMessage: ").Append(LcMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Job);
        }

        /// <summary>
        /// Returns true if Job instances are equal
        /// </summary>
        /// <param name="other">Instance of Job to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Job other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Jobid == other.Jobid ||
                    this.Jobid != null &&
                    this.Jobid.Equals(other.Jobid)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.TimeSubmittedMillis == other.TimeSubmittedMillis ||
                    this.TimeSubmittedMillis != null &&
                    this.TimeSubmittedMillis.Equals(other.TimeSubmittedMillis)
                ) && 
                (
                    this.TimeStartedMillis == other.TimeStartedMillis ||
                    this.TimeStartedMillis != null &&
                    this.TimeStartedMillis.Equals(other.TimeStartedMillis)
                ) && 
                (
                    this.TimeElapsedMillis == other.TimeElapsedMillis ||
                    this.TimeElapsedMillis != null &&
                    this.TimeElapsedMillis.Equals(other.TimeElapsedMillis)
                ) && 
                (
                    this.OutParameters == other.OutParameters ||
                    this.OutParameters != null &&
                    this.OutParameters.SequenceEqual(other.OutParameters)
                ) && 
                (
                    this.JobSteps == other.JobSteps ||
                    this.JobSteps != null &&
                    this.JobSteps.SequenceEqual(other.JobSteps)
                ) && 
                (
                    this.SuspendOnExit == other.SuspendOnExit ||
                    this.SuspendOnExit != null &&
                    this.SuspendOnExit.Equals(other.SuspendOnExit)
                ) && 
                (
                    this.MethodName == other.MethodName ||
                    this.MethodName != null &&
                    this.MethodName.Equals(other.MethodName)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Tag == other.Tag ||
                    this.Tag != null &&
                    this.Tag.Equals(other.Tag)
                ) && 
                (
                    this.Owner == other.Owner ||
                    this.Owner != null &&
                    this.Owner.Equals(other.Owner)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.IsCancelRequested == other.IsCancelRequested ||
                    this.IsCancelRequested != null &&
                    this.IsCancelRequested.Equals(other.IsCancelRequested)
                ) && 
                (
                    this.IsCanceled == other.IsCanceled ||
                    this.IsCanceled != null &&
                    this.IsCanceled.Equals(other.IsCanceled)
                ) && 
                (
                    this.PercentComplete == other.PercentComplete ||
                    this.PercentComplete != null &&
                    this.PercentComplete.Equals(other.PercentComplete)
                ) && 
                (
                    this.LifetimeAfterExitMillis == other.LifetimeAfterExitMillis ||
                    this.LifetimeAfterExitMillis != null &&
                    this.LifetimeAfterExitMillis.Equals(other.LifetimeAfterExitMillis)
                ) && 
                (
                    this.SummaryStepState == other.SummaryStepState ||
                    this.SummaryStepState != null &&
                    this.SummaryStepState.Equals(other.SummaryStepState)
                ) && 
                (
                    this.LcDescription == other.LcDescription ||
                    this.LcDescription != null &&
                    this.LcDescription.Equals(other.LcDescription)
                ) && 
                (
                    this.LcMessage == other.LcMessage ||
                    this.LcMessage != null &&
                    this.LcMessage.Equals(other.LcMessage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Jobid != null)
                    hash = hash * 59 + this.Jobid.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.TimeSubmittedMillis != null)
                    hash = hash * 59 + this.TimeSubmittedMillis.GetHashCode();
                if (this.TimeStartedMillis != null)
                    hash = hash * 59 + this.TimeStartedMillis.GetHashCode();
                if (this.TimeElapsedMillis != null)
                    hash = hash * 59 + this.TimeElapsedMillis.GetHashCode();
                if (this.OutParameters != null)
                    hash = hash * 59 + this.OutParameters.GetHashCode();
                if (this.JobSteps != null)
                    hash = hash * 59 + this.JobSteps.GetHashCode();
                if (this.SuspendOnExit != null)
                    hash = hash * 59 + this.SuspendOnExit.GetHashCode();
                if (this.MethodName != null)
                    hash = hash * 59 + this.MethodName.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Tag != null)
                    hash = hash * 59 + this.Tag.GetHashCode();
                if (this.Owner != null)
                    hash = hash * 59 + this.Owner.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.IsCancelRequested != null)
                    hash = hash * 59 + this.IsCancelRequested.GetHashCode();
                if (this.IsCanceled != null)
                    hash = hash * 59 + this.IsCanceled.GetHashCode();
                if (this.PercentComplete != null)
                    hash = hash * 59 + this.PercentComplete.GetHashCode();
                if (this.LifetimeAfterExitMillis != null)
                    hash = hash * 59 + this.LifetimeAfterExitMillis.GetHashCode();
                if (this.SummaryStepState != null)
                    hash = hash * 59 + this.SummaryStepState.GetHashCode();
                if (this.LcDescription != null)
                    hash = hash * 59 + this.LcDescription.GetHashCode();
                if (this.LcMessage != null)
                    hash = hash * 59 + this.LcMessage.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
