/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// EntityRef
    /// </summary>
    [DataContract]
    public partial class EntityRef :  IEquatable<EntityRef>, IValidatableObject
    {
        /// <summary>
        /// Type of the entity
        /// </summary>
        /// <value>Type of the entity</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum DISK for "DISK"
            /// </summary>
            [EnumMember(Value = "DISK")]
            DISK,
            
            /// <summary>
            /// Enum PNODE for "PNODE"
            /// </summary>
            [EnumMember(Value = "PNODE")]
            PNODE,
            
            /// <summary>
            /// Enum NODE for "NODE"
            /// </summary>
            [EnumMember(Value = "NODE")]
            NODE,
            
            /// <summary>
            /// Enum CLUSTER for "CLUSTER"
            /// </summary>
            [EnumMember(Value = "CLUSTER")]
            CLUSTER,
            
            /// <summary>
            /// Enum DATASTORE for "DATASTORE"
            /// </summary>
            [EnumMember(Value = "DATASTORE")]
            DATASTORE,
            
            /// <summary>
            /// Enum VIRTNODE for "VIRTNODE"
            /// </summary>
            [EnumMember(Value = "VIRTNODE")]
            VIRTNODE,
            
            /// <summary>
            /// Enum VIRTCLUSTER for "VIRTCLUSTER"
            /// </summary>
            [EnumMember(Value = "VIRTCLUSTER")]
            VIRTCLUSTER,
            
            /// <summary>
            /// Enum VIRTDATASTORE for "VIRTDATASTORE"
            /// </summary>
            [EnumMember(Value = "VIRTDATASTORE")]
            VIRTDATASTORE,
            
            /// <summary>
            /// Enum VIRTMACHINE for "VIRTMACHINE"
            /// </summary>
            [EnumMember(Value = "VIRTMACHINE")]
            VIRTMACHINE,
            
            /// <summary>
            /// Enum PDISK for "PDISK"
            /// </summary>
            [EnumMember(Value = "PDISK")]
            PDISK,
            
            /// <summary>
            /// Enum PDATASTORE for "PDATASTORE"
            /// </summary>
            [EnumMember(Value = "PDATASTORE")]
            PDATASTORE,
            
            /// <summary>
            /// Enum VIRTMACHINESNAPSHOT for "VIRTMACHINESNAPSHOT"
            /// </summary>
            [EnumMember(Value = "VIRTMACHINESNAPSHOT")]
            VIRTMACHINESNAPSHOT,
            
            /// <summary>
            /// Enum FOLDER for "FOLDER"
            /// </summary>
            [EnumMember(Value = "FOLDER")]
            FOLDER,
            
            /// <summary>
            /// Enum RESOURCEPOOL for "RESOURCEPOOL"
            /// </summary>
            [EnumMember(Value = "RESOURCEPOOL")]
            RESOURCEPOOL,
            
            /// <summary>
            /// Enum FILE for "FILE"
            /// </summary>
            [EnumMember(Value = "FILE")]
            FILE,
            
            /// <summary>
            /// Enum VIRTDATACENTER for "VIRTDATACENTER"
            /// </summary>
            [EnumMember(Value = "VIRTDATACENTER")]
            VIRTDATACENTER,
            
            /// <summary>
            /// Enum REPLICATIONAPPLIANCE for "REPLICATION_APPLIANCE"
            /// </summary>
            [EnumMember(Value = "REPLICATION_APPLIANCE")]
            REPLICATIONAPPLIANCE,
            
            /// <summary>
            /// Enum REPLICATIONJOB for "REPLICATION_JOB"
            /// </summary>
            [EnumMember(Value = "REPLICATION_JOB")]
            REPLICATIONJOB,
            
            /// <summary>
            /// Enum IPPOOL for "IP_POOL"
            /// </summary>
            [EnumMember(Value = "IP_POOL")]
            IPPOOL,
            
            /// <summary>
            /// Enum DPVMSNAPSHOT for "DP_VM_SNAPSHOT"
            /// </summary>
            [EnumMember(Value = "DP_VM_SNAPSHOT")]
            DPVMSNAPSHOT,
            
            /// <summary>
            /// Enum DPVMGROUPSNAPSHOT for "DP_VMGROUP_SNAPSHOT"
            /// </summary>
            [EnumMember(Value = "DP_VMGROUP_SNAPSHOT")]
            DPVMGROUPSNAPSHOT,
            
            /// <summary>
            /// Enum DPVM for "DP_VM"
            /// </summary>
            [EnumMember(Value = "DP_VM")]
            DPVM,
            
            /// <summary>
            /// Enum DPVMGROUP for "DP_VMGROUP"
            /// </summary>
            [EnumMember(Value = "DP_VMGROUP")]
            DPVMGROUP,
            
            /// <summary>
            /// Enum DPVMCONFIG for "DP_VM_CONFIG"
            /// </summary>
            [EnumMember(Value = "DP_VM_CONFIG")]
            DPVMCONFIG,
            
            /// <summary>
            /// Enum DPVMSNAPSHOTPOINT for "DP_VM_SNAPSHOT_POINT"
            /// </summary>
            [EnumMember(Value = "DP_VM_SNAPSHOT_POINT")]
            DPVMSNAPSHOTPOINT,
            
            /// <summary>
            /// Enum CLUSTERPAIR for "CLUSTER_PAIR"
            /// </summary>
            [EnumMember(Value = "CLUSTER_PAIR")]
            CLUSTERPAIR
        }

        /// <summary>
        /// Type of entity id
        /// </summary>
        /// <value>Type of entity id</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IdtypeEnum
        {
            
            /// <summary>
            /// Enum VCMOID for "VCMOID"
            /// </summary>
            [EnumMember(Value = "VCMOID")]
            VCMOID,
            
            /// <summary>
            /// Enum VMBIOSUUID for "VMBIOSUUID"
            /// </summary>
            [EnumMember(Value = "VMBIOSUUID")]
            VMBIOSUUID,
            
            /// <summary>
            /// Enum VMDSPATH for "VMDSPATH"
            /// </summary>
            [EnumMember(Value = "VMDSPATH")]
            VMDSPATH
        }

        /// <summary>
        /// Type of the entity
        /// </summary>
        /// <value>Type of the entity</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Type of entity id
        /// </summary>
        /// <value>Type of entity id</value>
        [DataMember(Name="idtype", EmitDefaultValue=false)]
        public IdtypeEnum? Idtype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityRef" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EntityRef() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityRef" /> class.
        /// </summary>
        /// <param name="Name">Name of the entity.</param>
        /// <param name="Type">Type of the entity (required).</param>
        /// <param name="Id">Uuid of the entity (required).</param>
        /// <param name="Idtype">Type of entity id.</param>
        /// <param name="Confignum">Config number.</param>
        public EntityRef(string Name = default(string), TypeEnum? Type = default(TypeEnum?), string Id = default(string), IdtypeEnum? Idtype = default(IdtypeEnum?), long? Confignum = default(long?))
        {
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for EntityRef and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for EntityRef and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            this.Name = Name;
            this.Idtype = Idtype;
            this.Confignum = Confignum;
        }
        
        /// <summary>
        /// Name of the entity
        /// </summary>
        /// <value>Name of the entity</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Uuid of the entity
        /// </summary>
        /// <value>Uuid of the entity</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Config number
        /// </summary>
        /// <value>Config number</value>
        [DataMember(Name="confignum", EmitDefaultValue=false)]
        public long? Confignum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntityRef {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Idtype: ").Append(Idtype).Append("\n");
            sb.Append("  Confignum: ").Append(Confignum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EntityRef);
        }

        /// <summary>
        /// Returns true if EntityRef instances are equal
        /// </summary>
        /// <param name="other">Instance of EntityRef to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntityRef other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Idtype == other.Idtype ||
                    this.Idtype != null &&
                    this.Idtype.Equals(other.Idtype)
                ) && 
                (
                    this.Confignum == other.Confignum ||
                    this.Confignum != null &&
                    this.Confignum.Equals(other.Confignum)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Idtype != null)
                    hash = hash * 59 + this.Idtype.GetHashCode();
                if (this.Confignum != null)
                    hash = hash * 59 + this.Confignum.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
