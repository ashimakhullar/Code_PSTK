/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// IpPoolInfo
    /// </summary>
    [DataContract]
    public partial class IpPoolInfo :  IEquatable<IpPoolInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IpPoolInfo" /> class.
        /// </summary>
        /// <param name="Name">Name - not necessarily unique..</param>
        /// <param name="Uuid">Pool Identitifer..</param>
        /// <param name="Description">Optional description..</param>
        /// <param name="IpRanges">IP Ranges for the pool..</param>
        /// <param name="UsedIpRanges">Currently used IP Ranges in the pool..</param>
        /// <param name="Subnet">Subnet as p.q.r.s/&lt;number of bits&gt;, can&#39;t be changed once set.</param>
        /// <param name="Gateway">Gateway for the pool..</param>
        public IpPoolInfo(string Name = default(string), string Uuid = default(string), string Description = default(string), List<IpRange> IpRanges = default(List<IpRange>), List<IpRange> UsedIpRanges = default(List<IpRange>), string Subnet = default(string), string Gateway = default(string))
        {
            this.Name = Name;
            this.Uuid = Uuid;
            this.Description = Description;
            this.IpRanges = IpRanges;
            this.UsedIpRanges = UsedIpRanges;
            this.Subnet = Subnet;
            this.Gateway = Gateway;
        }
        
        /// <summary>
        /// Name - not necessarily unique.
        /// </summary>
        /// <value>Name - not necessarily unique.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Pool Identitifer.
        /// </summary>
        /// <value>Pool Identitifer.</value>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }

        /// <summary>
        /// Optional description.
        /// </summary>
        /// <value>Optional description.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// IP Ranges for the pool.
        /// </summary>
        /// <value>IP Ranges for the pool.</value>
        [DataMember(Name="ipRanges", EmitDefaultValue=false)]
        public List<IpRange> IpRanges { get; set; }

        /// <summary>
        /// Currently used IP Ranges in the pool.
        /// </summary>
        /// <value>Currently used IP Ranges in the pool.</value>
        [DataMember(Name="usedIpRanges", EmitDefaultValue=false)]
        public List<IpRange> UsedIpRanges { get; set; }

        /// <summary>
        /// Subnet as p.q.r.s/&lt;number of bits&gt;, can&#39;t be changed once set
        /// </summary>
        /// <value>Subnet as p.q.r.s/&lt;number of bits&gt;, can&#39;t be changed once set</value>
        [DataMember(Name="subnet", EmitDefaultValue=false)]
        public string Subnet { get; set; }

        /// <summary>
        /// Gateway for the pool.
        /// </summary>
        /// <value>Gateway for the pool.</value>
        [DataMember(Name="gateway", EmitDefaultValue=false)]
        public string Gateway { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IpPoolInfo {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IpRanges: ").Append(IpRanges).Append("\n");
            sb.Append("  UsedIpRanges: ").Append(UsedIpRanges).Append("\n");
            sb.Append("  Subnet: ").Append(Subnet).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as IpPoolInfo);
        }

        /// <summary>
        /// Returns true if IpPoolInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of IpPoolInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IpPoolInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Uuid == other.Uuid ||
                    this.Uuid != null &&
                    this.Uuid.Equals(other.Uuid)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.IpRanges == other.IpRanges ||
                    this.IpRanges != null &&
                    this.IpRanges.SequenceEqual(other.IpRanges)
                ) && 
                (
                    this.UsedIpRanges == other.UsedIpRanges ||
                    this.UsedIpRanges != null &&
                    this.UsedIpRanges.SequenceEqual(other.UsedIpRanges)
                ) && 
                (
                    this.Subnet == other.Subnet ||
                    this.Subnet != null &&
                    this.Subnet.Equals(other.Subnet)
                ) && 
                (
                    this.Gateway == other.Gateway ||
                    this.Gateway != null &&
                    this.Gateway.Equals(other.Gateway)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Uuid != null)
                    hash = hash * 59 + this.Uuid.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.IpRanges != null)
                    hash = hash * 59 + this.IpRanges.GetHashCode();
                if (this.UsedIpRanges != null)
                    hash = hash * 59 + this.UsedIpRanges.GetHashCode();
                if (this.Subnet != null)
                    hash = hash * 59 + this.Subnet.GetHashCode();
                if (this.Gateway != null)
                    hash = hash * 59 + this.Gateway.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
