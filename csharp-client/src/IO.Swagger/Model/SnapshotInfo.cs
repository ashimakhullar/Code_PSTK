/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Storage Snapshot, as opposed to Hypervisor Snapshot
    /// </summary>
    [DataContract]
    public partial class SnapshotInfo :  IEquatable<SnapshotInfo>, IValidatableObject
    {
        /// <summary>
        /// site role
        /// </summary>
        /// <value>site role</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SiteEnum
        {
            
            /// <summary>
            /// Enum PRIMARY for "PRIMARY"
            /// </summary>
            [EnumMember(Value = "PRIMARY")]
            PRIMARY,
            
            /// <summary>
            /// Enum SECONDARY for "SECONDARY"
            /// </summary>
            [EnumMember(Value = "SECONDARY")]
            SECONDARY
        }

        /// <summary>
        /// site role
        /// </summary>
        /// <value>site role</value>
        [DataMember(Name="site", EmitDefaultValue=false)]
        public SiteEnum? Site { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SnapshotInfo" /> class.
        /// </summary>
        /// <param name="VmClusterName"> Name of the Cluster.</param>
        /// <param name="Site">site role.</param>
        /// <param name="VmSnapshotEr"> EntityRef of this VmSnapshot.</param>
        /// <param name="VmSnapshotStatus"> Status for this Snapshot Point.</param>
        /// <param name="VmReplicationStatus"> Status for this Snapshot Point Replication.</param>
        /// <param name="VmInfo">Virtual machine BIOS uuid, moid and vmx path with optional StVirtualMachineInfo details.</param>
        public SnapshotInfo(string VmClusterName = default(string), SiteEnum? Site = default(SiteEnum?), EntityRef VmSnapshotEr = default(EntityRef), SnapshotStatus VmSnapshotStatus = default(SnapshotStatus), ReplicationStatus VmReplicationStatus = default(ReplicationStatus), VirtualMachine VmInfo = default(VirtualMachine))
        {
            this.VmClusterName = VmClusterName;
            this.Site = Site;
            this.VmSnapshotEr = VmSnapshotEr;
            this.VmSnapshotStatus = VmSnapshotStatus;
            this.VmReplicationStatus = VmReplicationStatus;
            this.VmInfo = VmInfo;
        }
        
        /// <summary>
        ///  Name of the Cluster
        /// </summary>
        /// <value> Name of the Cluster</value>
        [DataMember(Name="vmClusterName", EmitDefaultValue=false)]
        public string VmClusterName { get; set; }


        /// <summary>
        ///  EntityRef of this VmSnapshot
        /// </summary>
        /// <value> EntityRef of this VmSnapshot</value>
        [DataMember(Name="vmSnapshotEr", EmitDefaultValue=false)]
        public EntityRef VmSnapshotEr { get; set; }

        /// <summary>
        ///  Status for this Snapshot Point
        /// </summary>
        /// <value> Status for this Snapshot Point</value>
        [DataMember(Name="vmSnapshotStatus", EmitDefaultValue=false)]
        public SnapshotStatus VmSnapshotStatus { get; set; }

        /// <summary>
        ///  Status for this Snapshot Point Replication
        /// </summary>
        /// <value> Status for this Snapshot Point Replication</value>
        [DataMember(Name="vmReplicationStatus", EmitDefaultValue=false)]
        public ReplicationStatus VmReplicationStatus { get; set; }

        /// <summary>
        /// Virtual machine BIOS uuid, moid and vmx path with optional StVirtualMachineInfo details
        /// </summary>
        /// <value>Virtual machine BIOS uuid, moid and vmx path with optional StVirtualMachineInfo details</value>
        [DataMember(Name="vmInfo", EmitDefaultValue=false)]
        public VirtualMachine VmInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SnapshotInfo {\n");
            sb.Append("  VmClusterName: ").Append(VmClusterName).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  VmSnapshotEr: ").Append(VmSnapshotEr).Append("\n");
            sb.Append("  VmSnapshotStatus: ").Append(VmSnapshotStatus).Append("\n");
            sb.Append("  VmReplicationStatus: ").Append(VmReplicationStatus).Append("\n");
            sb.Append("  VmInfo: ").Append(VmInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SnapshotInfo);
        }

        /// <summary>
        /// Returns true if SnapshotInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of SnapshotInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SnapshotInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.VmClusterName == other.VmClusterName ||
                    this.VmClusterName != null &&
                    this.VmClusterName.Equals(other.VmClusterName)
                ) && 
                (
                    this.Site == other.Site ||
                    this.Site != null &&
                    this.Site.Equals(other.Site)
                ) && 
                (
                    this.VmSnapshotEr == other.VmSnapshotEr ||
                    this.VmSnapshotEr != null &&
                    this.VmSnapshotEr.Equals(other.VmSnapshotEr)
                ) && 
                (
                    this.VmSnapshotStatus == other.VmSnapshotStatus ||
                    this.VmSnapshotStatus != null &&
                    this.VmSnapshotStatus.Equals(other.VmSnapshotStatus)
                ) && 
                (
                    this.VmReplicationStatus == other.VmReplicationStatus ||
                    this.VmReplicationStatus != null &&
                    this.VmReplicationStatus.Equals(other.VmReplicationStatus)
                ) && 
                (
                    this.VmInfo == other.VmInfo ||
                    this.VmInfo != null &&
                    this.VmInfo.Equals(other.VmInfo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.VmClusterName != null)
                    hash = hash * 59 + this.VmClusterName.GetHashCode();
                if (this.Site != null)
                    hash = hash * 59 + this.Site.GetHashCode();
                if (this.VmSnapshotEr != null)
                    hash = hash * 59 + this.VmSnapshotEr.GetHashCode();
                if (this.VmSnapshotStatus != null)
                    hash = hash * 59 + this.VmSnapshotStatus.GetHashCode();
                if (this.VmReplicationStatus != null)
                    hash = hash * 59 + this.VmReplicationStatus.GetHashCode();
                if (this.VmInfo != null)
                    hash = hash * 59 + this.VmInfo.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
