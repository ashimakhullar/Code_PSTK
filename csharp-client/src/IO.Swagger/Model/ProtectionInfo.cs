/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ProtectionInfo
    /// </summary>
    [DataContract]
    public partial class ProtectionInfo :  IEquatable<ProtectionInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProtectionInfo" /> class.
        /// </summary>
        /// <param name="VmCurrentProtectionInfo">Current Protection Info (Snapshot Status + Replication + Vm Info).</param>
        /// <param name="VmLastSuccessfulProtectionInfo">Last Successful Protection Info ((Snapshot Status + Replication + Vm Info).</param>
        /// <param name="VmSpaceUsage">Protection Space Usage.</param>
        public ProtectionInfo(SnapshotInfo VmCurrentProtectionInfo = default(SnapshotInfo), SnapshotInfo VmLastSuccessfulProtectionInfo = default(SnapshotInfo), VmProtectionSpaceUsage VmSpaceUsage = default(VmProtectionSpaceUsage))
        {
            this.VmCurrentProtectionInfo = VmCurrentProtectionInfo;
            this.VmLastSuccessfulProtectionInfo = VmLastSuccessfulProtectionInfo;
            this.VmSpaceUsage = VmSpaceUsage;
        }
        
        /// <summary>
        /// Current Protection Info (Snapshot Status + Replication + Vm Info)
        /// </summary>
        /// <value>Current Protection Info (Snapshot Status + Replication + Vm Info)</value>
        [DataMember(Name="vmCurrentProtectionInfo", EmitDefaultValue=false)]
        public SnapshotInfo VmCurrentProtectionInfo { get; set; }

        /// <summary>
        /// Last Successful Protection Info ((Snapshot Status + Replication + Vm Info)
        /// </summary>
        /// <value>Last Successful Protection Info ((Snapshot Status + Replication + Vm Info)</value>
        [DataMember(Name="vmLastSuccessfulProtectionInfo", EmitDefaultValue=false)]
        public SnapshotInfo VmLastSuccessfulProtectionInfo { get; set; }

        /// <summary>
        /// Protection Space Usage
        /// </summary>
        /// <value>Protection Space Usage</value>
        [DataMember(Name="vmSpaceUsage", EmitDefaultValue=false)]
        public VmProtectionSpaceUsage VmSpaceUsage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProtectionInfo {\n");
            sb.Append("  VmCurrentProtectionInfo: ").Append(VmCurrentProtectionInfo).Append("\n");
            sb.Append("  VmLastSuccessfulProtectionInfo: ").Append(VmLastSuccessfulProtectionInfo).Append("\n");
            sb.Append("  VmSpaceUsage: ").Append(VmSpaceUsage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ProtectionInfo);
        }

        /// <summary>
        /// Returns true if ProtectionInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ProtectionInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProtectionInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.VmCurrentProtectionInfo == other.VmCurrentProtectionInfo ||
                    this.VmCurrentProtectionInfo != null &&
                    this.VmCurrentProtectionInfo.Equals(other.VmCurrentProtectionInfo)
                ) && 
                (
                    this.VmLastSuccessfulProtectionInfo == other.VmLastSuccessfulProtectionInfo ||
                    this.VmLastSuccessfulProtectionInfo != null &&
                    this.VmLastSuccessfulProtectionInfo.Equals(other.VmLastSuccessfulProtectionInfo)
                ) && 
                (
                    this.VmSpaceUsage == other.VmSpaceUsage ||
                    this.VmSpaceUsage != null &&
                    this.VmSpaceUsage.Equals(other.VmSpaceUsage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.VmCurrentProtectionInfo != null)
                    hash = hash * 59 + this.VmCurrentProtectionInfo.GetHashCode();
                if (this.VmLastSuccessfulProtectionInfo != null)
                    hash = hash * 59 + this.VmLastSuccessfulProtectionInfo.GetHashCode();
                if (this.VmSpaceUsage != null)
                    hash = hash * 59 + this.VmSpaceUsage.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
