/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReplicationNetwork
    /// </summary>
    [DataContract]
    public partial class ReplicationNetwork :  IEquatable<ReplicationNetwork>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationNetwork" /> class.
        /// </summary>
        /// <param name="NetworkName">Name of the network/portgroup..</param>
        /// <param name="Subnet">Subnet in p.q.r.s notation..</param>
        /// <param name="IpRanges">Ranges of the IP Addresses..</param>
        /// <param name="Gateway">Gateway..</param>
        /// <param name="Vlanid">VLAN id.</param>
        /// <param name="Bandwidth">Cluster wide send side bandwidth..</param>
        /// <param name="UnusedIps">Unused Ips from IpPools.</param>
        /// <param name="UsedIps">Used Ips from IpPools.</param>
        /// <param name="VlanReplication">VlanReplication.</param>
        public ReplicationNetwork(string NetworkName = default(string), string Subnet = default(string), List<IpRange> IpRanges = default(List<IpRange>), string Gateway = default(string), int? Vlanid = default(int?), long? Bandwidth = default(long?), int? UnusedIps = default(int?), int? UsedIps = default(int?), VlanReplication VlanReplication = default(VlanReplication))
        {
            this.NetworkName = NetworkName;
            this.Subnet = Subnet;
            this.IpRanges = IpRanges;
            this.Gateway = Gateway;
            this.Vlanid = Vlanid;
            this.Bandwidth = Bandwidth;
            this.UnusedIps = UnusedIps;
            this.UsedIps = UsedIps;
            this.VlanReplication = VlanReplication;
        }
        
        /// <summary>
        /// Name of the network/portgroup.
        /// </summary>
        /// <value>Name of the network/portgroup.</value>
        [DataMember(Name="networkName", EmitDefaultValue=false)]
        public string NetworkName { get; set; }

        /// <summary>
        /// Subnet in p.q.r.s notation.
        /// </summary>
        /// <value>Subnet in p.q.r.s notation.</value>
        [DataMember(Name="subnet", EmitDefaultValue=false)]
        public string Subnet { get; set; }

        /// <summary>
        /// Ranges of the IP Addresses.
        /// </summary>
        /// <value>Ranges of the IP Addresses.</value>
        [DataMember(Name="ipRanges", EmitDefaultValue=false)]
        public List<IpRange> IpRanges { get; set; }

        /// <summary>
        /// Gateway.
        /// </summary>
        /// <value>Gateway.</value>
        [DataMember(Name="gateway", EmitDefaultValue=false)]
        public string Gateway { get; set; }

        /// <summary>
        /// VLAN id
        /// </summary>
        /// <value>VLAN id</value>
        [DataMember(Name="vlanid", EmitDefaultValue=false)]
        public int? Vlanid { get; set; }

        /// <summary>
        /// Cluster wide send side bandwidth.
        /// </summary>
        /// <value>Cluster wide send side bandwidth.</value>
        [DataMember(Name="bandwidth", EmitDefaultValue=false)]
        public long? Bandwidth { get; set; }

        /// <summary>
        /// Unused Ips from IpPools
        /// </summary>
        /// <value>Unused Ips from IpPools</value>
        [DataMember(Name="unusedIps", EmitDefaultValue=false)]
        public int? UnusedIps { get; set; }

        /// <summary>
        /// Used Ips from IpPools
        /// </summary>
        /// <value>Used Ips from IpPools</value>
        [DataMember(Name="usedIps", EmitDefaultValue=false)]
        public int? UsedIps { get; set; }

        /// <summary>
        /// Gets or Sets VlanReplication
        /// </summary>
        [DataMember(Name="vlanReplication", EmitDefaultValue=false)]
        public VlanReplication VlanReplication { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReplicationNetwork {\n");
            sb.Append("  NetworkName: ").Append(NetworkName).Append("\n");
            sb.Append("  Subnet: ").Append(Subnet).Append("\n");
            sb.Append("  IpRanges: ").Append(IpRanges).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("  Vlanid: ").Append(Vlanid).Append("\n");
            sb.Append("  Bandwidth: ").Append(Bandwidth).Append("\n");
            sb.Append("  UnusedIps: ").Append(UnusedIps).Append("\n");
            sb.Append("  UsedIps: ").Append(UsedIps).Append("\n");
            sb.Append("  VlanReplication: ").Append(VlanReplication).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReplicationNetwork);
        }

        /// <summary>
        /// Returns true if ReplicationNetwork instances are equal
        /// </summary>
        /// <param name="other">Instance of ReplicationNetwork to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplicationNetwork other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.NetworkName == other.NetworkName ||
                    this.NetworkName != null &&
                    this.NetworkName.Equals(other.NetworkName)
                ) && 
                (
                    this.Subnet == other.Subnet ||
                    this.Subnet != null &&
                    this.Subnet.Equals(other.Subnet)
                ) && 
                (
                    this.IpRanges == other.IpRanges ||
                    this.IpRanges != null &&
                    this.IpRanges.SequenceEqual(other.IpRanges)
                ) && 
                (
                    this.Gateway == other.Gateway ||
                    this.Gateway != null &&
                    this.Gateway.Equals(other.Gateway)
                ) && 
                (
                    this.Vlanid == other.Vlanid ||
                    this.Vlanid != null &&
                    this.Vlanid.Equals(other.Vlanid)
                ) && 
                (
                    this.Bandwidth == other.Bandwidth ||
                    this.Bandwidth != null &&
                    this.Bandwidth.Equals(other.Bandwidth)
                ) && 
                (
                    this.UnusedIps == other.UnusedIps ||
                    this.UnusedIps != null &&
                    this.UnusedIps.Equals(other.UnusedIps)
                ) && 
                (
                    this.UsedIps == other.UsedIps ||
                    this.UsedIps != null &&
                    this.UsedIps.Equals(other.UsedIps)
                ) && 
                (
                    this.VlanReplication == other.VlanReplication ||
                    this.VlanReplication != null &&
                    this.VlanReplication.Equals(other.VlanReplication)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.NetworkName != null)
                    hash = hash * 59 + this.NetworkName.GetHashCode();
                if (this.Subnet != null)
                    hash = hash * 59 + this.Subnet.GetHashCode();
                if (this.IpRanges != null)
                    hash = hash * 59 + this.IpRanges.GetHashCode();
                if (this.Gateway != null)
                    hash = hash * 59 + this.Gateway.GetHashCode();
                if (this.Vlanid != null)
                    hash = hash * 59 + this.Vlanid.GetHashCode();
                if (this.Bandwidth != null)
                    hash = hash * 59 + this.Bandwidth.GetHashCode();
                if (this.UnusedIps != null)
                    hash = hash * 59 + this.UnusedIps.GetHashCode();
                if (this.UsedIps != null)
                    hash = hash * 59 + this.UsedIps.GetHashCode();
                if (this.VlanReplication != null)
                    hash = hash * 59 + this.VlanReplication.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
