/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AboutInfo
    /// </summary>
    [DataContract]
    public partial class AboutInfo :  IEquatable<AboutInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AboutInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AboutInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AboutInfo" /> class.
        /// </summary>
        /// <param name="Name">Name (required).</param>
        /// <param name="Build">Build (required).</param>
        /// <param name="DisplayVersion">DisplayVersion.</param>
        /// <param name="FullName">FullName (required).</param>
        /// <param name="InstanceUuid">InstanceUuid (required).</param>
        /// <param name="Locale">Locale (required).</param>
        /// <param name="ModelNumber">ModelNumber (required).</param>
        /// <param name="ServiceType">ServiceType (required).</param>
        /// <param name="Pid">Pid.</param>
        /// <param name="ProductVersion">ProductVersion (required).</param>
        /// <param name="SerialNumber">SerialNumber (required).</param>
        /// <param name="ApiVersion">ApiVersion (required).</param>
        public AboutInfo(string Name = default(string), string Build = default(string), string DisplayVersion = default(string), string FullName = default(string), string InstanceUuid = default(string), string Locale = default(string), string ModelNumber = default(string), string ServiceType = default(string), string Pid = default(string), string ProductVersion = default(string), string SerialNumber = default(string), string ApiVersion = default(string))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for AboutInfo and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Build" is required (not null)
            if (Build == null)
            {
                throw new InvalidDataException("Build is a required property for AboutInfo and cannot be null");
            }
            else
            {
                this.Build = Build;
            }
            // to ensure "FullName" is required (not null)
            if (FullName == null)
            {
                throw new InvalidDataException("FullName is a required property for AboutInfo and cannot be null");
            }
            else
            {
                this.FullName = FullName;
            }
            // to ensure "InstanceUuid" is required (not null)
            if (InstanceUuid == null)
            {
                throw new InvalidDataException("InstanceUuid is a required property for AboutInfo and cannot be null");
            }
            else
            {
                this.InstanceUuid = InstanceUuid;
            }
            // to ensure "Locale" is required (not null)
            if (Locale == null)
            {
                throw new InvalidDataException("Locale is a required property for AboutInfo and cannot be null");
            }
            else
            {
                this.Locale = Locale;
            }
            // to ensure "ModelNumber" is required (not null)
            if (ModelNumber == null)
            {
                throw new InvalidDataException("ModelNumber is a required property for AboutInfo and cannot be null");
            }
            else
            {
                this.ModelNumber = ModelNumber;
            }
            // to ensure "ServiceType" is required (not null)
            if (ServiceType == null)
            {
                throw new InvalidDataException("ServiceType is a required property for AboutInfo and cannot be null");
            }
            else
            {
                this.ServiceType = ServiceType;
            }
            // to ensure "ProductVersion" is required (not null)
            if (ProductVersion == null)
            {
                throw new InvalidDataException("ProductVersion is a required property for AboutInfo and cannot be null");
            }
            else
            {
                this.ProductVersion = ProductVersion;
            }
            // to ensure "SerialNumber" is required (not null)
            if (SerialNumber == null)
            {
                throw new InvalidDataException("SerialNumber is a required property for AboutInfo and cannot be null");
            }
            else
            {
                this.SerialNumber = SerialNumber;
            }
            // to ensure "ApiVersion" is required (not null)
            if (ApiVersion == null)
            {
                throw new InvalidDataException("ApiVersion is a required property for AboutInfo and cannot be null");
            }
            else
            {
                this.ApiVersion = ApiVersion;
            }
            this.DisplayVersion = DisplayVersion;
            this.Pid = Pid;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Build
        /// </summary>
        [DataMember(Name="build", EmitDefaultValue=false)]
        public string Build { get; set; }

        /// <summary>
        /// Gets or Sets DisplayVersion
        /// </summary>
        [DataMember(Name="displayVersion", EmitDefaultValue=false)]
        public string DisplayVersion { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="fullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets InstanceUuid
        /// </summary>
        [DataMember(Name="instanceUuid", EmitDefaultValue=false)]
        public string InstanceUuid { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets ModelNumber
        /// </summary>
        [DataMember(Name="modelNumber", EmitDefaultValue=false)]
        public string ModelNumber { get; set; }

        /// <summary>
        /// Gets or Sets ServiceType
        /// </summary>
        [DataMember(Name="serviceType", EmitDefaultValue=false)]
        public string ServiceType { get; set; }

        /// <summary>
        /// Gets or Sets Pid
        /// </summary>
        [DataMember(Name="pid", EmitDefaultValue=false)]
        public string Pid { get; set; }

        /// <summary>
        /// Gets or Sets ProductVersion
        /// </summary>
        [DataMember(Name="productVersion", EmitDefaultValue=false)]
        public string ProductVersion { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name="serialNumber", EmitDefaultValue=false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets ApiVersion
        /// </summary>
        [DataMember(Name="apiVersion", EmitDefaultValue=false)]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AboutInfo {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("  DisplayVersion: ").Append(DisplayVersion).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  InstanceUuid: ").Append(InstanceUuid).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  ModelNumber: ").Append(ModelNumber).Append("\n");
            sb.Append("  ServiceType: ").Append(ServiceType).Append("\n");
            sb.Append("  Pid: ").Append(Pid).Append("\n");
            sb.Append("  ProductVersion: ").Append(ProductVersion).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  ApiVersion: ").Append(ApiVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AboutInfo);
        }

        /// <summary>
        /// Returns true if AboutInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of AboutInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AboutInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Build == other.Build ||
                    this.Build != null &&
                    this.Build.Equals(other.Build)
                ) && 
                (
                    this.DisplayVersion == other.DisplayVersion ||
                    this.DisplayVersion != null &&
                    this.DisplayVersion.Equals(other.DisplayVersion)
                ) && 
                (
                    this.FullName == other.FullName ||
                    this.FullName != null &&
                    this.FullName.Equals(other.FullName)
                ) && 
                (
                    this.InstanceUuid == other.InstanceUuid ||
                    this.InstanceUuid != null &&
                    this.InstanceUuid.Equals(other.InstanceUuid)
                ) && 
                (
                    this.Locale == other.Locale ||
                    this.Locale != null &&
                    this.Locale.Equals(other.Locale)
                ) && 
                (
                    this.ModelNumber == other.ModelNumber ||
                    this.ModelNumber != null &&
                    this.ModelNumber.Equals(other.ModelNumber)
                ) && 
                (
                    this.ServiceType == other.ServiceType ||
                    this.ServiceType != null &&
                    this.ServiceType.Equals(other.ServiceType)
                ) && 
                (
                    this.Pid == other.Pid ||
                    this.Pid != null &&
                    this.Pid.Equals(other.Pid)
                ) && 
                (
                    this.ProductVersion == other.ProductVersion ||
                    this.ProductVersion != null &&
                    this.ProductVersion.Equals(other.ProductVersion)
                ) && 
                (
                    this.SerialNumber == other.SerialNumber ||
                    this.SerialNumber != null &&
                    this.SerialNumber.Equals(other.SerialNumber)
                ) && 
                (
                    this.ApiVersion == other.ApiVersion ||
                    this.ApiVersion != null &&
                    this.ApiVersion.Equals(other.ApiVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Build != null)
                    hash = hash * 59 + this.Build.GetHashCode();
                if (this.DisplayVersion != null)
                    hash = hash * 59 + this.DisplayVersion.GetHashCode();
                if (this.FullName != null)
                    hash = hash * 59 + this.FullName.GetHashCode();
                if (this.InstanceUuid != null)
                    hash = hash * 59 + this.InstanceUuid.GetHashCode();
                if (this.Locale != null)
                    hash = hash * 59 + this.Locale.GetHashCode();
                if (this.ModelNumber != null)
                    hash = hash * 59 + this.ModelNumber.GetHashCode();
                if (this.ServiceType != null)
                    hash = hash * 59 + this.ServiceType.GetHashCode();
                if (this.Pid != null)
                    hash = hash * 59 + this.Pid.GetHashCode();
                if (this.ProductVersion != null)
                    hash = hash * 59 + this.ProductVersion.GetHashCode();
                if (this.SerialNumber != null)
                    hash = hash * 59 + this.SerialNumber.GetHashCode();
                if (this.ApiVersion != null)
                    hash = hash * 59 + this.ApiVersion.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
