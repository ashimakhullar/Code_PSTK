/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ReplicationPeerInfo
    /// </summary>
    [DataContract]
    public partial class ReplicationPeerInfo :  IEquatable<ReplicationPeerInfo>, IValidatableObject
    {
        /// <summary>
        /// Peer Cluster Status
        /// </summary>
        /// <value>Peer Cluster Status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum ONLINE for "ONLINE"
            /// </summary>
            [EnumMember(Value = "ONLINE")]
            ONLINE,
            
            /// <summary>
            /// Enum OFFLINE for "OFFLINE"
            /// </summary>
            [EnumMember(Value = "OFFLINE")]
            OFFLINE
        }

        /// <summary>
        /// Peer Cluster Status Details
        /// </summary>
        /// <value>Peer Cluster Status Details</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusDetailsEnum
        {
            
            /// <summary>
            /// Enum UNKNOWN for "UNKNOWN"
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN,
            
            /// <summary>
            /// Enum UPGRADING for "UPGRADING"
            /// </summary>
            [EnumMember(Value = "UPGRADING")]
            UPGRADING,
            
            /// <summary>
            /// Enum SHUTDOWN for "SHUTDOWN"
            /// </summary>
            [EnumMember(Value = "SHUTDOWN")]
            SHUTDOWN,
            
            /// <summary>
            /// Enum ENOSPACE for "ENOSPACE"
            /// </summary>
            [EnumMember(Value = "ENOSPACE")]
            ENOSPACE
        }

        /// <summary>
        /// Peer Cluster Status
        /// </summary>
        /// <value>Peer Cluster Status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Peer Cluster Status Details
        /// </summary>
        /// <value>Peer Cluster Status Details</value>
        [DataMember(Name="statusDetails", EmitDefaultValue=false)]
        public StatusDetailsEnum? StatusDetails { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationPeerInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReplicationPeerInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReplicationPeerInfo" /> class.
        /// </summary>
        /// <param name="Er">Er (required).</param>
        /// <param name="Mcip">Management Cluster IP (required).</param>
        /// <param name="Dcip">Data Cluster IP.</param>
        /// <param name="ReplCip">Replication Cluster IP (required).</param>
        /// <param name="Ports">Ports.</param>
        /// <param name="Datastores">List of Paired Datastores.</param>
        /// <param name="Status">Peer Cluster Status.</param>
        /// <param name="StatusDetails">Peer Cluster Status Details.</param>
        public ReplicationPeerInfo(EntityRef Er = default(EntityRef), string Mcip = default(string), string Dcip = default(string), string ReplCip = default(string), List<MapPortTypeToPortNumber> Ports = default(List<MapPortTypeToPortNumber>), List<ReplicationPlatDatastorePair> Datastores = default(List<ReplicationPlatDatastorePair>), StatusEnum? Status = default(StatusEnum?), StatusDetailsEnum? StatusDetails = default(StatusDetailsEnum?))
        {
            // to ensure "Er" is required (not null)
            if (Er == null)
            {
                throw new InvalidDataException("Er is a required property for ReplicationPeerInfo and cannot be null");
            }
            else
            {
                this.Er = Er;
            }
            // to ensure "Mcip" is required (not null)
            if (Mcip == null)
            {
                throw new InvalidDataException("Mcip is a required property for ReplicationPeerInfo and cannot be null");
            }
            else
            {
                this.Mcip = Mcip;
            }
            // to ensure "ReplCip" is required (not null)
            if (ReplCip == null)
            {
                throw new InvalidDataException("ReplCip is a required property for ReplicationPeerInfo and cannot be null");
            }
            else
            {
                this.ReplCip = ReplCip;
            }
            this.Dcip = Dcip;
            this.Ports = Ports;
            this.Datastores = Datastores;
            this.Status = Status;
            this.StatusDetails = StatusDetails;
        }
        
        /// <summary>
        /// Gets or Sets Er
        /// </summary>
        [DataMember(Name="er", EmitDefaultValue=false)]
        public EntityRef Er { get; set; }

        /// <summary>
        /// Management Cluster IP
        /// </summary>
        /// <value>Management Cluster IP</value>
        [DataMember(Name="mcip", EmitDefaultValue=false)]
        public string Mcip { get; set; }

        /// <summary>
        /// Data Cluster IP
        /// </summary>
        /// <value>Data Cluster IP</value>
        [DataMember(Name="dcip", EmitDefaultValue=false)]
        public string Dcip { get; set; }

        /// <summary>
        /// Replication Cluster IP
        /// </summary>
        /// <value>Replication Cluster IP</value>
        [DataMember(Name="replCip", EmitDefaultValue=false)]
        public string ReplCip { get; set; }

        /// <summary>
        /// Gets or Sets Ports
        /// </summary>
        [DataMember(Name="ports", EmitDefaultValue=false)]
        public List<MapPortTypeToPortNumber> Ports { get; set; }

        /// <summary>
        /// List of Paired Datastores
        /// </summary>
        /// <value>List of Paired Datastores</value>
        [DataMember(Name="datastores", EmitDefaultValue=false)]
        public List<ReplicationPlatDatastorePair> Datastores { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReplicationPeerInfo {\n");
            sb.Append("  Er: ").Append(Er).Append("\n");
            sb.Append("  Mcip: ").Append(Mcip).Append("\n");
            sb.Append("  Dcip: ").Append(Dcip).Append("\n");
            sb.Append("  ReplCip: ").Append(ReplCip).Append("\n");
            sb.Append("  Ports: ").Append(Ports).Append("\n");
            sb.Append("  Datastores: ").Append(Datastores).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDetails: ").Append(StatusDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReplicationPeerInfo);
        }

        /// <summary>
        /// Returns true if ReplicationPeerInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ReplicationPeerInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReplicationPeerInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Er == other.Er ||
                    this.Er != null &&
                    this.Er.Equals(other.Er)
                ) && 
                (
                    this.Mcip == other.Mcip ||
                    this.Mcip != null &&
                    this.Mcip.Equals(other.Mcip)
                ) && 
                (
                    this.Dcip == other.Dcip ||
                    this.Dcip != null &&
                    this.Dcip.Equals(other.Dcip)
                ) && 
                (
                    this.ReplCip == other.ReplCip ||
                    this.ReplCip != null &&
                    this.ReplCip.Equals(other.ReplCip)
                ) && 
                (
                    this.Ports == other.Ports ||
                    this.Ports != null &&
                    this.Ports.SequenceEqual(other.Ports)
                ) && 
                (
                    this.Datastores == other.Datastores ||
                    this.Datastores != null &&
                    this.Datastores.SequenceEqual(other.Datastores)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.StatusDetails == other.StatusDetails ||
                    this.StatusDetails != null &&
                    this.StatusDetails.Equals(other.StatusDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Er != null)
                    hash = hash * 59 + this.Er.GetHashCode();
                if (this.Mcip != null)
                    hash = hash * 59 + this.Mcip.GetHashCode();
                if (this.Dcip != null)
                    hash = hash * 59 + this.Dcip.GetHashCode();
                if (this.ReplCip != null)
                    hash = hash * 59 + this.ReplCip.GetHashCode();
                if (this.Ports != null)
                    hash = hash * 59 + this.Ports.GetHashCode();
                if (this.Datastores != null)
                    hash = hash * 59 + this.Datastores.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.StatusDetails != null)
                    hash = hash * 59 + this.StatusDetails.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
