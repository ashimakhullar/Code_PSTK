/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// IpRange
    /// </summary>
    [DataContract]
    public partial class IpRange :  IEquatable<IpRange>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IpRange" /> class.
        /// </summary>
        /// <param name="BeginAddress">Begin IP address. IPv4 only..</param>
        /// <param name="EndAddress">Ending IP address..</param>
        /// <param name="CanDelete">Flag to check if the IP Range can be deleted (default to false).</param>
        public IpRange(string BeginAddress = default(string), string EndAddress = default(string), bool? CanDelete = false)
        {
            this.BeginAddress = BeginAddress;
            this.EndAddress = EndAddress;
            // use default value if no "CanDelete" provided
            if (CanDelete == null)
            {
                this.CanDelete = false;
            }
            else
            {
                this.CanDelete = CanDelete;
            }
        }
        
        /// <summary>
        /// Begin IP address. IPv4 only.
        /// </summary>
        /// <value>Begin IP address. IPv4 only.</value>
        [DataMember(Name="beginAddress", EmitDefaultValue=false)]
        public string BeginAddress { get; set; }

        /// <summary>
        /// Ending IP address.
        /// </summary>
        /// <value>Ending IP address.</value>
        [DataMember(Name="endAddress", EmitDefaultValue=false)]
        public string EndAddress { get; set; }

        /// <summary>
        /// Flag to check if the IP Range can be deleted
        /// </summary>
        /// <value>Flag to check if the IP Range can be deleted</value>
        [DataMember(Name="canDelete", EmitDefaultValue=false)]
        public bool? CanDelete { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IpRange {\n");
            sb.Append("  BeginAddress: ").Append(BeginAddress).Append("\n");
            sb.Append("  EndAddress: ").Append(EndAddress).Append("\n");
            sb.Append("  CanDelete: ").Append(CanDelete).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as IpRange);
        }

        /// <summary>
        /// Returns true if IpRange instances are equal
        /// </summary>
        /// <param name="other">Instance of IpRange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IpRange other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BeginAddress == other.BeginAddress ||
                    this.BeginAddress != null &&
                    this.BeginAddress.Equals(other.BeginAddress)
                ) && 
                (
                    this.EndAddress == other.EndAddress ||
                    this.EndAddress != null &&
                    this.EndAddress.Equals(other.EndAddress)
                ) && 
                (
                    this.CanDelete == other.CanDelete ||
                    this.CanDelete != null &&
                    this.CanDelete.Equals(other.CanDelete)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BeginAddress != null)
                    hash = hash * 59 + this.BeginAddress.GetHashCode();
                if (this.EndAddress != null)
                    hash = hash * 59 + this.EndAddress.GetHashCode();
                if (this.CanDelete != null)
                    hash = hash * 59 + this.CanDelete.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
