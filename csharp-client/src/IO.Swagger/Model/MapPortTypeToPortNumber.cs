/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Replication Ports Key &#x3D; \&quot;Control\&quot; || \&quot;Data\&quot; Value &#x3D; port number
    /// </summary>
    [DataContract]
    public partial class MapPortTypeToPortNumber :  IEquatable<MapPortTypeToPortNumber>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MapPortTypeToPortNumber" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MapPortTypeToPortNumber() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MapPortTypeToPortNumber" /> class.
        /// </summary>
        /// <param name="_String">_String (required).</param>
        /// <param name="I16">I16 (required).</param>
        public MapPortTypeToPortNumber(string _String = default(string), int? I16 = default(int?))
        {
            // to ensure "_String" is required (not null)
            if (_String == null)
            {
                throw new InvalidDataException("_String is a required property for MapPortTypeToPortNumber and cannot be null");
            }
            else
            {
                this._String = _String;
            }
            // to ensure "I16" is required (not null)
            if (I16 == null)
            {
                throw new InvalidDataException("I16 is a required property for MapPortTypeToPortNumber and cannot be null");
            }
            else
            {
                this.I16 = I16;
            }
        }
        
        /// <summary>
        /// Gets or Sets _String
        /// </summary>
        [DataMember(Name="string", EmitDefaultValue=false)]
        public string _String { get; set; }

        /// <summary>
        /// Gets or Sets I16
        /// </summary>
        [DataMember(Name="i16", EmitDefaultValue=false)]
        public int? I16 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MapPortTypeToPortNumber {\n");
            sb.Append("  _String: ").Append(_String).Append("\n");
            sb.Append("  I16: ").Append(I16).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as MapPortTypeToPortNumber);
        }

        /// <summary>
        /// Returns true if MapPortTypeToPortNumber instances are equal
        /// </summary>
        /// <param name="other">Instance of MapPortTypeToPortNumber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MapPortTypeToPortNumber other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this._String == other._String ||
                    this._String != null &&
                    this._String.Equals(other._String)
                ) && 
                (
                    this.I16 == other.I16 ||
                    this.I16 != null &&
                    this.I16.Equals(other.I16)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this._String != null)
                    hash = hash * 59 + this._String.GetHashCode();
                if (this.I16 != null)
                    hash = hash * 59 + this.I16.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
