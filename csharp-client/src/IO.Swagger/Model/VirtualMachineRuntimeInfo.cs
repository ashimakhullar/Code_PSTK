/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Virtual Machine runtime details
    /// </summary>
    [DataContract]
    public partial class VirtualMachineRuntimeInfo :  IEquatable<VirtualMachineRuntimeInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VirtualMachineRuntimeInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VirtualMachineRuntimeInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VirtualMachineRuntimeInfo" /> class.
        /// </summary>
        /// <param name="Name">Name of the Virtual Machine (required).</param>
        /// <param name="Moid">Virtual machine MOID (required).</param>
        /// <param name="VmxPath">vmxPath in VC datastore format.</param>
        /// <param name="Folder">Folder which VM belongs to.</param>
        /// <param name="ResourcePool">Resource pool which VM belongs to.</param>
        /// <param name="HostName">Hostname of Virtual Machine.</param>
        /// <param name="NumCpu">Number of CPUs of VM.</param>
        /// <param name="GuestId">Guest operating system identifier (short name), if known..</param>
        /// <param name="GuestFullName"> Guest operating system full name, if known. .</param>
        /// <param name="GuestFamily"> Guest operating system family, if known.</param>
        /// <param name="GuestState">state are: running, shuttingdown, resetting, standby, notrunning, unknown.</param>
        /// <param name="ProvisionedSize">Provisioned Size of Virtual Machine.</param>
        /// <param name="UsedSize">Used Size of Virtual Machine.</param>
        /// <param name="CpuUsage">CPU Usage of Virtual Machine.</param>
        /// <param name="MemoryMB">CPU Memory in MB of VM.</param>
        /// <param name="MemoryUsage">memory usage of Virtual Machine.</param>
        /// <param name="Version">Vm version.</param>
        /// <param name="PowerState">States: poweredOff/poweredOn/suspended.</param>
        /// <param name="ConnectionState">States:connected/disconnected/inaccessible/invalid/orphaned.</param>
        /// <param name="DvsDeviceNetworkMaps">DvsDeviceNetworkMaps.</param>
        public VirtualMachineRuntimeInfo(string Name = default(string), string Moid = default(string), string VmxPath = default(string), string Folder = default(string), string ResourcePool = default(string), string HostName = default(string), int? NumCpu = default(int?), string GuestId = default(string), string GuestFullName = default(string), string GuestFamily = default(string), string GuestState = default(string), long? ProvisionedSize = default(long?), long? UsedSize = default(long?), int? CpuUsage = default(int?), int? MemoryMB = default(int?), int? MemoryUsage = default(int?), string Version = default(string), string PowerState = default(string), string ConnectionState = default(string), List<DvsDeviceNetworkMap> DvsDeviceNetworkMaps = default(List<DvsDeviceNetworkMap>))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for VirtualMachineRuntimeInfo and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Moid" is required (not null)
            if (Moid == null)
            {
                throw new InvalidDataException("Moid is a required property for VirtualMachineRuntimeInfo and cannot be null");
            }
            else
            {
                this.Moid = Moid;
            }
            this.VmxPath = VmxPath;
            this.Folder = Folder;
            this.ResourcePool = ResourcePool;
            this.HostName = HostName;
            this.NumCpu = NumCpu;
            this.GuestId = GuestId;
            this.GuestFullName = GuestFullName;
            this.GuestFamily = GuestFamily;
            this.GuestState = GuestState;
            this.ProvisionedSize = ProvisionedSize;
            this.UsedSize = UsedSize;
            this.CpuUsage = CpuUsage;
            this.MemoryMB = MemoryMB;
            this.MemoryUsage = MemoryUsage;
            this.Version = Version;
            this.PowerState = PowerState;
            this.ConnectionState = ConnectionState;
            this.DvsDeviceNetworkMaps = DvsDeviceNetworkMaps;
        }
        
        /// <summary>
        /// Name of the Virtual Machine
        /// </summary>
        /// <value>Name of the Virtual Machine</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Virtual machine MOID
        /// </summary>
        /// <value>Virtual machine MOID</value>
        [DataMember(Name="moid", EmitDefaultValue=false)]
        public string Moid { get; set; }

        /// <summary>
        /// vmxPath in VC datastore format
        /// </summary>
        /// <value>vmxPath in VC datastore format</value>
        [DataMember(Name="vmxPath", EmitDefaultValue=false)]
        public string VmxPath { get; set; }

        /// <summary>
        /// Folder which VM belongs to
        /// </summary>
        /// <value>Folder which VM belongs to</value>
        [DataMember(Name="folder", EmitDefaultValue=false)]
        public string Folder { get; set; }

        /// <summary>
        /// Resource pool which VM belongs to
        /// </summary>
        /// <value>Resource pool which VM belongs to</value>
        [DataMember(Name="resourcePool", EmitDefaultValue=false)]
        public string ResourcePool { get; set; }

        /// <summary>
        /// Hostname of Virtual Machine
        /// </summary>
        /// <value>Hostname of Virtual Machine</value>
        [DataMember(Name="hostName", EmitDefaultValue=false)]
        public string HostName { get; set; }

        /// <summary>
        /// Number of CPUs of VM
        /// </summary>
        /// <value>Number of CPUs of VM</value>
        [DataMember(Name="numCpu", EmitDefaultValue=false)]
        public int? NumCpu { get; set; }

        /// <summary>
        /// Guest operating system identifier (short name), if known.
        /// </summary>
        /// <value>Guest operating system identifier (short name), if known.</value>
        [DataMember(Name="guestId", EmitDefaultValue=false)]
        public string GuestId { get; set; }

        /// <summary>
        ///  Guest operating system full name, if known. 
        /// </summary>
        /// <value> Guest operating system full name, if known. </value>
        [DataMember(Name="guestFullName", EmitDefaultValue=false)]
        public string GuestFullName { get; set; }

        /// <summary>
        ///  Guest operating system family, if known
        /// </summary>
        /// <value> Guest operating system family, if known</value>
        [DataMember(Name="guestFamily", EmitDefaultValue=false)]
        public string GuestFamily { get; set; }

        /// <summary>
        /// state are: running, shuttingdown, resetting, standby, notrunning, unknown
        /// </summary>
        /// <value>state are: running, shuttingdown, resetting, standby, notrunning, unknown</value>
        [DataMember(Name="guestState", EmitDefaultValue=false)]
        public string GuestState { get; set; }

        /// <summary>
        /// Provisioned Size of Virtual Machine
        /// </summary>
        /// <value>Provisioned Size of Virtual Machine</value>
        [DataMember(Name="provisionedSize", EmitDefaultValue=false)]
        public long? ProvisionedSize { get; set; }

        /// <summary>
        /// Used Size of Virtual Machine
        /// </summary>
        /// <value>Used Size of Virtual Machine</value>
        [DataMember(Name="usedSize", EmitDefaultValue=false)]
        public long? UsedSize { get; set; }

        /// <summary>
        /// CPU Usage of Virtual Machine
        /// </summary>
        /// <value>CPU Usage of Virtual Machine</value>
        [DataMember(Name="cpuUsage", EmitDefaultValue=false)]
        public int? CpuUsage { get; set; }

        /// <summary>
        /// CPU Memory in MB of VM
        /// </summary>
        /// <value>CPU Memory in MB of VM</value>
        [DataMember(Name="memoryMB", EmitDefaultValue=false)]
        public int? MemoryMB { get; set; }

        /// <summary>
        /// memory usage of Virtual Machine
        /// </summary>
        /// <value>memory usage of Virtual Machine</value>
        [DataMember(Name="memoryUsage", EmitDefaultValue=false)]
        public int? MemoryUsage { get; set; }

        /// <summary>
        /// Vm version
        /// </summary>
        /// <value>Vm version</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// States: poweredOff/poweredOn/suspended
        /// </summary>
        /// <value>States: poweredOff/poweredOn/suspended</value>
        [DataMember(Name="powerState", EmitDefaultValue=false)]
        public string PowerState { get; set; }

        /// <summary>
        /// States:connected/disconnected/inaccessible/invalid/orphaned
        /// </summary>
        /// <value>States:connected/disconnected/inaccessible/invalid/orphaned</value>
        [DataMember(Name="connectionState", EmitDefaultValue=false)]
        public string ConnectionState { get; set; }

        /// <summary>
        /// Gets or Sets DvsDeviceNetworkMaps
        /// </summary>
        [DataMember(Name="dvsDeviceNetworkMaps", EmitDefaultValue=false)]
        public List<DvsDeviceNetworkMap> DvsDeviceNetworkMaps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VirtualMachineRuntimeInfo {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Moid: ").Append(Moid).Append("\n");
            sb.Append("  VmxPath: ").Append(VmxPath).Append("\n");
            sb.Append("  Folder: ").Append(Folder).Append("\n");
            sb.Append("  ResourcePool: ").Append(ResourcePool).Append("\n");
            sb.Append("  HostName: ").Append(HostName).Append("\n");
            sb.Append("  NumCpu: ").Append(NumCpu).Append("\n");
            sb.Append("  GuestId: ").Append(GuestId).Append("\n");
            sb.Append("  GuestFullName: ").Append(GuestFullName).Append("\n");
            sb.Append("  GuestFamily: ").Append(GuestFamily).Append("\n");
            sb.Append("  GuestState: ").Append(GuestState).Append("\n");
            sb.Append("  ProvisionedSize: ").Append(ProvisionedSize).Append("\n");
            sb.Append("  UsedSize: ").Append(UsedSize).Append("\n");
            sb.Append("  CpuUsage: ").Append(CpuUsage).Append("\n");
            sb.Append("  MemoryMB: ").Append(MemoryMB).Append("\n");
            sb.Append("  MemoryUsage: ").Append(MemoryUsage).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  PowerState: ").Append(PowerState).Append("\n");
            sb.Append("  ConnectionState: ").Append(ConnectionState).Append("\n");
            sb.Append("  DvsDeviceNetworkMaps: ").Append(DvsDeviceNetworkMaps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as VirtualMachineRuntimeInfo);
        }

        /// <summary>
        /// Returns true if VirtualMachineRuntimeInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of VirtualMachineRuntimeInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VirtualMachineRuntimeInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Moid == other.Moid ||
                    this.Moid != null &&
                    this.Moid.Equals(other.Moid)
                ) && 
                (
                    this.VmxPath == other.VmxPath ||
                    this.VmxPath != null &&
                    this.VmxPath.Equals(other.VmxPath)
                ) && 
                (
                    this.Folder == other.Folder ||
                    this.Folder != null &&
                    this.Folder.Equals(other.Folder)
                ) && 
                (
                    this.ResourcePool == other.ResourcePool ||
                    this.ResourcePool != null &&
                    this.ResourcePool.Equals(other.ResourcePool)
                ) && 
                (
                    this.HostName == other.HostName ||
                    this.HostName != null &&
                    this.HostName.Equals(other.HostName)
                ) && 
                (
                    this.NumCpu == other.NumCpu ||
                    this.NumCpu != null &&
                    this.NumCpu.Equals(other.NumCpu)
                ) && 
                (
                    this.GuestId == other.GuestId ||
                    this.GuestId != null &&
                    this.GuestId.Equals(other.GuestId)
                ) && 
                (
                    this.GuestFullName == other.GuestFullName ||
                    this.GuestFullName != null &&
                    this.GuestFullName.Equals(other.GuestFullName)
                ) && 
                (
                    this.GuestFamily == other.GuestFamily ||
                    this.GuestFamily != null &&
                    this.GuestFamily.Equals(other.GuestFamily)
                ) && 
                (
                    this.GuestState == other.GuestState ||
                    this.GuestState != null &&
                    this.GuestState.Equals(other.GuestState)
                ) && 
                (
                    this.ProvisionedSize == other.ProvisionedSize ||
                    this.ProvisionedSize != null &&
                    this.ProvisionedSize.Equals(other.ProvisionedSize)
                ) && 
                (
                    this.UsedSize == other.UsedSize ||
                    this.UsedSize != null &&
                    this.UsedSize.Equals(other.UsedSize)
                ) && 
                (
                    this.CpuUsage == other.CpuUsage ||
                    this.CpuUsage != null &&
                    this.CpuUsage.Equals(other.CpuUsage)
                ) && 
                (
                    this.MemoryMB == other.MemoryMB ||
                    this.MemoryMB != null &&
                    this.MemoryMB.Equals(other.MemoryMB)
                ) && 
                (
                    this.MemoryUsage == other.MemoryUsage ||
                    this.MemoryUsage != null &&
                    this.MemoryUsage.Equals(other.MemoryUsage)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.PowerState == other.PowerState ||
                    this.PowerState != null &&
                    this.PowerState.Equals(other.PowerState)
                ) && 
                (
                    this.ConnectionState == other.ConnectionState ||
                    this.ConnectionState != null &&
                    this.ConnectionState.Equals(other.ConnectionState)
                ) && 
                (
                    this.DvsDeviceNetworkMaps == other.DvsDeviceNetworkMaps ||
                    this.DvsDeviceNetworkMaps != null &&
                    this.DvsDeviceNetworkMaps.SequenceEqual(other.DvsDeviceNetworkMaps)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Moid != null)
                    hash = hash * 59 + this.Moid.GetHashCode();
                if (this.VmxPath != null)
                    hash = hash * 59 + this.VmxPath.GetHashCode();
                if (this.Folder != null)
                    hash = hash * 59 + this.Folder.GetHashCode();
                if (this.ResourcePool != null)
                    hash = hash * 59 + this.ResourcePool.GetHashCode();
                if (this.HostName != null)
                    hash = hash * 59 + this.HostName.GetHashCode();
                if (this.NumCpu != null)
                    hash = hash * 59 + this.NumCpu.GetHashCode();
                if (this.GuestId != null)
                    hash = hash * 59 + this.GuestId.GetHashCode();
                if (this.GuestFullName != null)
                    hash = hash * 59 + this.GuestFullName.GetHashCode();
                if (this.GuestFamily != null)
                    hash = hash * 59 + this.GuestFamily.GetHashCode();
                if (this.GuestState != null)
                    hash = hash * 59 + this.GuestState.GetHashCode();
                if (this.ProvisionedSize != null)
                    hash = hash * 59 + this.ProvisionedSize.GetHashCode();
                if (this.UsedSize != null)
                    hash = hash * 59 + this.UsedSize.GetHashCode();
                if (this.CpuUsage != null)
                    hash = hash * 59 + this.CpuUsage.GetHashCode();
                if (this.MemoryMB != null)
                    hash = hash * 59 + this.MemoryMB.GetHashCode();
                if (this.MemoryUsage != null)
                    hash = hash * 59 + this.MemoryUsage.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.PowerState != null)
                    hash = hash * 59 + this.PowerState.GetHashCode();
                if (this.ConnectionState != null)
                    hash = hash * 59 + this.ConnectionState.GetHashCode();
                if (this.DvsDeviceNetworkMaps != null)
                    hash = hash * 59 + this.DvsDeviceNetworkMaps.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
