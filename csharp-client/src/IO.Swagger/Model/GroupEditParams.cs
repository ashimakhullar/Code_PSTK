/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GroupEditParams
    /// </summary>
    [DataContract]
    public partial class GroupEditParams :  IEquatable<GroupEditParams>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupEditParams" /> class.
        /// </summary>
        /// <param name="VmsToAdd">VmsToAdd.</param>
        /// <param name="VmsToRemove">VmsToRemove.</param>
        /// <param name="Rename">New name of the group, leave empty, if unchanged.</param>
        public GroupEditParams(List<EntityRef> VmsToAdd = default(List<EntityRef>), List<EntityRef> VmsToRemove = default(List<EntityRef>), string Rename = default(string))
        {
            this.VmsToAdd = VmsToAdd;
            this.VmsToRemove = VmsToRemove;
            this.Rename = Rename;
        }
        
        /// <summary>
        /// Gets or Sets VmsToAdd
        /// </summary>
        [DataMember(Name="vmsToAdd", EmitDefaultValue=false)]
        public List<EntityRef> VmsToAdd { get; set; }

        /// <summary>
        /// Gets or Sets VmsToRemove
        /// </summary>
        [DataMember(Name="vmsToRemove", EmitDefaultValue=false)]
        public List<EntityRef> VmsToRemove { get; set; }

        /// <summary>
        /// New name of the group, leave empty, if unchanged
        /// </summary>
        /// <value>New name of the group, leave empty, if unchanged</value>
        [DataMember(Name="rename", EmitDefaultValue=false)]
        public string Rename { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupEditParams {\n");
            sb.Append("  VmsToAdd: ").Append(VmsToAdd).Append("\n");
            sb.Append("  VmsToRemove: ").Append(VmsToRemove).Append("\n");
            sb.Append("  Rename: ").Append(Rename).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GroupEditParams);
        }

        /// <summary>
        /// Returns true if GroupEditParams instances are equal
        /// </summary>
        /// <param name="other">Instance of GroupEditParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupEditParams other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.VmsToAdd == other.VmsToAdd ||
                    this.VmsToAdd != null &&
                    this.VmsToAdd.SequenceEqual(other.VmsToAdd)
                ) && 
                (
                    this.VmsToRemove == other.VmsToRemove ||
                    this.VmsToRemove != null &&
                    this.VmsToRemove.SequenceEqual(other.VmsToRemove)
                ) && 
                (
                    this.Rename == other.Rename ||
                    this.Rename != null &&
                    this.Rename.Equals(other.Rename)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.VmsToAdd != null)
                    hash = hash * 59 + this.VmsToAdd.GetHashCode();
                if (this.VmsToRemove != null)
                    hash = hash * 59 + this.VmsToRemove.GetHashCode();
                if (this.Rename != null)
                    hash = hash * 59 + this.Rename.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
