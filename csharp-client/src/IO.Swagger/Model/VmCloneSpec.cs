/* 
 * Swagger Server
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// VmCloneSpec
    /// </summary>
    [DataContract]
    public partial class VmCloneSpec :  IEquatable<VmCloneSpec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VmCloneSpec" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VmCloneSpec() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VmCloneSpec" /> class.
        /// </summary>
        /// <param name="VmId">ID of the VM to be cloned (required).</param>
        /// <param name="VmName">Name of the VM to be cloned (required).</param>
        /// <param name="CloneNamePrefix">Prefix of clone&#39;s name (required).</param>
        /// <param name="NumberOfClones">Number of clones required (required).</param>
        /// <param name="Parallel">Number of parallel.</param>
        /// <param name="PowerOn">Power on after cloning (default to false).</param>
        /// <param name="CustomSpecName">Guest Customization spec for the cloned VM(s).</param>
        /// <param name="VmGuestNamePrefix">Guest name for the cloned VM(s) if different from vm name.</param>
        /// <param name="CloneNameStartNumber">Start number suffix for the VM clone name.</param>
        /// <param name="CloneNameIncrement">Increment of the suffix for the VM clones.</param>
        /// <param name="ResourcePoolId">ID of the Resource pool to place the cloned VM(s) on.</param>
        /// <param name="ResourcePoolName">Name of the Resource pool to place the cloned VM(s) on.</param>
        /// <param name="UserName">User Name.</param>
        public VmCloneSpec(string VmId = default(string), string VmName = default(string), string CloneNamePrefix = default(string), int? NumberOfClones = default(int?), int? Parallel = default(int?), bool? PowerOn = false, string CustomSpecName = default(string), string VmGuestNamePrefix = default(string), int? CloneNameStartNumber = default(int?), int? CloneNameIncrement = default(int?), string ResourcePoolId = default(string), string ResourcePoolName = default(string), string UserName = default(string))
        {
            // to ensure "VmId" is required (not null)
            if (VmId == null)
            {
                throw new InvalidDataException("VmId is a required property for VmCloneSpec and cannot be null");
            }
            else
            {
                this.VmId = VmId;
            }
            // to ensure "VmName" is required (not null)
            if (VmName == null)
            {
                throw new InvalidDataException("VmName is a required property for VmCloneSpec and cannot be null");
            }
            else
            {
                this.VmName = VmName;
            }
            // to ensure "CloneNamePrefix" is required (not null)
            if (CloneNamePrefix == null)
            {
                throw new InvalidDataException("CloneNamePrefix is a required property for VmCloneSpec and cannot be null");
            }
            else
            {
                this.CloneNamePrefix = CloneNamePrefix;
            }
            // to ensure "NumberOfClones" is required (not null)
            if (NumberOfClones == null)
            {
                throw new InvalidDataException("NumberOfClones is a required property for VmCloneSpec and cannot be null");
            }
            else
            {
                this.NumberOfClones = NumberOfClones;
            }
            this.Parallel = Parallel;
            // use default value if no "PowerOn" provided
            if (PowerOn == null)
            {
                this.PowerOn = false;
            }
            else
            {
                this.PowerOn = PowerOn;
            }
            this.CustomSpecName = CustomSpecName;
            this.VmGuestNamePrefix = VmGuestNamePrefix;
            this.CloneNameStartNumber = CloneNameStartNumber;
            this.CloneNameIncrement = CloneNameIncrement;
            this.ResourcePoolId = ResourcePoolId;
            this.ResourcePoolName = ResourcePoolName;
            this.UserName = UserName;
        }
        
        /// <summary>
        /// ID of the VM to be cloned
        /// </summary>
        /// <value>ID of the VM to be cloned</value>
        [DataMember(Name="vmId", EmitDefaultValue=false)]
        public string VmId { get; set; }

        /// <summary>
        /// Name of the VM to be cloned
        /// </summary>
        /// <value>Name of the VM to be cloned</value>
        [DataMember(Name="vmName", EmitDefaultValue=false)]
        public string VmName { get; set; }

        /// <summary>
        /// Prefix of clone&#39;s name
        /// </summary>
        /// <value>Prefix of clone&#39;s name</value>
        [DataMember(Name="cloneNamePrefix", EmitDefaultValue=false)]
        public string CloneNamePrefix { get; set; }

        /// <summary>
        /// Number of clones required
        /// </summary>
        /// <value>Number of clones required</value>
        [DataMember(Name="numberOfClones", EmitDefaultValue=false)]
        public int? NumberOfClones { get; set; }

        /// <summary>
        /// Number of parallel
        /// </summary>
        /// <value>Number of parallel</value>
        [DataMember(Name="parallel", EmitDefaultValue=false)]
        public int? Parallel { get; set; }

        /// <summary>
        /// Power on after cloning
        /// </summary>
        /// <value>Power on after cloning</value>
        [DataMember(Name="powerOn", EmitDefaultValue=false)]
        public bool? PowerOn { get; set; }

        /// <summary>
        /// Guest Customization spec for the cloned VM(s)
        /// </summary>
        /// <value>Guest Customization spec for the cloned VM(s)</value>
        [DataMember(Name="customSpecName", EmitDefaultValue=false)]
        public string CustomSpecName { get; set; }

        /// <summary>
        /// Guest name for the cloned VM(s) if different from vm name
        /// </summary>
        /// <value>Guest name for the cloned VM(s) if different from vm name</value>
        [DataMember(Name="vmGuestNamePrefix", EmitDefaultValue=false)]
        public string VmGuestNamePrefix { get; set; }

        /// <summary>
        /// Start number suffix for the VM clone name
        /// </summary>
        /// <value>Start number suffix for the VM clone name</value>
        [DataMember(Name="cloneNameStartNumber", EmitDefaultValue=false)]
        public int? CloneNameStartNumber { get; set; }

        /// <summary>
        /// Increment of the suffix for the VM clones
        /// </summary>
        /// <value>Increment of the suffix for the VM clones</value>
        [DataMember(Name="cloneNameIncrement", EmitDefaultValue=false)]
        public int? CloneNameIncrement { get; set; }

        /// <summary>
        /// ID of the Resource pool to place the cloned VM(s) on
        /// </summary>
        /// <value>ID of the Resource pool to place the cloned VM(s) on</value>
        [DataMember(Name="resourcePoolId", EmitDefaultValue=false)]
        public string ResourcePoolId { get; set; }

        /// <summary>
        /// Name of the Resource pool to place the cloned VM(s) on
        /// </summary>
        /// <value>Name of the Resource pool to place the cloned VM(s) on</value>
        [DataMember(Name="resourcePoolName", EmitDefaultValue=false)]
        public string ResourcePoolName { get; set; }

        /// <summary>
        /// User Name
        /// </summary>
        /// <value>User Name</value>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VmCloneSpec {\n");
            sb.Append("  VmId: ").Append(VmId).Append("\n");
            sb.Append("  VmName: ").Append(VmName).Append("\n");
            sb.Append("  CloneNamePrefix: ").Append(CloneNamePrefix).Append("\n");
            sb.Append("  NumberOfClones: ").Append(NumberOfClones).Append("\n");
            sb.Append("  Parallel: ").Append(Parallel).Append("\n");
            sb.Append("  PowerOn: ").Append(PowerOn).Append("\n");
            sb.Append("  CustomSpecName: ").Append(CustomSpecName).Append("\n");
            sb.Append("  VmGuestNamePrefix: ").Append(VmGuestNamePrefix).Append("\n");
            sb.Append("  CloneNameStartNumber: ").Append(CloneNameStartNumber).Append("\n");
            sb.Append("  CloneNameIncrement: ").Append(CloneNameIncrement).Append("\n");
            sb.Append("  ResourcePoolId: ").Append(ResourcePoolId).Append("\n");
            sb.Append("  ResourcePoolName: ").Append(ResourcePoolName).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as VmCloneSpec);
        }

        /// <summary>
        /// Returns true if VmCloneSpec instances are equal
        /// </summary>
        /// <param name="other">Instance of VmCloneSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VmCloneSpec other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.VmId == other.VmId ||
                    this.VmId != null &&
                    this.VmId.Equals(other.VmId)
                ) && 
                (
                    this.VmName == other.VmName ||
                    this.VmName != null &&
                    this.VmName.Equals(other.VmName)
                ) && 
                (
                    this.CloneNamePrefix == other.CloneNamePrefix ||
                    this.CloneNamePrefix != null &&
                    this.CloneNamePrefix.Equals(other.CloneNamePrefix)
                ) && 
                (
                    this.NumberOfClones == other.NumberOfClones ||
                    this.NumberOfClones != null &&
                    this.NumberOfClones.Equals(other.NumberOfClones)
                ) && 
                (
                    this.Parallel == other.Parallel ||
                    this.Parallel != null &&
                    this.Parallel.Equals(other.Parallel)
                ) && 
                (
                    this.PowerOn == other.PowerOn ||
                    this.PowerOn != null &&
                    this.PowerOn.Equals(other.PowerOn)
                ) && 
                (
                    this.CustomSpecName == other.CustomSpecName ||
                    this.CustomSpecName != null &&
                    this.CustomSpecName.Equals(other.CustomSpecName)
                ) && 
                (
                    this.VmGuestNamePrefix == other.VmGuestNamePrefix ||
                    this.VmGuestNamePrefix != null &&
                    this.VmGuestNamePrefix.Equals(other.VmGuestNamePrefix)
                ) && 
                (
                    this.CloneNameStartNumber == other.CloneNameStartNumber ||
                    this.CloneNameStartNumber != null &&
                    this.CloneNameStartNumber.Equals(other.CloneNameStartNumber)
                ) && 
                (
                    this.CloneNameIncrement == other.CloneNameIncrement ||
                    this.CloneNameIncrement != null &&
                    this.CloneNameIncrement.Equals(other.CloneNameIncrement)
                ) && 
                (
                    this.ResourcePoolId == other.ResourcePoolId ||
                    this.ResourcePoolId != null &&
                    this.ResourcePoolId.Equals(other.ResourcePoolId)
                ) && 
                (
                    this.ResourcePoolName == other.ResourcePoolName ||
                    this.ResourcePoolName != null &&
                    this.ResourcePoolName.Equals(other.ResourcePoolName)
                ) && 
                (
                    this.UserName == other.UserName ||
                    this.UserName != null &&
                    this.UserName.Equals(other.UserName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.VmId != null)
                    hash = hash * 59 + this.VmId.GetHashCode();
                if (this.VmName != null)
                    hash = hash * 59 + this.VmName.GetHashCode();
                if (this.CloneNamePrefix != null)
                    hash = hash * 59 + this.CloneNamePrefix.GetHashCode();
                if (this.NumberOfClones != null)
                    hash = hash * 59 + this.NumberOfClones.GetHashCode();
                if (this.Parallel != null)
                    hash = hash * 59 + this.Parallel.GetHashCode();
                if (this.PowerOn != null)
                    hash = hash * 59 + this.PowerOn.GetHashCode();
                if (this.CustomSpecName != null)
                    hash = hash * 59 + this.CustomSpecName.GetHashCode();
                if (this.VmGuestNamePrefix != null)
                    hash = hash * 59 + this.VmGuestNamePrefix.GetHashCode();
                if (this.CloneNameStartNumber != null)
                    hash = hash * 59 + this.CloneNameStartNumber.GetHashCode();
                if (this.CloneNameIncrement != null)
                    hash = hash * 59 + this.CloneNameIncrement.GetHashCode();
                if (this.ResourcePoolId != null)
                    hash = hash * 59 + this.ResourcePoolId.GetHashCode();
                if (this.ResourcePoolName != null)
                    hash = hash * 59 + this.ResourcePoolName.GetHashCode();
                if (this.UserName != null)
                    hash = hash * 59 + this.UserName.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
