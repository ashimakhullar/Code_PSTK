// Author(s): 
// Ashima Bahl, asbahl@cisco.com 

using System.Management.Automation;
using IO.Swagger.Api;
using IO.Swagger.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using static IO.Swagger.Model.Job;

namespace Cisco.Runbook
{
    [Cmdlet(VerbsCommon.Set, "PrepareReverseProtect")]
    [OutputType(typeof(VirtualMachine))]

    public class SetPrepareReverseProtect : RecoveryCmdlet
    {

        // 
        // Properties (PowerShell Parameters) to be defined below
        //
        [Parameter(ParameterSetName = "HXName")]
        [ValidateNotNullOrEmpty]
        [Alias("name")]
        public string VMName { get; set; }

        //VMId will pass the VM uid
        [Parameter(Mandatory = true)]
        [ValidateNotNullOrEmpty]
        [Alias("vmid1")]
        public string VMId { get; set; }

        //Server Parameter contains the Cisco HXConnect IP
        [Parameter(Mandatory = true)]
        [Alias("srvr")]
        public string Server { get; set; }

        //Async will return the task id for asynchronous call to cmdlet-switch parameter
        [Parameter()]
        [ValidateNotNullOrEmpty]
        public SwitchParameter Async { get; set; }

        //
        // Cmdlet body
        //
        protected override void ProcessSPRecord()
        {
            //Server authentication to be done
            //ValidateServerSessions();
            if (ValidateParameters() == false)
                return;
            try
            {
                // Configure access token for authorization

                if (Server != null)
                {
                    Server = Server.Trim();
                }
                dynamic value = "";
                if (ConnectHXServer.storageKeyDictionary.TryGetValue(Server,
                                                                   out value))
                {
                    Console.WriteLine("Server = \"{0}\", is connected.", Server);
                }
                else
                {
                    Console.WriteLine("Server = \"{0}\" is not found.", Server);
                }
                string accessTkn = value.TokenType + " " + value.AccessToken;
                var apiInstance = new RecoverApi(Server);

                string respPrepRevProtect = String.Empty;
                if (VMId != null)
                {
                    //if switch parameter is true then return the task and exit
                    if (Async == true)
                    {
                        respPrepRevProtect = apiInstance.OpDpVmPrepareReverseProtectPut(VMId, 
															accessTkn, "en-US");
                        WriteVerbose("The Vm has been prepared for reverse protection");
                        WriteObject(respPrepRevProtect, true);
						return;
                    }
                    else
                    {
                        //if switch parameter is false then keep pinging the api for X minutes
                        //exit if status ="COMPLETED", "EXCEPTION"
                        //"SUSPENDED", "SHUTTING_DOWN", "TERMINATED", "CANCELLED", "EXCEPTION","STALLED"
                        //For "NEW", "STARTING", "RUNNING" status after every 3 seconds ping the API 

                        DateTime now = DateTime.Now;
                        respPrepRevProtect = apiInstance.OpDpVmPrepareReverseProtectPut(VMId,
														 accessTkn.Trim(), "en-US");
                        JObject joResponse = JObject.Parse(respPrepRevProtect);
                        JValue ojObject = (JValue)joResponse["taskId"];
                        WriteVerbose("Reverse Protection of VM done");
                        List<IO.Swagger.Model.Job> respVMTaskGet = apiInstance.OpDpVmTasksGet(accessTkn,
                                                                        VMId.ToString(), ojObject.ToString());
                        //get time X minutes from now
                        DateTime timeMinutesFromNow = GetTimeMinutesFromNow();
                        //Loop while the repVMTaskGet is not null and X minutes from now is not over
                        while (respVMTaskGet != null && now < timeMinutesFromNow)
                        {
                            List<IO.Swagger.Model.Job> checkVMTaskGet = apiInstance.OpDpVmTasksGet(accessTkn.ToString(),
                                                                                VMId.ToString(), ojObject.ToString());
                            //check if state is   SUSPENDED,SHUTTING_DOWN,TERMINATED,CANCELLED,COMPLETED,EXCEPTION,STALLED
                            if (new string[] {"SUSPENDED", "SHUTTING_DOWN", "TERMINATED", "CANCELLED",
                                                   "COMPLETED", "EXCEPTION","STALLED"}.Contains(checkVMTaskGet[0].State.ToString()))
                            {
                                respVMTaskGet = checkVMTaskGet;
                                break;
                            }
                            //check if state is         NEW,STARTING,RUNNING
                            else if (new string[] { "NEW", "STARTING", "RUNNING" }.Contains(checkVMTaskGet[0].State.ToString()))
                            {
                                {
                                    //Wait for 3 seconds
                                    System.Threading.Thread.Sleep(3000);
                                    now = DateTime.Now;
                                }
                            }
                         }
						 //call show status to display the status to the user
                         ShowStatus(respVMTaskGet);
                    }
                }
            }
            catch (ArgumentException e)
            {
                ErrorRecord psErrRecord = new ErrorRecord(
                           e, "Arguments not provided.", ErrorCategory.AuthenticationError, e.Message);
                WriteError(psErrRecord);
            }
            catch(Exception e)
            {
                
                WriteObject("Exception when calling apiInstance.OpDpVmPrepareReverseProtectPut: " + e.Message);
            }
         
        }

        /// <summary>
        /// gets two minute from the current time
        /// </summary>
        /// <returns></returns>
        private DateTime GetTimeMinutesFromNow()
        {
            //time after 2 minutes from the current time
            DateTime otherDate = DateTime.Now.AddMinutes(2);
            return otherDate;
        }

        protected internal override bool ValidateParameters()
        {
            // Leave this here so that we can add more checks if needed
            // and return all errors if there are multiple without returning
            // on the first one we find.
            return true;
        }


        /// <summary>
        /// Show Status of the Task corresponding to the state 
        /// </summary>
        /// <param name="List<IO.Swagger.Model.Job>">An instance of IO.Swagger.Model.Job</param>
        /// <returns></returns>
        protected override void ShowStatus(List<IO.Swagger.Model.Job> respVMTaskGet)
        {
            //switch case to display 
            switch (respVMTaskGet[0].State)
            {
                case StateEnum.CANCELLED:
                    WriteObject("Test Failover of VM Cancelled");
                    WriteObject(respVMTaskGet, true);
                    break;
                case StateEnum.COMPLETED:
                    WriteObject("Test Failover of VM Completed");
                    WriteObject(respVMTaskGet, true);
                    break;
                case StateEnum.EXCEPTION:
                    WriteObject("Test Failover of VM faced an Exception");
                    WriteObject(respVMTaskGet, true);
                    break;
                case StateEnum.SHUTTINGDOWN:
                    WriteObject("Test Failover of VM Shutting Down.");
                    WriteObject(respVMTaskGet, true);
                    break;
                case StateEnum.STALLED:
                    WriteObject("Test Failover of VM Stalled.");
                    WriteObject(respVMTaskGet, true);
                    break;
                case StateEnum.SUSPENDED:
                    WriteObject("Test Failover of VM Suspended.");
                    WriteObject(respVMTaskGet, true);
                    break;
                case StateEnum.TERMINATED:
                    WriteObject("Test Failover of VM Terminated.");
                    WriteObject(respVMTaskGet, true);
                    break;
                default:
                    throw new ArgumentOutOfRangeException("Status not existing");
            }
        }

    }

}
